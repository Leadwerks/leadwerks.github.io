var tipuesearch = {"pages": [
{"title": "introduction", "text": "\n404: Not Found\n", "tags": "introduction", "url": "https://www.ultraengine.com/learn/introduction?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Asset", "text": "\n\nBase class: Object\nThis is the base class for all media classes.\n\n\n\nProperty\nType\nDescription\n\n\n\n\npath\nconst WString&amp; path\nread-only string containing the path to the file the asset was loaded from\n\n\nReload\nMethod\nreloads an asset from the file it was originally loaded from\n\n\nSave\nMethod\nsaves an asset to a file\n\n\n\n", "tags": "Asset", "url": "https://www.ultraengine.com/learn/Asset?lang=cpp"},
{"title": "Asset::Reload", "text": "\n\nThis method reloads an asset from a file on the disk. If changes were made to the file they will appear after reloading.\n\n\nbool Reload(const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nflags\noptional load flags\n\n\n\n\nIf successful true is returned, otherwise false is returned.\n\n\n", "tags": "Asset::Reload", "url": "https://www.ultraengine.com/learn/Asset_Reload?lang=cpp"},
{"title": "Asset::Save", "text": "\n\nThis method saves the object to a file.\n\n\nbool Save(const WString&amp; path, const SaveFlags flags = SAVE_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to save to\n\n\nflags\noptional save flags\n\n\n\n\nReturns true if saving is supported for this object type, and if the object was successfully saved, otherwise false is returned.\n\n\n", "tags": "Asset::Save", "url": "https://www.ultraengine.com/learn/Asset_Save?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Sound", "text": "\n\nBase class: Asset\nA sound file stores a waveform that can be used to play noises.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nGetHandle\nMethod\nreturns the OpenAL albuffer for this sound\n\n\nGetLength\nMethod\nreturns the length of the sound, in seconds\n\n\nPlay\nMethod\nplays the sound once\n\n\nLoadSound\nFunction\nloads a sound from a file or stream\n\n\n\n", "tags": "Sound", "url": "https://www.ultraengine.com/learn/Sound?lang=cpp"},
{"title": "Sound::GetHandle", "text": "\n\nThis method returns the OpenAL albuffer object associated with this sound.\n\n\nALuint GetHandle()\n\n\nReturns the OpenAL albuffer object.\n\nThis feature is intended for advanced programmers. See the OpenAL documentation for more information.\n", "tags": "Sound::GetHandle", "url": "https://www.ultraengine.com/learn/Sound_GetHandle?lang=cpp"},
{"title": "Sound::GetLength", "text": "\n\nThis method returns the length of the sound file.\n\n\nfloat GetLangth()\n\n\nReturns the length of the sound file, in seconds.\n", "tags": "Sound::GetLength", "url": "https://www.ultraengine.com/learn/Sound_GetLength?lang=cpp"},
{"title": "LoadSound", "text": "\n\n\n\nshared_ptr&lt;Sound&gt; LoadSound(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\nshared_ptr&lt;Sound&gt; LoadSound(shared_ptr&lt;Stream&gt; stream, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile name to load\n\n\nstream\nstream to load the file from\n\n\nflags\noptional loading flags, can be LOAD_DEFAULT or any combination of LOAD_UNMANAGED and LOAD_QUIET\n\n\n\n\n\n", "tags": "LoadSound", "url": "https://www.ultraengine.com/learn/LoadSound?lang=cpp"},
{"title": "Sound::Play", "text": "\n\nThis method plays a sound once and returns a speaker object.\n\n\nshared_ptr&lt;Speaker&gt; Play()\n\n\nReturns a new speaker object that can be used to control the sound.\n\n\n", "tags": "Sound::Play", "url": "https://www.ultraengine.com/learn/Sound_Play?lang=cpp"},
{"title": "Speaker", "text": "\n\nBase class: Object\nThis class provides an interface to control the way a sound behaves when played.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nGetHandle\nMethod\nreturns the OpenAL alsource for the speaker\n\n\nGetPitch\nMethod\ngets the speaker pitch\n\n\nGetState\nMethod\ngets the speaker state\n\n\nGetTime\nMethod\ngets the current speaker sound time\n\n\nGetVolume\nMethod\ngets the speaker volume\n\n\nPause\nMethod\npauses the speaker\n\n\nPlay\nMethod\nplays or resumes the speaker\n\n\nSetLooping\nMethod\nset the speaker loop mode\n\n\nSetPitch\nMethod\nsets the speaker pitch\n\n\nSetTime\nMethod\njumps to the specified sound time\n\n\nSetVolume\nMethod\nsets the speaker volume\n\n\nStop\nMethod\nstops the speaker\n\n\nCreateSpeaker\nFunction\ncreates a new speaker object\n\n\n\n", "tags": "Speaker", "url": "https://www.ultraengine.com/learn/Speaker?lang=cpp"},
{"title": "CreateSpeaker", "text": "\n\nThis function creates a new speaker object.\n\n\nshared_ptr&lt;Speaker&gt; CreateSpeaker(shared_ptr&lt;Sound&gt; sound = NULL)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsound\noptional sound to set\n\n\n\n\nReturns a new speaker.\n\n\n", "tags": "CreateSpeaker", "url": "https://www.ultraengine.com/learn/CreateSpeaker?lang=cpp"},
{"title": "Speaker::GetHandle", "text": "\n\nThis method returns the OpenAL alsource object associated with this speaker.\n\n\nALuint GetHandle()\n\n\nReturns the OpenAL alsource object.\n\nThis feature is intended for advanced programmers. See the OpenAL documentation for more information.\n", "tags": "Speaker::GetHandle", "url": "https://www.ultraengine.com/learn/Speaker_GetHandle?lang=cpp"},
{"title": "Speaker::GetPitch", "text": "\n\nThis method gets the speaker pitch setting.\n\n\nfloat GetPitch()\n\n\nReturns the speaker pitch.\n", "tags": "Speaker::GetPitch", "url": "https://www.ultraengine.com/learn/Speaker_GetPitch?lang=cpp"},
{"title": "Speaker::GetState", "text": "\n\nThis method gets the speaker state.\n\n\nSpeakerState GetState()\n\n\nReturns SPEAKER_PLAYING, SPEAKER_STOPPED, or SPEAKER_PAUSED.\n", "tags": "Speaker::GetState", "url": "https://www.ultraengine.com/learn/Speaker_GetState?lang=cpp"},
{"title": "Speaker::GetTime", "text": "\n\nReturns the current speaker sound time.\n\nfloat GetTime()\n\nReturns the current speaker time, in seconds.\n", "tags": "Speaker::GetTime", "url": "https://www.ultraengine.com/learn/Speaker_GetTime?lang=cpp"},
{"title": "Speaker::GetVolume", "text": "\n\nThis method gets the speaker volume.\n\nfloat GetVolume()\n\nReturns the speaker volume.\n", "tags": "Speaker::GetVolume", "url": "https://www.ultraengine.com/learn/Speaker_GetVolume?lang=cpp"},
{"title": "Speaker::Pause", "text": "\n\nThis method pauses a playing speaker.\n\n\nvoid Pause()\n\n", "tags": "Speaker::Pause", "url": "https://www.ultraengine.com/learn/Speaker_Pause?lang=cpp"},
{"title": "Speaker::Play", "text": "\n\nThis method plays a speaker or resumes a stopped speaker.\n\n\nvoid Play()\n\n", "tags": "Speaker::Play", "url": "https://www.ultraengine.com/learn/Speaker_Play?lang=cpp"},
{"title": "Speaker::SetLooping", "text": "\n\nThie method sets the speaker loop mode.\n\n\nvoid SetLooping(const bool mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\nset to true for looping\n\n\n\n", "tags": "Speaker::SetLooping", "url": "https://www.ultraengine.com/learn/Speaker_SetLooping?lang=cpp"},
{"title": "Speaker::SetPitch", "text": "\n\nThis method sets the speaker pitch.\n\n\nvoid SetPitch(const float pitch)\n\n", "tags": "Speaker::SetPitch", "url": "https://www.ultraengine.com/learn/Speaker_SetPitch?lang=cpp"},
{"title": "Speaker::SetTime", "text": "\n\nThis method jumps to the specified time in a playing sound.\n\n\nvoid SetTime(const float time)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntime\ndestination time in seconds\n\n\n\n", "tags": "Speaker::SetTime", "url": "https://www.ultraengine.com/learn/Speaker_SetTime?lang=cpp"},
{"title": "Speaker::SetVolume", "text": "\n\nThis method sets the speaker volume.\n\n\nvoid SetVolume(const float volume)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvolume\nvolume scale relative to 1.0\n\n\n\n", "tags": "Speaker::SetVolume", "url": "https://www.ultraengine.com/learn/Speaker_SetVolume?lang=cpp"},
{"title": "Speaker::Stop", "text": "\n\nThis method stops a playing speaker.\n\n\nvoid Stop()\n\n", "tags": "Speaker::Stop", "url": "https://www.ultraengine.com/learn/Speaker_Stop?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Assert", "text": "\n\nThis function produces a runtime error if the supplied condition or object is false or NULL.\n\n\nvoid Assert(const bool condition)\nvoid Assert(const bool condition, const WString&amp; message)\nvoid Assert(shared_ptr&lt;Object&gt; o)\nvoid Assert(shared_ptr&lt;Object&gt; o, const WString&amp; message) \n\n\n\n\nParaemter\nDescription\n\n\n\n\ncondition\nif false a runtime error is generated\n\n\no\nif NULL a runtime error is generated\n\n\nmessage\nerror message to display\n\n\n\n\n\n", "tags": "Assert", "url": "https://www.ultraengine.com/learn/Assert?lang=cpp"},
{"title": "DebugLog", "text": "\n\nIn the debug build of your application, this function will print a message. In the release mode this function will perform no action. You can use this to display extra information during development of your application.\n\n\nvoid DebugLog(const WString&amp; message)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmessage\ntext to print\n\n\n\n\n\n", "tags": "DebugLog", "url": "https://www.ultraengine.com/learn/DebugLog?lang=cpp"},
{"title": "RuntimeError", "text": "\n\nThis function generates a critical error and exits the program.\n\n\nvoid RuntimeError(const WString&amp; message)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmessage\nerror message to print\n\n\n\n\n\n", "tags": "RuntimeError", "url": "https://www.ultraengine.com/learn/RuntimeError?lang=cpp"},
{"title": "Warn", "text": "\n\nThis function can be used to print a non-critical error. Each unique message this function receives will only be printed once, preventing the print output from being flooded with repeated messages.\n\n\nvoid Warn(const WString&amp; message)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmessage\nwarning message to print\n\n\n\n\n\n", "tags": "Warn", "url": "https://www.ultraengine.com/learn/Warn?lang=cpp"},
{"title": "Entity", "text": "\n\nBase class: Object\nThis is the base class for all 3D objects in a world. Terrain, lights, 3D models, and other types of objects all share this class in common.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nextra\nshared_ptr&lt;Object&gt;\nuser-defined object\n\n\nkids\nconst vector&lt; shared_ptr&lt;Entity&gt; &gt;&amp;\nread-only array of child entities\n\n\nmatrix\nconst xMat4&amp;\nread-only 4x4 matrix\n\n\nname\nWString\nentity name\n\n\nomega\nconst xVec3&amp;\nread-only angular velocity\n\n\nparent\nconst shared_ptr&lt;Entity&gt;&amp;\nentity parent\n\n\nposition\nconst xVec3&amp;\nread-only position\n\n\nquaternion\nconst xQuat&amp;\nread-only rotation\n\n\nrotation\nconst xVec3&amp;\nread-only Euler rotation\n\n\nscale\nconst xVec3&amp;\nread-only scale\n\n\ntags\nconst set&lt;WString&gt;&amp;\nread-only container of tags\n\n\nvelocity\nconst xVec3&amp;\nread-only linear velocity\n\n\nAddForce\nMethod\napply linear force to the entity\n\n\nAddPointForce\nMethod\napply linear force at a specific point\n\n\nAddTag\nMethod\nadds a tag\n\n\nAddTorque\nMethod\napply torque to the entity\n\n\nAlignToVector\nMethod\naligns an axis to a vector\n\n\nAttach\nMethod\nattaches the entity to a bone or navigation agent\n\n\nClearTags\nMethod\nremoves all tags\n\n\nCopy\nMethod\nduplicates the entity\n\n\nFindChild\nMethod\nsearches for a child by name\n\n\nGetAirborne\nMethod\nreturns the airborne state of a player\n\n\nGetAngularVelocity\nMethod\nreturns the entity angular velocity\n\n\nGetCollider\nMethod\nreturns the physics collider\n\n\nGetCollisionType\nMethod\nreturns the collision type\n\n\nGetColor\nMethod\nreturns the entity color\n\n\nGetCrouched\nMethod\nreturns the crouched state of a player\n\n\nGetBounds\nMethod\nreturns an axis-aligned bounding box\n\n\nGetDistance\nMethod\ncalculates distance to another entity\n\n\nGetHidden\nMethod\nreturns the entity hide state\n\n\nGetMass\nMethod\nreturns the entity mass\n\n\nGetParent\nMethod\nreturns the parent entity\n\n\nGetPhysicsMode\nMethod\ngets the entity physics behavior\n\n\nGetPickMode\nMethod\nreturns the entity pick mode\n\n\nGetPosition\nMethod\nreturns the entity position\n\n\nGetRotation\nMethod\nreturns the entity Euler rotation\n\n\nGetQuaternion\nMethod\nreturns the entity rotation\n\n\nGetScale\nMethod\nreturns the entity scale\n\n\nGetUuid\nMethod\nreturns the entitys unique identifier\n\n\nGetVelocity\nMethod\nreturns the entity linear velocity\n\n\nGetWorld\nMethod\nreturns the world the entity resides in\n\n\nInstantiate\nMethod\ncreates an instanced copy of the entity\n\n\nListen\nMethod\nuses the entity for sound spatialization\n\n\nMove\nMethod\nmoves the entity\n\n\nPoint\nMethod\npoints one entity at another\n\n\nRecordCollisions\nMethod\nenables collision recording\n\n\nRemoveTag\nMethod\nremoves a tag\n\n\nSetAngularVelocity\nMethod\nsets the entity angular velcoty\n\n\nSetCollider\nMethod\nsets the entity physics collider\n\n\nSetCollisionType\nMethod\nsets the entity collision type\n\n\nSetColor\nMethod\nsets the entity color\n\n\nSetDamping\nMethod\nsets the entity physics damping\n\n\nSetElasticity\nMethod\nsets the entity physics elasticity\n\n\nSetFriction\nMethod\nsets the entity physics friction\n\n\nSetHidden\nMethod\nhides or shows the entity\n\n\nSetInput\nMethod\nhandles controls for player movement\n\n\nSetMass\nMethod\nsets the entity physical mass\n\n\nSetMaterial\nMethod\napplies a material to the entity\n\n\nSetParent\nMethod\nparents one entity to another\n\n\nSetPhysicsMode\nMethod\nsets the entity physics behavior\n\n\nSetPosition\nMethod\nsets the entity position in local or global space\n\n\nSetRotation\nMethod\nsets the entity rotation in local or global space\n\n\nSetScale\nMethod\nsets the entity scale\n\n\nSetVelocity\nMethod\nsets the entity linear velocity\n\n\nStaticize\nMethod\npermanently makes an entity static\n\n\nSync\nMethod\nresets rendering interpolation\n\n\nTranslate\nMethod\ntranslates the entity position in local or global space\n\n\nTurn\nMethod\nturns the entity in local or global space\n\n\n\n", "tags": "Entity", "url": "https://www.ultraengine.com/learn/Entity?lang=cpp"},
{"title": "Brush", "text": "\n\nBase class: Entity\nThis class provides an interface for building level geometry with constructive solid geometry.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nfaces\nconst vector&lt;shared_ptr&lt;Face&gt; &gt;&amp;\nread-only array of faces\n\n\nAddFace\nMethod\nadds a new face to the brush\n\n\nAddVertex\nMethod\nadd a new vertex to the brush\n\n\nBuild\nMethod\nupdates texture mapping, physics collider, and visible meshes\n\n\nIntersectsBrush\nMethod\nbrush-brush intersection test\n\n\nIntersectsPoint\nMethod\nbrush-point intersection test\n\n\nSetVertexPosition\nMethod\nmoves a brush vertex\n\n\nSlice\nMethod\nslices the brush along a plane\n\n\nCreateBoxBrush\nFunction\ncreates a new box brush\n\n\nCreateBrush\nFunction\ncreates a new brush entity\n\n\n\n", "tags": "Brush", "url": "https://www.ultraengine.com/learn/Brush?lang=cpp"},
{"title": "Brush::AddFace", "text": "\n\nThis method adds a new face to a brush.\n\n\nshared_ptr&lt;Face&gt; AddFace()\n\n\nReturns the new face.\n\nThis example creates a box brush from scratch.\n\n", "tags": "Brush::AddFace", "url": "https://www.ultraengine.com/learn/Brush_AddFace?lang=cpp"},
{"title": "Brush::AddVertex", "text": "\n\nThis method adds a new vertex to a brush.\n\n\nint AddVertex(const float x, const float y, const float z)\nint AddVertex(const Vec3&amp; position)\n\n\n\n\nParameter\nDescription\n\n\n\n\nposition, (x, y, z)\nposition to set\n\n\n\n\nReturns the new vertex index.\n\nThis example creates a box brush from scratch.\n\n", "tags": "Brush::AddVertex", "url": "https://www.ultraengine.com/learn/Brush_AddVertex?lang=cpp"},
{"title": "Brush::Build", "text": "\n\nThis method calculates face planes, checked for flipped faces, updates texture mapping, updates the brush bounding boxes, builds a physics collider, and builds visible meshes.\n\n\nvoid Build()\n\n\nThis example creates a box brush from scratch.\n\n", "tags": "Brush::Build", "url": "https://www.ultraengine.com/learn/Brush_Build?lang=cpp"},
{"title": "CreateBoxBrush", "text": "\n\nThis function creates a brush with a box shape.\n\n\nshared_ptr&lt;Brush&gt; CreateBrush(shared_ptr&lt;World&gt; world)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the brush in\n\n\nwidth, height, depth\ndimensions of the box, in meters\n\n\n\n\nReturns a new brush entity.\n", "tags": "CreateBoxBrush", "url": "https://www.ultraengine.com/learn/CreateBoxBrush?lang=cpp"},
{"title": "CreateBrush", "text": "\n\nThis function creates a new empty brush entity.\n\n\nshared_ptr&lt;Brush&gt; CreateBrush(shared_ptr&lt;World&gt; world)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the brush in\n\n\n\n\nReturns a new brush entity.\n\nThis example creates a box brush from scratch.\n\n", "tags": "CreateBrush", "url": "https://www.ultraengine.com/learn/CreateBrush?lang=cpp"},
{"title": "Brush::IntersectsBrush", "text": "\n\nThis method can be used to test whether two brushes intersect.\n\n\nbool IntersectsBrush(shared_ptr&lt;Brush&gt; brush)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbrush\nbrush to test intersection against\n\n\n\n\nReturns true of the two brushes overlap, otherwise false is returned.\n\nUse the left and right key to move the blue brush. When the two objects intersects, it will turn red.\n\n\n", "tags": "Brush::IntersectsBrush", "url": "https://www.ultraengine.com/learn/Brush_IntersectsBrush?lang=cpp"},
{"title": "Brush::IntersectsPoint", "text": "\n\nThis method tests to see if a point in space is inside or outside of a brush.\n\n\nbool IntersectsPoint(const xVec3&amp; point, const dFloat padding = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\npoint\nposition in global space to test\n\n\npadding\nbrush face padding\n\n\n\n\nReturns true if the point is inside the brush, otherwise false is returned.\n\nThe optional padding value acts as if the brush faces are being moved forward by that amount, making the brush volume larger. This is not exactly the same thing as a radius around the point.\n", "tags": "Brush::IntersectsPoint", "url": "https://www.ultraengine.com/learn/Brush_IntersectsPoint?lang=cpp"},
{"title": "Brush::SetVertexPosition", "text": "\n\nThis method sets a brush vertex position.\n\n\nvoid SetVertexPosition(const int v, const float x, const float y, const float z)\nvoid SetVertexPosition(const int v, const Vec3&amp; position)\n\n\n\n\nParameter\nDescription\n\n\n\n\nv\nvertex index to set\n\n\nposition, (x, y, z)\nposition to set\n\n\n\n", "tags": "Brush::SetVertexPosition", "url": "https://www.ultraengine.com/learn/Brush_SetVertexPosition?lang=cpp"},
{"title": "Brush::Slice", "text": "\n\nThis method will slice a brush along a plane and return the two resulting pieces. The original brush will be unharmed.\n\n\nbool Slice(const Plane&amp; plane, shared_ptr&lt;Brush&gt; operandA, shared_ptr&lt;Brush&gt; operandB, shared_ptr&lt;Face&gt; sliceface = NULL, const float tolerance = 0.001)\n\n\n\n\nParameter\nDescription\n\n\n\n\nplane\nslice plane\n\n\noperandA\nbrush to receive the volume behind the slice plane\n\n\noperandB\nbrush to receive the volume in front of the slice plane\n\n\nsliceface\nif provided, material and texture mapping settings will be copied from this face to the end caps of the resulting brushes. This is useful for boolean operations, where one brush carves a volume out of another.\n\n\ntolerance\nerror tolerance, should be greater than zero\n\n\n\n\nIf the plane intersects the brush true is returned, otherwise false is returned. The results of the slice operation will be added to operandA and operandB.\nEither operandA or operandB may be NULL, but if both are NULL the operation will always return false.\nBrushes can be fractured by performing multiple slices.\nBoolean addition and subtraction can be performed by slicing multiple planes, discarding one operand, and grouping the resulting brushes.\n\nThis example will create a brush and cut it into two pieces.\n\n\n", "tags": "Brush::Slice", "url": "https://www.ultraengine.com/learn/Brush_Slice?lang=cpp"},
{"title": "Camera", "text": "\n\nBase class: Entity\nThe camera class is an entity used to render the world.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nAddPostEffect\nMethod\nAdds a post-processing effect to the post-processing effects stack.\n\n\nClearPostEffects\nMethod\nClears the post-processing effects stack.\n\n\nPick\nMethod\nperforms a raycast at the specified screen coordinates\n\n\nProject\nMethod\nprojects a position from world to screen space\n\n\nRender\nMethod\nrefreshes a camera view, for non-realtime cameras\n\n\nSetClearMode\nMethod\ncontrols color and depth clearing\n\n\nSetDepthPrepass\nMethod\nsets the camera depth pre-pass mode\n\n\nSetFov\nMethod\nsets the camera field of view\n\n\nSetRealtime\nMethod\nsets realtime rendering mode\n\n\nSetRefraction\nMethod\nenables or disables transparency refraction\n\n\nSetRenderTarget\nMethod\nfor render-to-texture\n\n\nSetTessellation\nMethod\nsets camera tessellation density\n\n\nSetZoom\nMethod\nsets the camera zoom\n\n\nUnProject\nMethod\nunprojects a position from screen to world space\n\n\nCreateCamera\nFunction\ncreates a new camera entity\n\n\n\n", "tags": "Camera", "url": "https://www.ultraengine.com/learn/Camera?lang=cpp"},
{"title": "Camera::AddPostEffect", "text": "\n\nThis method adds a post-processing effect to a camera.\n\nint AddPostEffect(shared_ptr&lt;PostEffect&gt; effect)\n\n\n\nParameter\nDescription\n\n\n\n\neffect\npost-processing effect to add\n\n\n\n\nReturns the index of the added post-processing effect, or negative one if the effect could not be added.\n\nA camera may have up to eight post-processing effects added.\n", "tags": "Camera::AddPostEffect", "url": "https://www.ultraengine.com/learn/Camera_AddPostEffect?lang=cpp"},
{"title": "Camera::ClearPostEffects", "text": "\n\nThis method removes all post-processing effects from the camera.\n\n\nvoid ClearPostEffects()\n\n", "tags": "Camera::ClearPostEffects", "url": "https://www.ultraengine.com/learn/Camera_ClearPostEffects?lang=cpp"},
{"title": "CreateCamera", "text": "\n\nThis function creates a new camera entity.\n\nshared_ptr&lt;Camera&gt; CreateCamera(shared_ptr&lt;World&gt; world, const projectionmode = PROJECTION_PERSPECTIVE)\n\n\n\nParameter\nDescription\n\n\n\n\nworld\n\n\n\nprojectionmode\nthis can be PROJECTION_PERSPECTIVE or PROJECTION_ORTHOGRAPHIC\n\n\n\n\nYou can create multiple cameras to render with. Cameras will be rendered in the order they are created. In most cases you will want to call Camera::SetClearMode with CLEAR_DEPTH as the argument, for all cameras created after the first one. This will ensure that the results of the previous camera render remain visible on the screen.\nYou can control which entities are visible to a camera with the Entity::SetRenderLayers method.\nThere are no 2D objects or drawing commands in Ultra Engine. Instead, all rendering is done through one uniform pipeline and the camera projection mode is used to control whether objects appear in 3D or 2D space. This has the benefits of very fast performance for 3D and 2D rendering, as well as effortless application of 3D effects in 2D, 2D physics in a 3D world, and other possibilities.\nIf you want to render 2D objects on top of a 3D scene, as you would for a head-up display in a game, you can create an extra camera to render in 2D in top of the perspective camera.\nIf orthographic projection is used, the new camera will have a depth range of (-1,1). With the default zoom (1.0) one pixel onscreen will be equal to one meter in space.\nIf perspective projection is used, the new camera will have a near depth range of 0.1 (ten centimeters) and a far depth range of 1000 (one kilometer).\nAny camera in the sequence can use post-processing effects, but only the first cameras post-processing effects will be used and subsequent cameras will have post-processing effects ignored. Transparency with refraction counts as a post-processing effect.\n\n\n", "tags": "CreateCamera", "url": "https://www.ultraengine.com/learn/CreateCamera?lang=cpp"},
{"title": "Camera::Pick", "text": "\n\nThis method performs a raycast at the specified screen coordinate.\n\n\nPickInfo Pick(shared_ptr&lt;Framebuffer&gt; framebuffer, const float x, const float y, const float radius = 0.0, const bool closest = false, const int collisiontype = COLLISION_NONE)\nPickInfo Pick(shared_ptr&lt;Framebuffer&gt; buffer, const Vec2&amp; screencoord, const float radius = 0.0, const bool closest = false, const int collisiontype = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nframebuffer\nframebuffer to test with\n\n\nscreencoord, (x, y)\nscreen coordinate to pick\n\n\nradius\npick sphere radius\n\n\nclosest\nif true the closest point will be determined\n\n\ncollisiontype\noptional collision type to test with\n\n\n\n\nReturns a PickInfo structure. If the success member of the structure is true an object was hit, otherwise it will be false.\n", "tags": "Camera::Pick", "url": "https://www.ultraengine.com/learn/Camera_Pick?lang=cpp"},
{"title": "Camera::Project", "text": "\n\nThis method projects a 3D position onto 2D screen space.\n\n\nVec3 Project(const Vec3&amp; point, shared_ptr&lt;Framebuffer&gt; framebuffer)\n\n\n\n\nParameter\nDescription\n\n\n\n\npoint\nposition in global space\n\n\nframebuffer\nframebuffer to test with\n\n\n\n\nReturns a screencoordinate, plus the distance in front of the camera stored in the Z component.\n", "tags": "Camera::Project", "url": "https://www.ultraengine.com/learn/Camera_Project?lang=cpp"},
{"title": "Camera::Render", "text": "\n\nThis method will trigger a refresh of a camera that is set to only render intermittently with the Camera::SetRealtime command.\n\n\nvoid Render()\n\n\n\n", "tags": "Camera::Render", "url": "https://www.ultraengine.com/learn/Camera_Render?lang=cpp"},
{"title": "Camera::SetClearMode", "text": "\n\nThis method sets the camera clear behavior.\n\n\nvoid SetClearMode(const ClearMode mode);\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\ncan be any combination of CLEAR_DEPTH and CLEAR_COLOR\n\n\n\n\nBy default a camera will clear the color and depth buffer before rendering begins. Multiple cameras can be used to render a larger area than what the depth buffer precision would allow otherwise. This is done by first rendering one camera, then rendering another camera that is set to only clear the depth buffer.\nCameras are always drawn in the order they are created.\n\nThis example uses two camera to draw the far and near scene, with small gap between their ranges to show the effect.\n\n", "tags": "Camera::SetClearMode", "url": "https://www.ultraengine.com/learn/Camera_SetClearMode?lang=cpp"},
{"title": "Camera::SetDepthPrepass", "text": "\n\nThis method enables or disables early Z-pass for the camera.\n\n\nvoid SetDepthPrepass(const bool mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\nif set to true early Z pass will be enabled\n\n\n\n\nBy default, Ultra Engine will render the depth only in a pre-pass before final rendering. This ensures that expensive lighting calculations are only performed on unoccluded pixels. However, in vertex-heavy scenes, or scene with heavy tessellation, it can be faster to disable the camera depth pre-pass with this method.\nDisabling the depth prepass can also be useful when debugging tessellation shaders, or other shaders that alter vertex positions.\n", "tags": "Camera::SetDepthPrepass", "url": "https://www.ultraengine.com/learn/Camera_SetDepthPrepass?lang=cpp"},
{"title": "Camera::SetFov", "text": "\n\nThis method sets the camera field of view.\n\n\nvoid SetFov(const float fov)\n\n\n\n\nParameter\nDescription\n\n\n\n\nfov\nvertical field of view, in degrees\n\n\n\n\nThe default field of view is 90 degrees.\n", "tags": "Camera::SetFov", "url": "https://www.ultraengine.com/learn/Camera_SetFov?lang=cpp"},
{"title": "Camera::SetRealtime", "text": "\n\nThis method allows you to control whether a camera renders continously or only when prompted to.\n\n\nvoid SetRealtime(const bool mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrealtime\nif set to true the camera will render continuously, otherwise it will render only when Camera::Render is called\n\n\n\n\nYou may want some cameras to only render once in a while, or when something changes. For example, a security camera that shows an image on a monitor in-game only needs to refreshed when the monitor is visible.\n\n\n", "tags": "Camera::SetRealtime", "url": "https://www.ultraengine.com/learn/Camera_SetRealtime?lang=cpp"},
{"title": "Camera::SetRefraction", "text": "\n\nThis method enables or disables the transparency refraction setting for the camera. This effect will make transparent surfaces appear to bend light as it passes through them.\n\nvoid SetRefraction(const bool mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\ntrue to enable transparency refraction or false to disable it\n\n\n\n\n\n\n", "tags": "Camera::SetRefraction", "url": "https://www.ultraengine.com/learn/Camera_SetRefraction?lang=cpp"},
{"title": "Camera::SetRenderTarget", "text": "\n\nThis method sets a camera to render to a texture buffer.\n\n\nvoid SetRenderTarget(shared_ptr&lt;TextureBuffer&gt; texturebuffer)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntexturebuffer\ntexture buffer to render to\n\n\n\n\n\n", "tags": "Camera::SetRenderTarget", "url": "https://www.ultraengine.com/learn/Camera_SetRenderTarget?lang=cpp"},
{"title": "Camera::SetTessellation", "text": "\n\nThis method sets the desired polygon edge size for tessellated materials.\n\n\nvoid SetTessellation(const int polygonsize)\n\n\n\n\nParameter\nDescription\n\n\n\n\npolygonsize\ndesired polygon edge length, in screen pixels\n\n\n\n\nA polygonsize value of 4 is suitable for high quality tessellation. If it is zero then tessellation will be disabled.\n\n\n\n", "tags": "Camera::SetTessellation", "url": "https://www.ultraengine.com/learn/Camera_SetTessellation?lang=cpp"},
{"title": "Camera::SetZoom", "text": "\n\nThis method sets the camera zoom factor.\n\n\nvoid SetZoom(const float zoom)\n\n\n\n\nParameter\nDescription\n\n\n\n\nzoom\ncamera zoom factor\n\n\n\n\nThe default camera zoom is 1.0.\n", "tags": "Camera::SetZoom", "url": "https://www.ultraengine.com/learn/Camera_SetZoom?lang=cpp"},
{"title": "Camera::UnProject", "text": "\n\nThis method projects 2D screen coordinate to a point.\n\n\nVec3 UnProject(const Vec3&amp; coord, shared_ptr&lt;Framebuffer&gt; framebuffer)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord\nscreen coordinate, plus distance in front of camera stored in the Z component\n\n\nframebuffer\nframebuffer to test with\n\n\n\n\nReturns a 3D position in global space.\n", "tags": "Camera::UnProject", "url": "https://www.ultraengine.com/learn/Camera_UnProject?lang=cpp"},
{"title": "Light", "text": "\n\nBase class: Entity\nThis entity emits light in a defined volume.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nGetConeAngles\nMethod\n\n\n\nGetFalloff\nMethod\n\n\n\nGetShadowMapSize\nMethod\n\n\n\nGetRange\nMethod\n\n\n\nSetConeAngles\nMethod\n\n\n\nSetFalloff\nMethod\n\n\n\nSetRange\nMethod\n\n\n\nSetShadowMapSize\nMethod\n\n\n\nCreateBoxLight\nFunction\nCreates a new box light\n\n\nCreateDirectionalLight\nFunction\nCreates a new directional light\n\n\nCreatePointLight\nFunction\nCreates a new point light\n\n\nCreateSpotLight\nFunction\nCreates a new spot light\n\n\n\n", "tags": "Light", "url": "https://www.ultraengine.com/learn/Light?lang=cpp"},
{"title": "CreateBoxLight", "text": "\n\nThis function creates a new box light.\n\n\nvoid CreateBoxLight(shared_ptr&lt;World&gt; world)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the light in\n\n\n\n\nReturns a new light.\n\n\n", "tags": "CreateBoxLight", "url": "https://www.ultraengine.com/learn/CreateBoxLight?lang=cpp"},
{"title": "CreateDirectionalLight", "text": "\n\nThis function creates a new directional light.\n\n\nvoid CreateDirectionalLight(shared_ptr&lt;World&gt; world)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the light in\n\n\n\n\nReturns a new light.\n\n\n", "tags": "CreateDirectionalLight", "url": "https://www.ultraengine.com/learn/CreateDirectionalLight?lang=cpp"},
{"title": "CreatePointLight", "text": "\n\nThis function creates a new point light.\n\n\nvoid CreatePointLight(shared_ptr&lt;World&gt; world)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the light in\n\n\n\n\nReturns a new light.\n\n\n", "tags": "CreatePointLight", "url": "https://www.ultraengine.com/learn/CreatePointLight?lang=cpp"},
{"title": "CreateSpotLight", "text": "\n\nThis function creates a new spot light.\n\n\nvoid CreateSpotLight(shared_ptr&lt;World&gt; world)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the light in\n\n\n\n\nReturns a new light.\n\n\n", "tags": "CreateSpotLight", "url": "https://www.ultraengine.com/learn/CreateSpotLight?lang=cpp"},
{"title": "Light::GetConeAngles", "text": "\n\nThis method gets the cone angles of a spot light.\n\n\nVec2 GetConeAngles()\n\n\nReturns the light outer and inner cone angles.\n", "tags": "Light::GetConeAngles", "url": "https://www.ultraengine.com/learn/Light_GetConeAngles?lang=cpp"},
{"title": "Light::GetFalloff", "text": "\n\nThis method gets the light falloff mode.\n\n\nLightFalloffMode GetFalloff()\n\n\nReturns LIGHTFALLOFF_LINEAR or LIGHTFALLOFF_INVERSE_SQUARE.\n", "tags": "Light::GetFalloff", "url": "https://www.ultraengine.com/learn/Light_GetFalloff?lang=cpp"},
{"title": "Light::GetRange", "text": "\n\nThis method gets the light range.\n\n\nVec2 GetRange()\n\n\nReturns the light near and far range. The far range is the maximum distance the light reaches. The near range is used for shadow map rendering.\n", "tags": "Light::GetRange", "url": "https://www.ultraengine.com/learn/Light_GetRange?lang=cpp"},
{"title": "Light::GetShadowMapSize", "text": "\n\nThis method gets the resolution of a lights shadow map.\n\n\nint GetShadowMapSize()\n\n\nReturns the lights shadow map resolution.\n", "tags": "Light::GetShadowMapSize", "url": "https://www.ultraengine.com/learn/Light_GetShadowMapSize?lang=cpp"},
{"title": "Light::SetConeAngles", "text": "\n\nThis method sets a spot lights inner and outer cone angles.\n\n\nvoid SetConeAngles(const float outerangle, const float innerangle)\n\n\n\n\nParameter\nDescription\n\n\n\n\nouterconeangle\nouter cone angle where light ends\n\n\ninnerconeangle\ninner cone angle where light reaches the maximum brightness\n\n\n\n\n\n", "tags": "Light::SetConeAngles", "url": "https://www.ultraengine.com/learn/Light_SetConeAngles?lang=cpp"},
{"title": "Light::SetFalloff", "text": "\n\nThis method sets the light falloff mode, to control the way light fades with distance.\n\n\nvoid SetFalloff(const LightFalloffMode falloff)\n\n\n\n\nParameter\nDescription\n\n\n\n\nfalloff\nlight falloff mode, can be LIGHTFALLOFF_LINEAR or LIGHTFALLOFF_INVERSE_SQUARE\n\n\n\n", "tags": "Light::SetFalloff", "url": "https://www.ultraengine.com/learn/Light_SetFalloff?lang=cpp"},
{"title": "Light::SetRange", "text": "\n\nThis method sets the distance to which the light illuminates.\n\n\nvoid SetRange(const float nearrange, const float farrange)\nvoid SetRange(const float farrange)\n\n\n\n\nParameter\nDescription\n\n\n\n\nnearrange\nnear range used for shadow map rendering\n\n\nfarrange\nthe maximum distance the light can reach\n\n\n\n\nPoint and spot lights should use a near and far range above zero.\nBox lights can have a negative near range, to make light appear behind the light position.\n", "tags": "Light::SetRange", "url": "https://www.ultraengine.com/learn/Light_SetRange?lang=cpp"},
{"title": "Light::SetShadowMapSize", "text": "\n\nThis method is used to control the resolution of a lights shadow map.\n\n\nvoid SetShadowMapSize(const int size)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsize\npower-of-two texture size\n\n\n\n", "tags": "Light::SetShadowMapSize", "url": "https://www.ultraengine.com/learn/Light_SetShadowMapSize?lang=cpp"},
{"title": "Model", "text": "\n\nBase class: Entity\nThe model class is used for visible 3D objects. Models can be loaded from files or created from scratch.\nUltra Engine natively supports loading and saving of models in the glTF and Wavefront OBJ file formats. Other model formats can be loaded via the plugin system.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nlods\nconst vector&lt;shared_ptr&lt;Lod&gt; &gt;&amp;\nread-only array of Lods\n\n\nskeleton\nconst shared_ptr&lt;Skeleton&gt;&amp;\nread-only skeleton object\n\n\nAddMesh\nMethod\nadds a new mesh to the model\n\n\nAddLod\nMethod\nadds a new level-of-detail to the model\n\n\nAnimate\nMethod\nanimates the model\n\n\nClear\nMethod\nremoves all meshes\n\n\nSave\nMethod\nsaves the model to a file\n\n\nSetLodDistance\nMethod\nsets the base Lod distance factor\n\n\nSetSkeleton\nMethod\nallows models to share a single skeleton\n\n\nUpdateNormals\nMethod\ncalculates new mesh normals\n\n\nCreateBox\nFunction\ncreates a new box model\n\n\nCreateCone\nFunction\ncreates a new cone model\n\n\nCreateCubeSphere\nFunction\ncreates a new sphere model\n\n\nCreateCylinder\nFunction\ncreates a new cylinder model\n\n\nCreateModel\nFunction\ncreates a new model\n\n\nCreatePlane\nFunction\ncreates a new plane model\n\n\nCreateSphere\nFunction\ncreates a new sphere model\n\n\nLoadModel\nFunction\nloads a model from a file\n\n\n\n", "tags": "Model", "url": "https://www.ultraengine.com/learn/Model?lang=cpp"},
{"title": "Model::AddLod", "text": "\n\nThis method adds a Lod to a model.\n\n\nint AddLod()\n\n\nReturns the index of the new level of detail.\n\n\n", "tags": "Model::AddLod", "url": "https://www.ultraengine.com/learn/Model_AddLod?lang=cpp"},
{"title": "Model::AddMesh", "text": "\n\nThis method creates or inserts an existing mesh on the model.\n\n\nshared_ptr&lt;Mesh&gt; AddMesh(const MeshPrimitives type = MESH_TRIANGLES, const int lod = 0)\nshared_ptr&lt;Mesh&gt; AddMesh(shared_ptr&lt;Mesh&gt; mesh, const int lod = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntype\nprimitive type, can be MESH_LINES, MESH_TRIANGLES, or MESH_QUADS\n\n\nmesh\nadds an existing mesh to the model\n\n\nlod\nmesh detail level\n\n\n\n\nReturns the added mesh.\n", "tags": "Model::AddMesh", "url": "https://www.ultraengine.com/learn/Model_AddMesh?lang=cpp"},
{"title": "Model::Animate", "text": "\n\nThis method causes an animation sequence to play.\n\n\nvoid Animate(const int sequence = 0, const float speed = 1.0f, const int blendtime = 250, const AnimationMode mode = ANIMATION_LOOP)\nvoid Animate(const WString&amp; sequence, const float speed = 1.0f, const int blendtime = 250, const AnimationMode mode = ANIMATION_LOOP)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsequence\nanimation sequence index or name. Sequence names are not case-sensitve\n\n\nblendtime\nanimation transition time, in milliseconds\n\n\nmode\nanimation playback mode. This can be ANIMATION_LOOP, ANIMATION_ONCE, or ANIMATION_STOP\n\n\n\n\nThis example loads and displays an animated model.\n\n\n", "tags": "Model::Animate", "url": "https://www.ultraengine.com/learn/Model_Animate?lang=cpp"},
{"title": "Model::Clear", "text": "\n\nThis method removes all meshes from the model, leaving a single empty level of detail.\n\n\nvoid Clear()\n\n", "tags": "Model::Clear", "url": "https://www.ultraengine.com/learn/Model_Clear?lang=cpp"},
{"title": "CreateBox", "text": "\n\nThis function creates a new box model with a physics collider.\n\n\nshared_ptr&lt;Model&gt; CreateBox(shared_ptr&lt;World&gt; world, const float size = 1)\nshared_ptr&lt;Model&gt; CreateBox(shared_ptr&lt;World&gt; world, const float width, const float height, const float depth, const int xsegs = 1, const int ysegs = 1, const int zsegs = 1, const MeshPrimitives type = MESH_TRIANGLES))\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the model in\n\n\nsize, (width, height, depth)\nuniform size or dimensions of the box\n\n\nxsegs, ysegs, zsegs\nnumber of segments on each axis\n\n\ntype\ncan be MESH_TRIANGLES or MESH_QUADS\n\n\n\n\nFor materials that use tessellation, set the quad parameter to true.\n\nReturns a new model.\n\n\n", "tags": "CreateBox", "url": "https://www.ultraengine.com/learn/CreateBox?lang=cpp"},
{"title": "CreateCone", "text": "\n\nThis function creates a new cone model with a physics collider.\n\n\nshared_ptr&lt;Model&gt; CreateCone(shared_ptr&lt;World&gt; world, const float radius = 0.5, const float height = 1.0, const int sides = 16, const int heightsegs = 1, const int capsegs = 1)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the mdoel in\n\n\nradius\ncone radius\n\n\nheight\ncone height\n\n\nsides\nnumber of sides\n\n\nheightsegs\nnumber of segments along the Y axis\n\n\ncapsegs\nnumber of end cap subdivisions\n\n\n\n\nReturns a new model.\n", "tags": "CreateCone", "url": "https://www.ultraengine.com/learn/CreateCone?lang=cpp"},
{"title": "CreateCubeSphere", "text": "\n\nThis function creates a new sphere model using a segmented cube morphed into a spherical shape, with a physics collider.\n\n\nshared_ptr&lt;Model&gt; CreateCubeSphere(shared_ptr&lt;World&gt; world, const float radius = 0.5, const int segments = 8, const MeshPrimtives type = MESH_TRIANGLES)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the mdoel in\n\n\nradius\ncylinder radius\n\n\nsegments\nsubdivisions for each face\n\n\ntype\ncan be MESH_TRIANGLES or MESH_QUADS\n\n\n\n\nReturns a new model.\n", "tags": "CreateCubeSphere", "url": "https://www.ultraengine.com/learn/CreateCubeSphere?lang=cpp"},
{"title": "CreateCylinder", "text": "\n\nThis function creates a new cylinder model with a physics collider.\n\n\nshared_ptr&lt;Model&gt; CreateCylinder(shared_ptr&lt;World&gt; world, const float radius = 0.5, const float height = 1.0, const int sides = 16, const int heightsegs = 1, const int capsegs = 1)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the mdoel in\n\n\nradius\ncylinder radius\n\n\nheight\ncylinder height\n\n\nsides\nnumber of sides\n\n\nheightsegs\nnumber of segments along the Y axis\n\n\ncapsegs\nnumber of end cap subdivisions\n\n\n\n\nReturns a new model.\n", "tags": "CreateCylinder", "url": "https://www.ultraengine.com/learn/CreateCylinder?lang=cpp"},
{"title": "CreateModel", "text": "\n\nThis function creates a new model.\n\n\nshared_ptr&lt;Model&gt; CreateModel(shared_ptr&lt;World&gt; world)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the model in\n\n\n\n\nReturns a new model.\n", "tags": "CreateModel", "url": "https://www.ultraengine.com/learn/CreateModel?lang=cpp"},
{"title": "CreatePlane", "text": "\n\nThis function creates a new model consisting of a single rectangle.\n\n\nshared_ptr&lt;Model&gt; CreatePlane(shared_ptr&lt;World/&gt; world, const float width = 1, const float height = 1, const int xsegs= 1, const int ysegs = 1, const MeshPrimtives type = MESH_TRIANGLES)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the model in\n\n\nwidth, height\nplane dimensions\n\n\nxsegs, ysegs\nmesh subdivision\n\n\ntype\ncan be MESH_TRIANGLES or MESH_QUADS\n\n\n\n\nReturns a new model.\n", "tags": "CreatePlane", "url": "https://www.ultraengine.com/learn/CreatePlane?lang=cpp"},
{"title": "CreateSphere", "text": "\n\nThis function creates a new sphere model with a physics collider.\n\n\nshared_ptr&lt;Model&gt; CreateSphere(shared_ptr&lt;World&gt; world, const float radius = 0.5, const int sides = 16)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the mdoel in\n\n\nradius\ncylinder radius\n\n\nsides\nnumber of sides\n\n\n\n\nReturns a new model.\n", "tags": "CreateSphere", "url": "https://www.ultraengine.com/learn/CreateSphere?lang=cpp"},
{"title": "LoadModel", "text": "\n\nThis function loads a model from a file.\n\n\nshared_ptr&lt;Model&gt; LoadModel(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\nshared_ptr&lt;Model&gt; LoadModel(shared_ptr&lt;Stream&gt; stream, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to read from\n\n\nstream\nstream to read from\n\n\n\n\nReturns the loaded model if successful, otherwise NULL is returned.\n\nUltra Engine natively supports glTF, OBJ, and Leadwerks MDL files. JPEG and PNG texture files are loaded using the FITextureLoader plugin.\n\nThis example loads and displays a 3D model.\n\n\n", "tags": "LoadModel", "url": "https://www.ultraengine.com/learn/LoadModel?lang=cpp"},
{"title": "Model::Save", "text": "\n\nThis method saves the model to a file, in glTF or Wavefront OBJ format.\n\n\nbool Save(const WString&amp; path, const SaveFlags = SAVE_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to save\n\n\nflags\noptional save flags\n\n\n\n\nReturns true if the model is successfully saved, otherwise false is returned.\n\n\n", "tags": "Model::Save", "url": "https://www.ultraengine.com/learn/Model_Save?lang=cpp"},
{"title": "Model::SetLodDistance", "text": "\n\nThis method sets the base Lod distance factor.\n\nvoid SetLodDistance(const dFloat basefactor)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbasefactor\ndistance factor for Lod changes\n\n\n\n\nEach level of detail above zero will be shown when the distance from the center of the models global bounding box to the camera exceeds the levels distance, as calculated by this equation:\ndistance = (2 ^ (level - 1)) * basefactor\nFor example, if basefactor is 10 then Lod 1 will be shown at a distance of 10 meters, Lod 2 will be shown at a distance of 20 meters, and Lod 3 will be shown at a distance of 40 meters.\n\n\n", "tags": "Model::SetLodDistance", "url": "https://www.ultraengine.com/learn/Model_SetLodDistance?lang=cpp"},
{"title": "Model::SetSkeleton", "text": "\n\nThis method assigns a skeleton to a model. You can use this to share a skeleton across multiple models.\n\n\nvoid SetSkeleton(shared_ptr&lt;Skeleton&gt; skeleton)\n\n\n\n\nParameter\nDescription\n\n\n\n\nskeleton\nskeleton to set\n\n\n\n\nThis method can be used to efficiently animate large crowds of characters. For example, if you have a horde of 1000 zombies, and 600 of them were running towards the player, you could set all 600 of those to use just a few skeletons that were playing the run animation. This would greatly reduce the number of skeletons that require animation updates while still providing some variation between different characters.\n\n\n", "tags": "Model::SetSkeleton", "url": "https://www.ultraengine.com/learn/Model_SetSkeleton?lang=cpp"},
{"title": "Model::UpdateNormals", "text": "\n\nThis method calculates new normals for every mesh in every level of detail in the model.\n\n\nvoid UpdateNormals()\n\n", "tags": "Model::UpdateNormals", "url": "https://www.ultraengine.com/learn/Model_UpdateNormals?lang=cpp"},
{"title": "Pivot", "text": "\n\nBase class: Entity\nThis class is a simple entity with no special properties.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nCreatePivot\nFunction\ncreates a new pivot entity\n\n\n\n", "tags": "Pivot", "url": "https://www.ultraengine.com/learn/Pivot?lang=cpp"},
{"title": "CreatePivot", "text": "\n\nThis function creates a new pivot entity.\n\n\nshared_ptr&lt;Pivot&gt; CreatePivot(shared_ptr&lt;World&gt; world)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld the new entity should reside in\n\n\n\n\nReturns a new pivot entity.\n", "tags": "CreatePivot", "url": "https://www.ultraengine.com/learn/CreatePivot?lang=cpp"},
{"title": "Probe", "text": "\n\nBase class: Entity\nEnvironment probes add a volume in which indirect lighting is shown.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nSetFadeDistance\nMethod\nsets the edge fade distance\n\n\nCreateProbe\nFunction\ncreates a new probe entity\n\n\n\n", "tags": "Probe", "url": "https://www.ultraengine.com/learn/Probe?lang=cpp"},
{"title": "CreateProbe", "text": "\n\nThis function creates a new environment probe.\n\n\nshared_ptr&lt;Probe&gt; CreateProbe(shared_ptr&lt;World&gt; world)\n\n\nReturns a new probe entity.\n\n\n\n", "tags": "CreateProbe", "url": "https://www.ultraengine.com/learn/CreateProbe?lang=cpp"},
{"title": "Probe::SetFadeDistance", "text": "\n\nThis method sets the probe volume edge fade. This can be used to make specified edges of the probe fade in more gradually.\n\n\nvoid SetFadeDistance(const float distance, const CubemapFace face)\n\n\n\n\nParameter\nDescription\n\n\n\n\ndistance\nfade distance\n\n\nface\ncubemap face, can be CUBEMAP_POSITIVE_X, CUBEMAP_NEGATIVE_X, CUBEMAP_POSITIVE_Y, CUBEMAP_NEGATIVE_Y, CUBEMAP_POSITIVE_Z, or CUBEMAP_NEGATIVE_Z\n\n\n\n\n\n\n", "tags": "Probe::SetFadeDistance", "url": "https://www.ultraengine.com/learn/Probe_SetFadeDistance?lang=cpp"},
{"title": "Sprite", "text": "\n\nBase class: Entity\nThis class provides 2D shapes and images on the screen.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nmesh\nconst shared_ptr&lt;Mesh&gt;&amp;\nread-only mesh object\n\n\nCreateSprite\nFunction\ncreates a new sprite object\n\n\nLoadSprite\nFunction\nloads a texture and applies it to a new sprite\n\n\n\n", "tags": "Sprite", "url": "https://www.ultraengine.com/learn/Sprite?lang=cpp"},
{"title": "CreateSprite", "text": "\n\nThis function creates a sprite that displays a rectangle or a string of text.\n\n\nshared_ptr&lt;Sprite&gt; CreateSprite(shared_ptr&lt;World&gt; world, const float width, const float height, const bool wireframe = false, const float radius = 0)\nshared_ptr&lt;Sprite&gt; CreateSprite(shared_ptr&lt;World&gt; world, const WString&amp; text, shared_ptr&lt;Font&gt; font, const int size)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\ncanvas to add the sprite to\n\n\nwidth\nwidth of the sprite, in pixels\n\n\nheight\nheight of the sprite, in pixels\n\n\nwireframe\nset to true for wireframe or false for solid\n\n\nradius\ncorner radius, for rounded rectangles\n\n\ntext\ntext to display\n\n\nfont\nfont to render text with\n\n\nsize\nfont size\n\n\n\n\nReturns a new sprite object.\n\n\n", "tags": "CreateSprite", "url": "https://www.ultraengine.com/learn/CreateSprite?lang=cpp"},
{"title": "LoadSprite", "text": "\n\nThis function loads a texture, creates a sprite with the dimensions of the texture image, and applies the texture to the sprite material.\n\n\nshared_ptr&lt;Sprite&gt; LoadSprite(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\n\n\nIf the texture is successfully loaded a new sprite is returned, otherwise NULL is returned.\n\n\n", "tags": "LoadSprite", "url": "https://www.ultraengine.com/learn/LoadSprite?lang=cpp"},
{"title": "Terrain", "text": "\n\nBase class: Entity\nThis class handles outdoor landscapes.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nheightmap\nconst shared_ptr&lt;Pixmap&gt;&amp;\npixmap containing terrain elevation data\n\n\nmaterial\nconst shared_ptr&lt;Material&gt;&amp;\nmaterial containing height and normal textures\n\n\nresolution\nconst iVec2&amp;\nread-only terrain resolution\n\n\nGetElevation\nMethod\nreturns the scaled terrain height\n\n\nGetHeight\nMethod\nreturns the heightmap height at the specified point\n\n\nGetMaterials\nMethod\nreturns the materials in use at the specified point\n\n\nGetMaterialWeight\nMethod\nreturns the weights of the materials in use at the specified point\n\n\nGetNormal\nMethod\nreturns the normal of the terrain at the specified position\n\n\nGetSlope\nMethod\nreturns the slope of the terrain at the specified position\n\n\nGetTileHidden\nMethod\ngets the visibility of a single terrain tile\n\n\nLoadHeightmap\nMethod\nloads a heightmap from a file\n\n\nSetHeight\nMethod\nsets the terrain height at the specified point\n\n\nSetElevation\nMethod\nsets the terrain scaled height at the specified point\n\n\nSetMaterial\nMethod\nsets the material to be used at the specified point\n\n\nSetTileHidden\nMethod\nhides or shows a single terrain tile\n\n\nCreateTerrain\nFunction\ncreates a new terrain entity\n\n\n\n", "tags": "Terrain", "url": "https://www.ultraengine.com/learn/Terrain?lang=cpp"},
{"title": "CreateTerrain", "text": "\n\nThis function creates a new terrain entity.\n\n\nshared_ptr&lt;Terrain&gt; CreateTerrain(shared_ptr&lt;World&gt; world, const int width, const int height)\nshared_ptr&lt;Terrain&gt; CreateTerrain(shared_ptr&lt;World&gt; world, const iVec2 resolution)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the terrain in\n\n\nresolution, (width, height)\nnumber of terrain points on each axis\n\n\n\n\n\n", "tags": "CreateTerrain", "url": "https://www.ultraengine.com/learn/CreateTerrain?lang=cpp"},
{"title": "Terrain::GetElevation", "text": "\n\nThis method gets the height of the terrain, in global coordinates.\n\n\nfloat GetElevation(const int tx, const int ty)\nfloat GetElevation(const iVec2&amp; coord)\nfloat GetElevation(const dFloat x, const dFloat y, const dFloat z)\nfloat GetElevation(const Vec3&amp; position)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord, (tx, ty)\nterrain coordinate\n\n\nposition, (x, y, z)\nglobal position\n\n\n\n\nReturns the global height of the terrain above the terrain position at the specified coordinate, or the interpolated height at the specified global position.\n", "tags": "Terrain::GetElevation", "url": "https://www.ultraengine.com/learn/Terrain_GetElevation?lang=cpp"},
{"title": "Terrain::GetHeight", "text": "\n\nThis method gets the height value at the specified coordinate.\n\n\nfloat GetHeight(const int x, const int y)\nfloat GetHeight(const iVec2 coord)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord, (x, y)\nterrain coordinate\n\n\n\n\nReturns the value stored in the heightmap at the specified coordinate.\n", "tags": "Terrain::GetHeight", "url": "https://www.ultraengine.com/learn/Terrain_GetHeight?lang=cpp"},
{"title": "Terrain::GetMaterials", "text": "\n\nThis method gets all the materials in use at the specified coordinate.\n\nstd::vector&lt;shared_ptr&lt;Material&gt; &gt; GetMaterials(const int x, const int y)\n\n\n\nParameter\nDescription\n\n\n\n\nx, y\nterrain coordinate\n\n\n\n\nReturns an array containing all the materials in use at the specified point.\n", "tags": "Terrain::GetMaterials", "url": "https://www.ultraengine.com/learn/Terrain_GetMaterials?lang=cpp"},
{"title": "Terrain::GetMaterialWeight", "text": "\n\nThis method gets the weighting of a material at the specified terrain point.\n\n\nfloat GetMaterialWeight(const int x, const int y, std::shared_ptr&lt;Material&gt; material)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx, y\nterrain coordinate\n\n\nmaterial\nmaterial to get the weight of\n\n\n\n\nReturns the material weight if it is in use at the specified terrain point, otherwise 0 is returned.\n", "tags": "Terrain::GetMaterialWeight", "url": "https://www.ultraengine.com/learn/Terrain_GetMaterialWeight?lang=cpp"},
{"title": "Terrain::GetNormal", "text": "\n\nThis method gets the terrain normal at the specified coordinate or 3D position.\n\n\nVec3 GetNormal(const int tx, const int ty)\nVec3 GetNormal(const iVec2&amp; coord)\nVec3 GetNormal(const xVec3&amp; coord)\nVec3 GetNormal(const dFloat x, const dFloat y, const dFloat z)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord, (tx, ty)\nterrain coordinate\n\n\nposition, (x, y, z)\nposition in global space\n\n\n\n\nReturns the terrain normal at the specified coordinate or the interpolated normal at the specified position in global space.\n", "tags": "Terrain::GetNormal", "url": "https://www.ultraengine.com/learn/Terrain_GetNormal?lang=cpp"},
{"title": "Terrain::GetSlope", "text": "\n\nThis method gets the terrain slope at the specified coordinate or 3D position.\n\n\nfloat GetSlope(const int tx, const int ty)\nfloat GetSlope(const iVec2&amp; coord)\nfloat GetSlope(const xVec3&amp; coord)\nfloat GetSlope(const dFloat x, const dFloat y, const dFloat z)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord, (tx, ty)\nterrain coordinate\n\n\nposition, (x, y, z)\nposition in global space\n\n\n\n\nReturns the terrain slope in degrees at the specified coordinate or the interpolated normal at the specified position in global space.\n\nThis example applies a material to a terrain based on the slope at each point.\n\n\n", "tags": "Terrain::GetSlope", "url": "https://www.ultraengine.com/learn/Terrain_GetSlope?lang=cpp"},
{"title": "Terrain::GetTileHidden", "text": "\n\nThis method is used to check if a single terrain tile is visible.\n\n\nbool GetTileHidden(const int x, const int y)\nbool GetTileHidden(const iVec2&amp; coord)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord, (x, y)\ntile coordinate\n\n\n\n\nReturns true if the file is hidden, otherwise false is returned.\n", "tags": "Terrain::GetTileHidden", "url": "https://www.ultraengine.com/learn/Terrain_GetTileHidden?lang=cpp"},
{"title": "Terrain::LoadHeightmap", "text": "\n\nThis method loads a heightmap onto the terrain.\n\n\nbool LoadHeightmap(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n", "tags": "Terrain::LoadHeightmap", "url": "https://www.ultraengine.com/learn/Terrain_LoadHeightmap?lang=cpp"},
{"title": "Terrain::SetElevation", "text": "\n\nThis method sets the height of the terrain, taking into account its vertical scale.\n\n\nvoid SetElevation(const int x, const int y, const float elevation)\nvoid SetElevation(const iVec2&amp; coord, const float elevation)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord, (x, y)\nterrain coordinate\n\n\nelevation\nheight to set, between 0 and the terrains vertical scale\n\n\n\n\n\n", "tags": "Terrain::SetElevation", "url": "https://www.ultraengine.com/learn/Terrain_SetElevation?lang=cpp"},
{"title": "Terrain::SetHeight", "text": "\n\nThis method sets a terrain points height. The height value will be clamped between 0.0 and 1.0.\n\n\nvoid SetHeight(const iVec2&amp; coord, const float height)\nvoid SetHeight(const int x, const int y, const float height)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord, (x, y)\nterrain coorinate\n\n\nheight\nheight to set\n\n\n\n", "tags": "Terrain::SetHeight", "url": "https://www.ultraengine.com/learn/Terrain_SetHeight?lang=cpp"},
{"title": "Terrain::SetMaterial", "text": "\n\nThis method sets the terrain material at any point on the heightmap. \n\n\nbool SetMaterial(shared_ptr&lt;Material&gt; material, const bool recursive = false)\nbool SetMaterial(const iVec2 coord, shared_ptr&lt;Material&gt; material, const float weight = 1.0f, const bool normalize = true)\nbool SetMaterial(const int x, const int y, shared_ptr&lt;Material&gt; material, const float weight = 1.0f, const bool normalize = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmaterial\nmaterial to apply\n\n\nrecursive\nif set to true, the material will be applied to all children in the entitys subhierarchy\n\n\ncoord, (x, y)\nterrain point to modify\n\n\nweight\ninfluence the material has at this point\n\n\nnormalize\nif set to true, other materials at this point will be adjusted so the sum of all material weights is 1.0\n\n\n\n\nIf the specified point lies outside of the terrain area, false is returned.\nIf the terrain is not currently using the specified material but is already using the maximum number of materials false is returned, otherwise true is returned.\n\nTerrains can use a maximum of 256 different materials each. Up to four materials can influence each point.\nThe first variation of this method will apply the specified material to one point on the terrain, with a weighting value. Up to four materials can be applied to any terrain point. Their weights will be normalized before rendering. If the material has already been applied at this terrain point, its weighting value will be replaced.\nThe second variation will apply the material to the entire terrain.\nIf the terrain point already has four materials applied, the material with the lowest influence less than or equal to the influence parameter will be replaced. If all materials have a higher influence than the new material, no change will occur.\nIf material is NULL, with any variation of this method, all materials will be removed.\nIf the terrain already is using the maximum number of materials, no change will occur.\n\nThis example lets you paint a material onto the terrain.\n\n\n", "tags": "Terrain::SetMaterial", "url": "https://www.ultraengine.com/learn/Terrain_SetMaterial?lang=cpp"},
{"title": "Terrain::SetTileHidden", "text": "\n\nThis method is used to show or hide a single terrain tile.\n\n\nvoid SetTileHidden(const int x, const int y, const bool hidden)\nvoid SetTileHidden(const iVec2 coord, const bool hidden)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncoord, (x, y)\ntile coordinate\n\n\nhidden\nif set to true the tile will be hidden, otherwise it will be visible\n\n\n\n\nThis example lets you cut holes in the terrain.\n\n", "tags": "Terrain::SetTileHidden", "url": "https://www.ultraengine.com/learn/Terrain_SetTileHidden?lang=cpp"},
{"title": "Entity::AddForce", "text": "\n\nThis method adds a physical force to the object, measured in Newtons.\n\n\nvoid AddForce(const dFloat x, const dFloat y, const dFloat z, const bool global = true)\nvoid AddForce(const xVec3&amp; force, const bool global = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nforce, (x, y, z)\nforce to add\n\n\nglobal\nset to true to indicate a vector in global space, otherwise the vector will be in local space\n\n\n\n\n\n", "tags": "Entity::AddForce", "url": "https://www.ultraengine.com/learn/Entity_AddForce?lang=cpp"},
{"title": "Entity::AddPointForce", "text": "\n\nThis method applies a force, measured in Newtons, to an entity at a specified point. This can result in both movement and rotation of the entity.\n\n\nvoid AddPointForce(const dFloat fx, const dFloat fy, const dFloat fz, const dFloat x, const dFloat y, const dFloat z, const bool global = true)\nvoid AddPointForce(const xVec3&amp; force, const xVec3&amp; position), const bool global = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nforce, (fx, fy, fz)\nforce to add\n\n\nposition, (x, y, z)\npoint where the force is applied\n\n\n\n\n\n", "tags": "Entity::AddPointForce", "url": "https://www.ultraengine.com/learn/Entity_AddPointForce?lang=cpp"},
{"title": "Entity::AddTag", "text": "\n\nThis method adds a text tag to the entity.\n\n\nvoid AddTag(const WString&amp; tag)\n\n\nYou can use World::GetTaggedEntities to retrieve all entities that use a specific tag.\n", "tags": "Entity::AddTag", "url": "https://www.ultraengine.com/learn/Entity_AddTag?lang=cpp"},
{"title": "Entity::AddTorque", "text": "\n\nThis method adds physical torque to the entity, measured in Newton metres.\n\n\nvoid AddTorque(const xVec3&amp; torque, const bool global = true)\nvoid AddTorque(const dFloat x, const dFloat y, const dFloat z, const bool global = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntorque, (x, y, z)\ntorque to add\n\n\nglobal\nset to true to indicate a rotation in global space, otherwise the rotation will be in local space\n\n\n\n\n", "tags": "Entity::AddTorque", "url": "https://www.ultraengine.com/learn/Entity_AddTorque?lang=cpp"},
{"title": "Entity::AlignToVector", "text": "\n\nThis method will align one axis of an entity along a specified vector in global space.\n\n\nvoid AlignToVector(const dFloat x, const dFloat y, const dFloat z, const int axis = 2, const dFloat rate = 1.0, const dFloat roll = 0.0)\nvoid AlignToVector(const xVec3&amp; v, const int axis = 2, const dFloat rate = 1.0, const dFloat roll = 0.0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nv, (x, y, z)\nalignment vector\n\n\naxis\nentity axis to align to the vector (0, 1, or 2)\n\n\nrate\ncan be used to gradually align vector\n\n\nroll\nrotation around axis\n\n\n\n\n\n", "tags": "Entity::AlignToVector", "url": "https://www.ultraengine.com/learn/Entity_AlignToVector?lang=cpp"},
{"title": "Entity::Attach", "text": "\n\nThis method attaches an entity to a model bone or a navigation agent. This provides a way of gluing an entity to a non-entity object.\n\n\nbool Attach(shared_ptr&lt;NavAgent&gt; agent)\nbool Attach(shared_ptr&lt;Model&gt; model, shared_ptr&lt;Bone&gt; bone)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmodel\nmodel to attach entity to\n\n\nbone\nskeleton bone to attach entity to\n\n\nagent\nnavigation agent to attach entity to\n\n\n\n\nReturns true if the attachment is valid, otherwise false is returned.\n\nFor bone attachments, the bone must belong to the skeleton the model is currently using.\nThe entitys local orientation at the time this method is called will be used to orient around the attachment.\nA bones scale will be disregarded in the entity placement.\n\nThis example will load an animated model and add some headgear to keep him warm.\n\n\n", "tags": "Entity::Attach", "url": "https://www.ultraengine.com/learn/Entity_Attach?lang=cpp"},
{"title": "Entity::ClearTags", "text": "\n\nThis method removes all tags from the entity.\n\n\nvoid ClearTags()\n\n", "tags": "Entity::ClearTags", "url": "https://www.ultraengine.com/learn/Entity_ClearTags?lang=cpp"},
{"title": "Entity::Copy", "text": "\n\nThis method returns a unique copy of the entity. Resources such as model meshes are duplicated, creating a new unique object. For faster performance and lower memory usage, consider using the Instantiate method instead.\n\n\nshared_ptr&lt;Entity&gt; Copy(shared_ptr&lt;World&gt; world, const bool recursive = true, const bool callstart = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create new copy in\n\n\nrecursive\nif set to true the entity subhierarchy will also be copied\n\n\ncallstart\nif set to true the Start function will be called for all attached actors and scripts\n\n\n\n\nReturns a copy of the entity.\n", "tags": "Entity::Copy", "url": "https://www.ultraengine.com/learn/Entity_Copy?lang=cpp"},
{"title": "Entity::FindChild", "text": "\n\nThis method searches the entity subhierarchy for a child with a specified name. Name searches are case-sensitive.\n\n\nshared_ptr&lt;Entity&gt; FindChild(const WString&amp; name, const bool cased = true)\nint FindChild(const WString&amp; name, vector&lt;shared_ptr&lt;Entity&gt;&gt; results, const bool cased = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nname\nname of the entity to find\n\n\ncased\nif set to true the name search will be case-sensitive\n\n\nresults\nall matching children will be added to the end of the array\n\n\n\n\nReturns the first entity found with the specified name, or the number of children found.\n\nThis method can be used to find a single child or multiple children. An asterisk can be used in the name for pattern matching. For example FindChild(wheel*) would return a child named wheel01 or wheel_2.\n\n\n", "tags": "Entity::FindChild", "url": "https://www.ultraengine.com/learn/Entity_FindChild?lang=cpp"},
{"title": "Entity::GetAirborne", "text": "\n\nThis method returns the current airborne state of an entity using player physics.\n\nbool GetAirborne()\n\nReturns false if the player is standing on the ground, otherwise true is returned.\n\n\n", "tags": "Entity::GetAirborne", "url": "https://www.ultraengine.com/learn/Entity_GetAirborne?lang=cpp"},
{"title": "Entity::GetAngularVelocity", "text": "\n\nThis method retrieves the entitys angular velocity after the previous physics update, in degrees per second.\n\n\nxVec3 GetAngularVelocity()\n\n\nReturns the entitys angular velocity, in degrees per second.\n", "tags": "Entity::GetAngularVelocity", "url": "https://www.ultraengine.com/learn/Entity_GetAngularVelocity?lang=cpp"},
{"title": "Entity::GetBounds", "text": "\n\nThis method retrieves the entity bounding box.\n\n\nxAabb GetBounds(const EntityBounds mode = BOUNDS_GLOBAL)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\ntype of bounds to retrieve, can be BOUNDS_LOCAL, BOUNDS_GLOBAL, or BOUNDS_RECURSIVE\n\n\n\n\nReturns the specified entity bounding box.\n", "tags": "Entity::GetBounds", "url": "https://www.ultraengine.com/learn/Entity_GetBounds?lang=cpp"},
{"title": "Entity::GetCollider", "text": "\n\nThis method retrieves the collision object the entity uses for physics.\n\n\nshared_ptr&lt;Collider&gt; GetCollider()\n\n\nReturns the collision object this entity uses, or NULL if no collision object is in use.\n", "tags": "Entity::GetCollider", "url": "https://www.ultraengine.com/learn/Entity_GetCollider?lang=cpp"},
{"title": "Entity::GetCollisionType", "text": "\n\nThis method retrieves the entity collision type.\n\n\nCollisionType GetCollisionType()\n\n\nReturns the entity collision type.\n", "tags": "Entity::GetCollisionType", "url": "https://www.ultraengine.com/learn/Entity_GetCollisionType?lang=cpp"},
{"title": "Entity::GetColor", "text": "\n\nThis method retrieves the entity color value.\n\n\nVec4 GetColor()\n\n\nReturns the entity color.\n", "tags": "Entity::GetColor", "url": "https://www.ultraengine.com/learn/Entity_GetColor?lang=cpp"},
{"title": "Entity::GetCrouched", "text": "\n\nThis method returns the current crouch state of an entity using player physics.\n\nbool GetCrouched()\n\nReturns true if the player input has set the crouch state to true or if the player is unable to stand up, otherwise false is returned.\n\n\n", "tags": "Entity::GetCrouched", "url": "https://www.ultraengine.com/learn/Entity_GetCrouched?lang=cpp"},
{"title": "Entity::GetDistance", "text": "\n\nThis method is used to calculate the distance in meters to another entity or to a point in global space.\n\n\ndFloat GetDistance(shared_ptr&lt;Entity&gt; entity)\ndFloat GetDistance(shared_ptr&lt;xVec3&gt; point)\ndFloat GetDistance(const dFloat x, const dFloat y, const dFloat z)\n\n\n\n\nParameter\nDescription\n\n\n\n\nentity\nentity to return the distance to.\n\n\npoint, (x, y, z)\nposition in global space to return the distance to\n\n\n\n\nReturns the distance to the specified entity or point, in meters.\n", "tags": "Entity::GetDistance", "url": "https://www.ultraengine.com/learn/Entity_GetDistance?lang=cpp"},
{"title": "Entity::GetHidden", "text": "\n\nThis method can be used to check whether an entity is currently hidden.\n\n\nbool GetHidden(const bool recursive = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrecursive\nif set to true the entitys parent hierarchy will be checked, otherwise only this entitys hide state will be returned\n\n\n\n\nReturns true if the entity is hidden, otherwise false is returned.\n", "tags": "Entity::GetHidden", "url": "https://www.ultraengine.com/learn/Entity_GetHidden?lang=cpp"},
{"title": "Entity::GetMass", "text": "\n\nThis method is used to retrieve the entitys physical mass.\n\n\ndFloat GetMass()\n\n\nReturns the entity mass, in kilograms.\n", "tags": "Entity::GetMass", "url": "https://www.ultraengine.com/learn/Entity_GetMass?lang=cpp"},
{"title": "Entity::GetParent", "text": "\n\nThis method retrieves an entitys parent.\n\n\nshared_ptr&lt;Entity&gt; GetParent()\n\n\nReturns the parent entity if it exists, otherwise NULL is returned.\n", "tags": "Entity::GetParent", "url": "https://www.ultraengine.com/learn/Entity_GetParent?lang=cpp"},
{"title": "Entity::GetPhysicsMode", "text": "\n\nThis method gets the entity physics behavior.\n\n\nPhysicsMode GetPhysicsMode()\n\n\nReturns PHYSICS_NONE, PHYSICS_RIGIDBODY, or PHYSICS_PLAYER.\n", "tags": "Entity::GetPhysicsMode", "url": "https://www.ultraengine.com/learn/Entity_GetPhysicsMode?lang=cpp"},
{"title": "Entity::GetPickMode", "text": "\n\nThis method retrieves the entity pick mode.\n\n\nPickMode GetPickMode()\n\n\nReturns the entity pick mode. This may be PICK_NONE, PICK_SPHERE, or PICK_MESH.\n", "tags": "Entity::GetPickMode", "url": "https://www.ultraengine.com/learn/Entity_GetPickMode?lang=cpp"},
{"title": "Entity::GetPosition", "text": "\n\nThis method returns the entity position.\n\n\nxVec3 GetPosition(const bool global  = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nglobal\nif set to false the position will be returned relative to the parent, otherwise the position in world space will be returned\n\n\n\n\nReturns this entitys position, in parent or world space.\n", "tags": "Entity::GetPosition", "url": "https://www.ultraengine.com/learn/Entity_GetPosition?lang=cpp"},
{"title": "Entity::GetRotation", "text": "\n\nThis method retrieves the entitys rotation.\n\n\nxVec3 GetRotation(const bool global  = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nglobal\nif set to true the global rotation is returned, otherwise local space is used\n\n\n\n\nReturns this entitys rotation as a Euler angle, in local or global space.\n", "tags": "Entity::GetRotation", "url": "https://www.ultraengine.com/learn/Entity_GetRotation?lang=cpp"},
{"title": "Entity::GetQuaternion", "text": "\n\nThis method retrieves the entity rotation as a quaternion.\n\n\nxQuat GetQuaternion(const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nglobal\nif set to false, the rotation relative to the parent is returned, otherwise the rotation in world space is returned\n\n\n\n\nReturns the entity rotation as a quaternion.\n", "tags": "Entity::GetQuaternion", "url": "https://www.ultraengine.com/learn/Entity_GetQuaternion?lang=cpp"},
{"title": "Entity::GetScale", "text": "\n\nThis method retrieves the entity scale.\n\n\nxVec3 GetScale()\n\n\nReturns the entity scale.\n", "tags": "Entity::GetScale", "url": "https://www.ultraengine.com/learn/Entity_GetScale?lang=cpp"},
{"title": "Entity::GetUuid", "text": "\n\nThis method returns the entitys unique identifier.\n\n\nString GetUuid()\n\n\nReturns the entitys unique globally unique identifier. If the entity does not have an identifier assigned yet, a new one will be generated and returned.\n\nThe entity UUID can be used for synchronizing objects over a network or saving and loading game data. All entities saved in a Scene file will have a unique identifier that will allow identitification across different computers.\nEntities that are created in code or loaded from a model file will not have a consistent UUID. For example, if a server and client both call CreateBox to create an object, their UUIDs will not match.\n", "tags": "Entity::GetUuid", "url": "https://www.ultraengine.com/learn/Entity_GetUuid?lang=cpp"},
{"title": "Entity::GetVelocity", "text": "\n\nThis method retrieves the entity velocity after the previous physics update, in global or local space.\n\n\nxVec3 GetVelocity(const bool global = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nglobal\nif set to true global space is used, otherwise local space is used\n\n\n\n\nReturns the entitys velocity, in meters per second.\n", "tags": "Entity::GetVelocity", "url": "https://www.ultraengine.com/learn/Entity_GetVelocity?lang=cpp"},
{"title": "Entity::GetWorld", "text": "\n\nThis method retrieves the world this entity belongs to.\n\n\nshared_ptr&lt;World&gt; GetWorld()\n\n\nReturns the world the entity belongs to, or NULL.\n", "tags": "Entity::GetWorld", "url": "https://www.ultraengine.com/learn/Entity_GetWorld?lang=cpp"},
{"title": "Entity::Instantiate", "text": "\n\nThis method returns an instanced copy of the entity. Resources such as model meshes are shared. If you want to create a unique copy of the entity, use the Copy method instead.\n\n\nshared_ptr&lt;Entity&gt; Instantiate(shared_ptr&lt;World&gt; world, const bool recursive = true, const bool callstart = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create new instance in\n\n\nrecursive\nif set to true the entity subhierarchy will also be copied\n\n\ncallstart\nif set to true the Start function will be called for all attached actors and scripts\n\n\n\n\nReturns an instanced copy of the entity.\n", "tags": "Entity::Instantiate", "url": "https://www.ultraengine.com/learn/Entity_Instantiate?lang=cpp"},
{"title": "Entity::Listen", "text": "\n\nThis method will cause the entity to be used for the listeners orientation for 3D sound spatialization.\n\n\nvoid Listen()\n\n", "tags": "Entity::Listen", "url": "https://www.ultraengine.com/learn/Entity_Listen?lang=cpp"},
{"title": "Entity::Move", "text": "\n\nThis method moves an entity in local space.\n\n\nvoid Move(const xVec3&amp; movement)\nvoid Move(const dFloat x, const dFloat y, const dFloat z)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmovement, (x, y, z)\nmovement vector\n\n\n\n", "tags": "Entity::Move", "url": "https://www.ultraengine.com/learn/Entity_Move?lang=cpp"},
{"title": "Entity::Point", "text": "\n\nThis method aligns an axis of the entity to point to another entity or a point in global space.\n\n\nvoid Point(shared_ptr&lt;Entity&gt; entity, const int axis = 2, const dFloat rate = 1, const dFloat roll = 0) \nvoid Point(const dFloat x, const dFloat y, const dFloat z, const int axis = 2, const dFloat rate = 1, const dFloat roll = 0) \nvoid Point(const xVec3&amp; position, const int axis = 2, const dFloat rate = 1, const dFloat roll = 0) \n\n\n\n\nParameter\nDescription\n\n\n\n\nentity\nentity to point to\n\n\nposition, (x, y, z)\nposition in space to point to\n\n\naxis\naxis to align (0, 1, or 2)\n\n\nrate\ncan be used to gradually align the entity\n\n\nroll\nrotation around the axis\n\n\n\n", "tags": "Entity::Point", "url": "https://www.ultraengine.com/learn/Entity_Point?lang=cpp"},
{"title": "Entity::RecordCollisions", "text": "\n\nThis method sets the entity collision recording mode. Entity collisions will not be stored in the world collision list unless collision recording is enabled.\n\n\nvoid RecordCollisions(const bool record)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrecord\nif set to true collisions will be recorded in the world collision list\n\n\n\n\n\n", "tags": "Entity::RecordCollisions", "url": "https://www.ultraengine.com/learn/Entity_RecordCollisions?lang=cpp"},
{"title": "Entity::RemoveTag", "text": "\n\nThis method removes a text tag from the entity.\n\n\nvoid RemoveTag(const WString&amp; tag)\n\n", "tags": "Entity::RemoveTag", "url": "https://www.ultraengine.com/learn/Entity_RemoveTag?lang=cpp"},
{"title": "Entity::SetAngularVelocity", "text": "\n\nThis method sets the angular velocity of an entity.\n\n\nvoid SetOmega(const xVec3&amp; omega, const bool recursive = true)\nvoid SetOmega(const dFloat x, const dFloat y, const dFloat z, const bool recursive = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nomega, (x, y, z)\nangular velocity to set, in degrees per second\n\n\nglobal\nif set to true angular velocity is in global space, otherwise local space is used\n\n\n\n", "tags": "Entity::SetAngularVelocity", "url": "https://www.ultraengine.com/learn/Entity_SetAngularVelocity?lang=cpp"},
{"title": "Entity::SetCollider", "text": "\n\nThis method sets the entitys collision shape for physics.\n\n\nvoid SetCollider(shared_ptr&lt;Collider&gt; collision)\n\n", "tags": "Entity::SetCollider", "url": "https://www.ultraengine.com/learn/Entity_SetCollider?lang=cpp"},
{"title": "Entity::SetCollisionType", "text": "\n\nThis method sets the entity collision type, for filtering collisions for physics.\n\n\nvoid SetCollisionType(const int collisiontype, const bool recursive = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncollisiontype\nentity collision type to set\n\n\nrecursive\nif set to true all children in the sub-hierarchy wlll also be set\n\n\n\n\nThe collision type can be any integer value or predefined collision type:\n\nCOLLISIONTYPE_NONE\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_SCENE\nCOLLISIONTYPE_PLAYER\nCOLLISIONTYPE_TRIGGER\nCOLLISIONTYPE_DEBRIS\nCOLLISIONTYPE_PROJECTILE\n\nCollision responses can be controlled with the World::SetCollsiionResponse command.\nThe table below shows the default collision responses the engine defines for each new world:\n\n\n\nType 1\nType 2\nResponse\n\n\n\n\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_PROP\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_SCENE\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_DEBRIS\nCOLLISIONTYPE_SCENE\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_DEBRIS\nCOLLISIONTYPE_PROP\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_SCENE\nCOLLISIONTYPE_PLAYER\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_PLAYER\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PLAYER\nCOLLISIONTYPE_PLAYER\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_SCENE\nCOLLISIONTYPE_PROJECTILE\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_PROJECTILE\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PLAYER\nCOLLISIONTYPE_TRIGGER\nCOLLISIONRESPONSE_DETECT\n\n\n\n\n\n", "tags": "Entity::SetCollisionType", "url": "https://www.ultraengine.com/learn/Entity_SetCollisionType?lang=cpp"},
{"title": "Entity::SetColor", "text": "\n\nThis method can be used to colorize a visible entity such as a model or light.\n\n\nvoid SetColor(const Vec4&amp; color, const bool recursive = false)\nvoid SetColor(const float r, const float g, const float b, const float a = 1, const bool recursive = false)\nvoid SetColor(const float luminance, const bool recursive = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncolor\nRGBA color to set\n\n\nr\nred component of the color to set\n\n\ng\ngreen component of the color to set\n\n\nb\nblue component of the color to set\n\n\na\nalpha component of the color to set\n\n\nluminance\nRGB brightness to set\n\n\nrecursive\nif set to true the entity subhierarchy will also be affected\n\n\n\n", "tags": "Entity::SetColor", "url": "https://www.ultraengine.com/learn/Entity_SetColor?lang=cpp"},
{"title": "Entity::SetDamping", "text": "\n\nThis method sets a damping factor to model resistance.\n\n\nvoid SetDamping(const dFloat lineardamping, const dFloat angulardamping)\n\n\n\n\nParameter\nDescription\n\n\n\n\nlineardamping\nlinear damping value, between 0 and 1\n\n\nangulardamping\nangular damping value, between 0 and 1\n\n\n\n", "tags": "Entity::SetDamping", "url": "https://www.ultraengine.com/learn/Entity_SetDamping?lang=cpp"},
{"title": "Entity::SetElasticity", "text": "\n\nThis methods sets the elasticity of the entity.\n\n\nvoid SetElasticity(const dFloat elasticity)\n\n\n\n\nParameter\nDescription\n\n\n\n\nelasticity\nelasticity value, between 0 and 1\n\n\n\n\n\n", "tags": "Entity::SetElasticity", "url": "https://www.ultraengine.com/learn/Entity_SetElasticity?lang=cpp"},
{"title": "Entity::SetFriction", "text": "\n\nThis method sets the friction of the entity.\n\n\nvoid SetFriction(const dFloat kinematicfriction, const dFloat staticfriction = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nkinematicfriction\nfriction of an object in motion\n\n\nstaticfriction\ninitial friction a stationary object must overcome to begin sliding\n\n\n\n\nThe Box2D physics engine only uses kinematic friction.\n\n\n", "tags": "Entity::SetFriction", "url": "https://www.ultraengine.com/learn/Entity_SetFriction?lang=cpp"},
{"title": "Entity::SetHidden", "text": "\n\nThis method hides or shows an entity. A hidden entity is invisible and will have no collision with other objects.\n\n\nvoid SetHidden(const bool hide)\n\n\n\n\nParameter\nDescription\n\n\n\n\nhide\nif set to true the entity will be hidden, otherwise it will be visible\n\n\n\n", "tags": "Entity::SetHidden", "url": "https://www.ultraengine.com/learn/Entity_SetHidden?lang=cpp"},
{"title": "Entity::SetInput", "text": "\n\nThis method sets player input for an entity that has its physics mode set to PHYSICS_PLAYER.\n\n\nvoid SetInput(const dFloat angle, const dFloat move, const dFloat strafe = 0, const dFloat jump = 0, const bool crouch = false, const dFloat maxaccel = 40, const dFloat maxdecel = 15)\n\n\n\n\nParaeeter\nDescription\n\n\n\n\nangle\nrotation of the character in degrees\n\n\nmove\nforward or backwards movement\n\n\nstrafe\nright or left movement\n\n\njump\njump force\n\n\ncrouch\ncrouch state\n\n\nmaxaccel\nmax acceleration\n\n\nmaxdecel\nmax deceleration\n\n\n\n\nYou can set the entity physics mode with the Entity::SetPhysicsMode method.\nYou can use the Entity::GetAirborne method to check if the entity is standing on the ground and able to jump.\n\n\n", "tags": "Entity::SetInput", "url": "https://www.ultraengine.com/learn/Entity_SetInput?lang=cpp"},
{"title": "Entity::SetMass", "text": "\n\nThis method sets the entity mass for physics interactivity.\n\nvoid SetMass(const dFloat mass)\n\n\n\nParameter\nDescription\n\n\n\n\nmass\nmass to set, or zero for immovable objects\n\n\n\n\n\n", "tags": "Entity::SetMass", "url": "https://www.ultraengine.com/learn/Entity_SetMass?lang=cpp"},
{"title": "Entity::SetParent", "text": "\n\nThis method retrieves an entitys parent, if it exists.\n\n\nvoid SetParent(shared_ptr&lt;Entity&gt; parent, const bool global = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nparent\nthe parent entity to set. This value can be NULL or any entity that is not this entity or a child of this entity\n\n\nglobal\nif set to true this entitys global orientation is maintained, otherwise the entity is reoriented to match the parents space.\n\n\n\n", "tags": "Entity::SetParent", "url": "https://www.ultraengine.com/learn/Entity_SetParent?lang=cpp"},
{"title": "Entity::SetPhysicsMode", "text": "\n\nThis method selects the entity physics behavior.\n\n\nvoid SetPhysicsMode(const PhysicsMode mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\nphysics mode, can be PHYSICS_NONE, PHYSICS_RIGIDBODY, or PHYSICS_PLAYER\n\n\n\n", "tags": "Entity::SetPhysicsMode", "url": "https://www.ultraengine.com/learn/Entity_SetPhysicsMode?lang=cpp"},
{"title": "Entity::SetPickMode", "text": "\n\nThis sets the pick mode of an entity for raycasting operations.\n\n\nvoid SetPickMode(const PickMode pickmode)\n\n\n\n\nParameter\nDescription\n\n\n\n\npickmode\npickmode to set (PICK_NONE, PICK_SPHERE, or PICK_MESH)\n\n\n\n", "tags": "Entity::SetPickMode", "url": "https://www.ultraengine.com/learn/Entity_SetPickMode?lang=cpp"},
{"title": "Entity::SetPosition", "text": "\n\nThis method sets the position of an entity in 3-dimensional space, using local or global coordinates.\nAn entity can be positioned in local or global coordinates. Local coordinates are relative to the entity parents space. If the entity does not have a parent, local and global coordinates are the same.\nThe engine uses a left-handed coordinate system. The X axis points to the right, the Y axis points up, and the Z axis points forward.\n\n\nvoid SetPosition(const xVec3&amp; position, const bool global = false) \nvoid SetPosition(const xVec2&amp; position, const bool global = false)\nvoid SetPosition(const dFloat x, const dFloat y, const dFloat z = 0.0, const bool global = false) \n\n\n\n\nParameter\nDescription\n\n\n\n\nposition, (x, y, z)\nThe position to set\n\n\nglobal\nIndicates whether the position should be set in global or local space\n\n\n\n", "tags": "Entity::SetPosition", "url": "https://www.ultraengine.com/learn/Entity_SetPosition?lang=cpp"},
{"title": "Entity::SetRenderLayers", "text": "\n\nThis method is used to control which cameras an entty is visible in.\n\n\nvoid SetRenderLayers(const unsigned int renderlayers)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrenderlayers\nbitwise flag indicating which render layers the entity should appear in\n\n\n\n", "tags": "Entity::SetRenderLayers", "url": "https://www.ultraengine.com/learn/Entity_SetRenderLayers?lang=cpp"},
{"title": "Entity::SetRotation", "text": "\n\nThis method sets the rotation of an entity in 3-dimensional space, using local or global space.\n\n\nvoid SetRotation(const xQuat&amp; rotation, const bool global = false)\nvoid SetRotation(const xVec3&amp; rotation, const bool global = false)\nvoid SetRotation(const dFloat pitch, const dFloat yaw, const dFloat roll, const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrotation, (pitch, yaw, roll)\nthe rotation to set, either as a Euler or quaternion\n\n\nglobal\nindicates whether the rotation should be set in global or local space\n\n\n\n\nAn entity can be rotated in local or global space. Local space is relative to the entity parents space. If the entity does not have a parent, local and global rotation is the same.\nThe engine uses a left-handed rotation system. Positive pitch turns an object down. Positive yaw turns to the right. Positive roll rolls to the left.\n", "tags": "Entity::SetRotation", "url": "https://www.ultraengine.com/learn/Entity_SetRotation?lang=cpp"},
{"title": "Entity::SetScale", "text": "\n\nThis method sets the scale of an entity on all three axes.\n\n\nvoid SetScale(const xVec3&amp; scale)\nvoid SetScale(const dFloat x, const dFloat y, const dFloat z)\nvoid SetScale(const dFloat scale)\n\n\n\n\nParameter\nDescription\n\n\n\n\nscale, (x, y, z)\nthe scale to set, either a Vec3 or a uniform scale value.\n\n\n\n", "tags": "Entity::SetScale", "url": "https://www.ultraengine.com/learn/Entity_SetScale?lang=cpp"},
{"title": "Entity::SetVelocity", "text": "\n\nThis method sets the velocity of an entity.\n\n\nvoid SetVelocity(const dFloat x, const dFloat y, const dFloat z, const bool global = true)\nvoid SetVelocity(const xVec3&amp; velocity, const bool global = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvelocity, (x, y, z)\nvelocity to set, in meters per second\n\n\nglobal\nif set to true velocity is in global space, otherwise local space is used\n\n\n\n", "tags": "Entity::SetVelocity", "url": "https://www.ultraengine.com/learn/Entity_SetVelocity?lang=cpp"},
{"title": "Entity::Staticize", "text": "\n\nThis method makes the entity static. A static entity cannot move and can be much more efficient to render. This operation is one-way and cannot be reversed.\n\n\nvoid Staticize()\n\n\nThis example shows how a scene can be optimized to make non-moving objects static, resulting in a lower shadow polygon count. In large scenes with many lights this can result in a large reduction of rendered polygons and faster performance.\n\n\n", "tags": "Entity::Staticize", "url": "https://www.ultraengine.com/learn/Entity_Staticize?lang=cpp"},
{"title": "Entity::Sync", "text": "\n\nThis method synchronizes changes to an entitys orientation and color. Use this to disable rendering interpolation when an object is teleported to a new location.\n\n\nvoid Sync()\n\n\nRendering is performed on a separate thread, and is likely to run at a different frequency than the main thread. In the rendering thread, changes to an entitys position, rotation, scale, and color are smoothly inerpolated between the most recent two updates received, resulting in smooth motion. If for any reason you want motion and color forced to the current value when they are received, this command can be called after setting the orientation or color. For example, if you load a model and then place it in a position where it is supposed to appear, you may wish to call this command to ensure there is not any interpolation between its original and final positions.\nNote that if physics are enabled it may introduce additional interpolation if the entity has a non-zero mass.\n\nIn this example the box on the top will use rendering interpolation, while the box on the bottom will continously call Sync() to prevent interpolation.\n\n", "tags": "Entity::Sync", "url": "https://www.ultraengine.com/learn/Entity_Sync?lang=cpp"},
{"title": "Entity::Translate", "text": "\n\nThis method repositions an entity relative to its parent orientation.\n\n\nvoid Translate(const xVec3&amp; translation, const bool global = false)\nvoid Translate(const dFloat x, const dFloat y, const dFloat z, const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntranslation, (x, y, z)\nmovement to apply to the entity\n\n\nglobal\nif set to false movement occurs relative to the parent space, otherwise world space is used\n\n\n\n", "tags": "Entity::Translate", "url": "https://www.ultraengine.com/learn/Entity_Translate?lang=cpp"},
{"title": "Entity::Turn", "text": "\n\nThis method turns an entity. This will produce smooth rotation free from Gimbal lock problems that can occur when rotations are manually specified.\n\n\nvoid Turn(const xQuat&amp; rotation, const bool global = false)\nvoid Turn(const xVec3&amp; rotation, const bool global = false)\nvoid Turn(const dFloat pitch, const dFloat yaw, const dFloat roll, const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrotation, (pitch, yaw, roll)\nrotation to apply\n\n\nglobal\nif set to true global space is used, otherwise local space is used\n\n\n\n", "tags": "Entity::Turn", "url": "https://www.ultraengine.com/learn/Entity_Turn?lang=cpp"},
{"title": "Entity Component System", "text": "\n\nThe Ultra Engine Entity Component System is a high-level system for developing games and simulations. The component system is designed to meet the following goals:\n\nAllow addition of modular logical components without increasing the overall complexity of the program.\nSupport for saving and loading of user-defined objects and game states.\nFacilitate emergent behavior as a result of component interaction.\n\nThe entity component system consists of internal engine elements combined with a preprocessor that generates code for your game. The type of components that are available will vary depending on what code files you have present in your project directory.\n\nIn the core Ultra Engine API you are accustomed to using entities. In the entity component system, the Actor is our main object type. The actor poseesses an entity as and additional modular blocks of behavior called components.\n\nComponents are blocks of functionality that can be added to an actor. An actor can have multiple components, but only one component of each type.\n\nTo start using the entity component system, create an actor:\n\nYou can add components to the actor like this:\n\nYou can call any methods of any components, and all component methods by the same name will be called:\n\nYou also can call a method for just one specific component, but it is generally better to call the actor method so that all components are have this method called:\n\nYou can access members of an individual component:\n\nYou can also call a method to set a value, and this will call the same method for each component that has it:\n\nYou can copy an actor. The entity will be instantiated and all components will be copied to the new actor, with their current properties intact:\n\n\nThe entity component system works together with the Scene system to save your entity components to a file and load them back into the program. This can be used for game saves or serializing the game state to send over a network to another player. In the example below, a scene is created, saved, and loaded again with C++ member values intact:\n\n\nTo add a new component class, create a new .hpp file in Source/Components with the name of the class. The name of the file must match the class name and cannot contain any spaces. For example Source/Components/MyComponent.hpp. Open the file and add this code:\n\nYou can omit any of the above methods if you are not using them. At scale, it will make your program more efficient if you declare only the methods you actually use.\n", "tags": "Entity Component System", "url": "https://www.ultraengine.com/learn/EntityComponentSystem?lang=cpp"},
{"title": "Actor", "text": "\n\nIn the entity component system, the actor is our main object type. The actor poseesses an entity as and additional modular blocks of behavior called components. An actor has only one entity but can have multiple components.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nentity\nconst shared_ptr&lt;Entity&gt;&amp;\nentity this actor controls\n\n\nAddComponent\nMethod\nadds a new component to the actor\n\n\nCopy\nMethod\nmakes a copy of the actor\n\n\nGetComponent\nMethod\ngets the component of the specified type, if it exists\n\n\nCreateActor\nFunction\ncreates a new actor\n\n\nGetEntityActor\nFunction\nretrieves an entitys actor\n\n\n\nAdditional methods may be generated by the preprocessor. These attributes will be created based on the component classes that are present in your project source code files.\n", "tags": "Actor", "url": "https://www.ultraengine.com/learn/Actor?lang=cpp"},
{"title": "Actor::AddComponent", "text": "\n\nThis method adds a new component to the actor.\n\n\nshared_ptr&lt;Component&gt; AddComponent&lt;T&gt;()\n\n\n\n\nParameter\nDescription\n\n\n\n\nT\ntype to add, must be the name of a class derived from the Component class\n\n\n\n\nReturns a new component. If the component has already been added, then the existing one is returned.\n", "tags": "Actor::AddComponent", "url": "https://www.ultraengine.com/learn/Actor_AddComponent?lang=cpp"},
{"title": "Actor::Copy", "text": "\n\nThis method makes a copy of an actor including its entity and all components.\n\nshared_ptr&lt;Actor&gt; Copy()\n\n\nReturns a new actor that is a duplicate of this one.\n\nThis example copies an actor with member values intact.\n\n", "tags": "Actor::Copy", "url": "https://www.ultraengine.com/learn/Actor_Copy?lang=cpp"},
{"title": "CreateActor", "text": "\n\nTHis function creates a new actor.\n\n\nshared_ptr&lt;Actor&gt; CreateActor(shared_ptr&lt;Entity&gt; entity)\n\n\n\n\nParameter\nDescription\n\n\n\n\nentity\nentity to associate the actor with\n\n\n\n\nReturns a new actor.\n", "tags": "CreateActor", "url": "https://www.ultraengine.com/learn/CreateActor?lang=cpp"},
{"title": "Actor::GetComponent", "text": "\n\nThis method gets the specified component, if it exists.\n\n\nshared_ptr&lt;Component&gt; GetComponent&lt;T&gt;()\n\n\n\n\nParameter\nDescription\n\n\n\n\nT\ntype to get, must be the name of a class derived from the Component class\n\n\n\n\nReturns the actors component if it exists, otherwise NULL is returned.\n", "tags": "Actor::GetComponent", "url": "https://www.ultraengine.com/learn/Actor_GetComponent?lang=cpp"},
{"title": "GetEntityActor", "text": "\n\nThis function gets the actor associated with the specified entity.\n\n\nshared_ptr&lt;Actor&gt; GetEntityActor(shared_ptr&lt;Entity&gt; entity)\n\n\nReturns the entitys actor if it exists, otherwise NULL is returned.\n", "tags": "GetEntityActor", "url": "https://www.ultraengine.com/learn/GetEntityActor?lang=cpp"},
{"title": "Component", "text": "\n\nThis class can be extended to add behavior and properties to an Actor.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nactor\nActor*\nactor this component belongs to\n\n\nentity\nshared_ptr&lt;Entity&gt;\nentity this components actor contains\n\n\nCollide\nMethod\ncalled whenever a physics collision occurs\n\n\nLoadState\nMethod\ncalled when an actor is loaded or copied\n\n\nSaveState\nMethod\ncalled when an actor is saved or copied\n\n\nStart\nMethod\ncalled when a component is added\n\n\nUpdate\nMethod\ncalled once for each actor in World::Update\n\n\n\nYou can override these methods or add your own in your component class. To add a new component, just create a new .hpp file in your Source\Components folder. You can use separate header and code files if you want, but it is more convenient to put everything in a single file that automatically gets included into your project. Compile your project once and the precompiler will detect your new file and update the component system code. The precompiler will automatically generate the files ComponentSystem.h and ComponentSystem.cpp. These files should never be changed by hand, since they will be overwritten every time the precompiler runs.\nThe precompiler is limited in its ability to parse C++ declarations, so its a good idea to stick to straightforward C++ syntax.\n\nThe Mover component is about as simple as it gets. It just stores some motion parameters and moves or turns the entity each time Update is called:\n\n\nWhen calling methods, you should call the actor method like this:\n\nDont call the components own method directly unless you are sure you want to:\n\nWhen you call the actor method, all components with the called method will be executed, allowing for more emergent behavior between components. For example, another component might have a Kill() method that plays a sound when called. By calling the Actor method, we ensure that all variations of the method are executed, so that all components can enact their behaviors.\n", "tags": "Component", "url": "https://www.ultraengine.com/learn/Component?lang=cpp"},
{"title": "Component::Collide", "text": "\n\nThis method is called evefy time the entity collides with another object.\n\n\nvoid Collide(shared_ptr&lt;Actor&gt; collidedactor, const Vec3&amp; position, const Vec3&amp; normal, const dFloat speed)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncollidedactor\ncollided entitys actor. If the entity does not have an actor, an empty one will be created and assigned to it\n\n\nposition\npoint the collision occured at\n\n\nnormal\ndirection of the collision\n\n\nspeed\nspeed of the collision\n\n\n\n", "tags": "Component::Collide", "url": "https://www.ultraengine.com/learn/Component_Collide?lang=cpp"},
{"title": "Component::LoadState", "text": "\n\nThis method is called when an actor is loaded from a file or copied.\n\n\nbool LoadState(nlohmann::json&amp; j3)\n\n\n\n\nParameter\nDescription\n\n\n\n\nj3\ncomponent data in a JSON object\n\n\n\n\nReturns true if the component is successfully loaded, otherwise false is returned.\n\nThis method can be overridden to add your own custom handling. For example, your component might need to create extra entities to use. If you do so, you will probably want to call the base method without your method, to load the built-in supported data types, like so:\n\nThe Ultra Engine entity component system will automatically save and load the following data types:\n\nbool\ndouble\ndFloat\ndMat3\ndMat4\ndPlane\ndQuat\ndVec2\ndVec3\ndVec4\nfloat\nint\niVec2\niVec3\niVec4\nVec2\nVec3\nVec4\nMat3\nMat4\nPlane\nQuat\nString\nWString\n\nAdditionally, Entity shared pointers are supported, as long as the entity is stored in the same file.\n", "tags": "Component::LoadState", "url": "https://www.ultraengine.com/learn/Component_LoadState?lang=cpp"},
{"title": "Component::SaveState", "text": "\n\nThis method is called when an actor is saved to a file or copied.\n\n\nbool SaveState(nlohmann::json&amp; j3)\n\n\n\n\nParameter\nDescription\n\n\n\n\nj3\ncomponent data in a JSON object\n\n\n\n\nReturns true if the component is successfully saved, otherwise false is returned.\n\nThis method can be overridden to add your own custom handling. For example, your component might need to save some extra information or write to another file. If you do so, you will probably want to call the base method without your method, to load the built-in supported data types, like so:\n\nThe Ultra Engine entity component system will automatically save and load the following data types:\n\nbool\ndouble\ndFloat\ndMat3\ndMat4\ndPlane\ndQuat\ndVec2\ndVec3\ndVec4\nfloat\nint\niVec2\niVec3\niVec4\nVec2\nVec3\nVec4\nMat3\nMat4\nPlane\nQuat\nString\nWString\n\nAdditionally, Entity shared pointers are supported, as long as the entity is stored in the same file.\n", "tags": "Component::SaveState", "url": "https://www.ultraengine.com/learn/Component_SaveState?lang=cpp"},
{"title": "Component::Start", "text": "\n\nThis method is called once when the component is first created or after it is loaded.\n\n\nvoid Start()\n\n\nYou can override this method and use it to initialize data or load additional resources.\n", "tags": "Component::Start", "url": "https://www.ultraengine.com/learn/Component_Start?lang=cpp"},
{"title": "Component::Update", "text": "\n\nThis method is called once per call to World::Update.\n\n\nvoid Update()\n\n\nYou can override this method to add your own custom behavior that is updated each frame. The base Update method only removes the component from the update list, so there is no need to call it yourself. In other words, dont do this:\n\n", "tags": "Component::Update", "url": "https://www.ultraengine.com/learn/Component_Update?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "FileSystemWatcher", "text": "\n\nThis class provides an interface to monitor a directory for changes to its files.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nCreateFileSystemWatcher\nFunction\nCreates a new filesystemwatcher object.\n\n\n\n", "tags": "FileSystemWatcher", "url": "https://www.ultraengine.com/learn/FileSystemWatcher?lang=cpp"},
{"title": "CreateFileSystemWatcher", "text": "\n\nThis function can be used to create an object that monitors a specified directory for changes.\n\n\nshared_ptr&lt;FileSystemWatcher&gt; CreateFileSystemWatcher(const WString&amp; path, const bool recursive = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\npath to folder to watch\n\n\nrecursive\nset to true to detect changes to the subdirectory\n\n\n\n\nReturns a new FileSystemWatcher object if the specified directory exists, otherwise NULL is returned.\n\nOnce the FileSystemWatcher object is created, it will monitor the directory to detect changes. When changes occur an event will be emitted. The event ID will be one of the following\n\nEVENT_FILECREATE\nEVENT_FILEDELETE\nEVENT_FILERENAME\nEVENT_FILECHANGE\n\n\n\n", "tags": "CreateFileSystemWatcher", "url": "https://www.ultraengine.com/learn/CreateFileSystemWatcher?lang=cpp"},
{"title": "Stream", "text": "\n\nBase class: Object\nThis class provides an interface for reading and writing files.\n\n\n\nProperty\nType\nDescription\n\n\n\n\npath\nconst WString&amp;\nRead-only file name or URL.\n\n\nClose\nMethod\ncloses the stream\n\n\nEof\nMethod\nreturns true when the end of the stream is reached\n\n\nFlush\nMethod\nflushes the stream\n\n\nGetPosition\nMethod\nreturns the current position for read and write operations\n\n\nGetSize\nMethod\nreturns the stream size\n\n\nRead\nMethod\nreads block of data from the stream\n\n\nReadByte\nMethod\nreads a byte from the stream\n\n\nReadDouble\nMethod\nreads a double float value from the stream\n\n\nReadFloat\nMethod\nreads a float value from the stream\n\n\nReadInt\nMethod\nreads an integer from the stream\n\n\nReadLine\nMethod\nreads a line of text\n\n\nReadShort\nMethod\nreads an unsigned short from the stream\n\n\nReadString\nMethod\nreads a string from the stream\n\n\nReadWLine\nMethod\nreads a line of text\n\n\nReadWString\nMethod\nreads a wide string from the stream\n\n\nSeek\nMethod\nchanges the file read position\n\n\nWrite\nMethod\nwrites block of data to the stream\n\n\nWriteByte\nMethod\nwrites a byte to the stream\n\n\nWriteDouble\nMethod\nwrites a double float value to the stream\n\n\nWriteFloat\nMethod\nwrites a float value to the stream\n\n\nWriteInt\nMethod\nwrites an integer to the stream\n\n\nWriteLine\nMethod\nwrites a line of text\n\n\nWriteShort\nMethod\nwrites an unsigned short to the stream\n\n\nWriteString\nMethod\nwrites a string to the stream\n\n\nWriteWLine\nMethod\nwrites a line of text\n\n\nWriteWString\nMethod\nwrites a wide string to the stream\n\n\nOpenFile\nFunction\nopens a file for reading and writing\n\n\nReadFile\nFunction\nopens a file for reading\n\n\nWriteFile\nFunction\nopens a file for writing\n\n\n\n", "tags": "Stream", "url": "https://www.ultraengine.com/learn/Stream?lang=cpp"},
{"title": "BufferStream", "text": "\n\nThis class provides a mechanism to read from and write to a block of memory as if it were a file.\nBase class: Stream\n\n\n\nProperty\nType\nDescription\n\n\n\n\nCreateBufferStream\nFunction\nCreates a new BufferStream object.\n\n\n\n", "tags": "BufferStream", "url": "https://www.ultraengine.com/learn/BufferStream?lang=cpp"},
{"title": "CreateBufferStream", "text": "\n\nThis function creates a new BufferStream object that allows read and writing to a block of memory as if it were a file.\n\n\nshared_ptr&lt;BufferStream&gt; CreateBufferStream(shared_ptr&lt;Buffer&gt; data = NULL, const WString&amp; path = )\n\n\n\n\nParameter\nDescription\n\n\n\n\ndata\ncan be used to specify an existing data buffer for the stream to use\n\n\npath\nsets the Stream path member to simulate a file\n\n\n\n\nReturns a new BufferStream object.\n\n\n", "tags": "CreateBufferStream", "url": "https://www.ultraengine.com/learn/CreateBufferStream?lang=cpp"},
{"title": "Stream::Close", "text": "\n\nThis method manually closes the stream for further read and write operations.\n\n\nvoid Close()\n\n\nIt is not necessary to call this method, as a stream will automatically close when it is deleted, but this method provides an additional mechanism to explicitly close it. This could be useful if you are not sure if the shared pointer is stored somewhere else in your program.\n\n\n", "tags": "Stream::Close", "url": "https://www.ultraengine.com/learn/Stream_Close?lang=cpp"},
{"title": "Stream::Eof", "text": "\n\nThis method returns true when the end of the stream is reached.\n\n\nbool Eof()\n\n\nReturns true if the file position is equal to the stream size minus one, otherwise false is returned.\n\n\n", "tags": "Stream::Eof", "url": "https://www.ultraengine.com/learn/Stream_Eof?lang=cpp"},
{"title": "Stream::Flush", "text": "\n\nThis method writes all queued data to the stream. You generally do not need to call this, as it will be done automatically.\n\n\nvoid Flush()\n\n\n\n", "tags": "Stream::Flush", "url": "https://www.ultraengine.com/learn/Stream_Flush?lang=cpp"},
{"title": "Stream::GetPosition", "text": "\n\nThis method returns the current offset in the stream for read and write operations.\n\nuint64_t GetPosition()\n\nReturns the stream position in bytes.\n\n\n", "tags": "Stream::GetPosition", "url": "https://www.ultraengine.com/learn/Stream_GetPosition?lang=cpp"},
{"title": "Stream::GetSize", "text": "\n\nThis method returns the size of the stream.\n\nuint64_t GetSize()\n\nReturns the stream size in bytes.\n\n\n", "tags": "Stream::GetSize", "url": "https://www.ultraengine.com/learn/Stream_GetSize?lang=cpp"},
{"title": "Stream::Read", "text": "\n\nThis method reads a block of memory from a stream. This can be more efficient than reading one value at a time, and supports additional data types there is not an explicit read method for.\n\n\nuint64_t Read(shared_ptr&lt;Buffer&gt; data, const uint64_t offset, const uint64_t size)\nuint64_t Read(const void* data, const uint64_t size)\n\n\n\n\nParameter\nDescription\n\n\n\n\noffset\noffset in bytes from memory buffer beginning\n\n\ndata\nbuffer or pointer to write to\n\n\nsize\nnumber of bytes to read\n\n\n\n\nReturns the number of bytes that were read from the stream.\n\n\n", "tags": "Stream::Read", "url": "https://www.ultraengine.com/learn/Stream_Read?lang=cpp"},
{"title": "Stream::ReadByte", "text": "\n\nThis method reads a single byte from a stream.\n\n\nunsigned char ReadByte()\n\n\nReturns a byte read from the stream.\n\n\n", "tags": "Stream::ReadByte", "url": "https://www.ultraengine.com/learn/Stream_ReadByte?lang=cpp"},
{"title": "Stream::ReadDouble", "text": "\n\nThis method reads a double float value from the stream.\n\n\ndouble ReadDouble()\n\n\nReturns a double float value read from the stream.\n\n\n", "tags": "Stream::ReadDouble", "url": "https://www.ultraengine.com/learn/Stream_ReadDouble?lang=cpp"},
{"title": "Stream::ReadFloat", "text": "\n\nThis method reads a float value from the stream.\n\n\nfloat ReadFloat()\n\n\nReturns a float value read from the stream.\n\n\n", "tags": "Stream::ReadFloat", "url": "https://www.ultraengine.com/learn/Stream_ReadFloat?lang=cpp"},
{"title": "Stream::ReadInt", "text": "\n\nThis method reads an integer value from the stream.\n\n\nint ReadInt()\n\n\nReturns an integer value read from the stream.\n\n\n", "tags": "Stream::ReadInt", "url": "https://www.ultraengine.com/learn/Stream_ReadInt?lang=cpp"},
{"title": "Stream::ReadLine", "text": "\n\nThis method reads a line of text from the stream.\n\n\nString ReadLine()\n\n\nReturns a line of text from the stream.\n\n\n", "tags": "Stream::ReadLine", "url": "https://www.ultraengine.com/learn/Stream_ReadLine?lang=cpp"},
{"title": "Stream::ReadWLine", "text": "\n\nThis method reads line of wide text from the stream.\n\n\nWString ReadWLine()\n\n\nReturns a line of wide text from the stream.\n\n\n", "tags": "Stream::ReadWLine", "url": "https://www.ultraengine.com/learn/Stream_ReadWLine?lang=cpp"},
{"title": "Stream::ReadShort", "text": "\n\nThis method reads an unsigned short value from the stream.\n\n\nunsigned short ReadShort()\n\n\nReturns an unsigned short value read from the stream.\n\n\n", "tags": "Stream::ReadShort", "url": "https://www.ultraengine.com/learn/Stream_ReadShort?lang=cpp"},
{"title": "Stream::ReadString", "text": "\n\nThis method reads a string from the stream at the current position. The string will be terminated by either the null character, the end of the file, or the maxomum string length, whichever comes first.\n\n\nString ReadString(const int maxlength = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmaxlength\nif greater than zero, this is maximum length of the string that will be read\n\n\n\n\n\n", "tags": "Stream::ReadString", "url": "https://www.ultraengine.com/learn/Stream_ReadString?lang=cpp"},
{"title": "Stream::ReadWString", "text": "\n\nThis method reads a wide null-terminated string from the stream.\n\n\nWString ReadWString()\n\n\nReturns a wide string value read from the file.\n\n\n", "tags": "Stream::ReadWString", "url": "https://www.ultraengine.com/learn/Stream_ReadWString?lang=cpp"},
{"title": "Stream::Seek", "text": "\n\nThis method sets the stream position for reading or writing.\n\n\nvoid Seek(const uint64_t pos)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\nnew position, between zero and the stream size\n\n\n\n\n\n", "tags": "Stream::Seek", "url": "https://www.ultraengine.com/learn/Stream_Seek?lang=cpp"},
{"title": "Stream::Write", "text": "\n\nThis method writes a block of memory to the stream. This can be more efficient than writing one value at a time, and supports additional data types there is not an explicit write method for.\n\n\nuint64_t Write(shared_ptr&lt;Buffer&gt; data, const uint64_t offset, const uint64_t size)\nuint64_t Write(const void* data, const uint64_t size)\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata\nbuffer or pointer to read from\n\n\noffset\noffset in bytes from memory buffer beginning\n\n\nsize\nnumber of bytes to write\n\n\n\n\nReturns the number of bytes that were written to the stream.\n\n\n", "tags": "Stream::Write", "url": "https://www.ultraengine.com/learn/Stream_Write?lang=cpp"},
{"title": "Stream::WriteByte", "text": "\n\nThis method writes a single byte value to the stream at the current position.\n\n\nvoid WriteByte(const unsigned char b)\n\n\n\n\nParameter\nDescription\n\n\n\n\nb\nvalue to write\n\n\n\n\n\n", "tags": "Stream::WriteByte", "url": "https://www.ultraengine.com/learn/Stream_WriteByte?lang=cpp"},
{"title": "Stream::WriteDouble", "text": "\n\nThis method writes a double float value to the stream at the current position.\n\n\nvoid WriteDouble(const double d)\n\n\n\n\nParameter\nDescription\n\n\n\n\nd\nvalue to write\n\n\n\n\n\n", "tags": "Stream::WriteDouble", "url": "https://www.ultraengine.com/learn/Stream_WriteDouble?lang=cpp"},
{"title": "Stream::WriteFloat", "text": "\n\nThis method writes a float value to the stream at the current position.\n\n\nvoid WriteFloat(const float f)\n\n\n\n\nParameter\nDescription\n\n\n\n\nf\nvalue to write\n\n\n\n\n\n", "tags": "Stream::WriteFloat", "url": "https://www.ultraengine.com/learn/Stream_WriteFloat?lang=cpp"},
{"title": "Stream::WriteInt", "text": "\n\nThis method writes an integer value to the stream at the current position.\n\n\nvoid WriteInt(const int i)\n\n\n\n\nParameter\nDescription\n\n\n\n\ni\nvalue to write\n\n\n\n\n\n", "tags": "Stream::WriteInt", "url": "https://www.ultraengine.com/learn/Stream_WriteInt?lang=cpp"},
{"title": "Stream::WriteLine", "text": "\n\nThis method writes a line of text to the stream at the current position.\n\n\nvoid WriteLine(const String&amp; s)\n\n\n\n\nParameter\nDescription\n\n\n\n\ns\nvalue to write\n\n\n\n\n\n", "tags": "Stream::WriteLine", "url": "https://www.ultraengine.com/learn/Stream_WriteLine?lang=cpp"},
{"title": "Stream::WriteShort", "text": "\n\nThis method writes an unsigned short value to the stream at the current position.\n\n\nvoid WriteInt(const unsigned short i)\n\n\n\n\nParameter\nDescription\n\n\n\n\ni\nvalue to write\n\n\n\n\n\n", "tags": "Stream::WriteShort", "url": "https://www.ultraengine.com/learn/Stream_WriteShort?lang=cpp"},
{"title": "Stream::WriteString", "text": "\n\nThis method writes a string to the stream at the current position.\n\n\nvoid WriteString(const String&amp; s, const bool terminate = true)\n\n\n\n\n\nName\nDescription\n\n\n\n\ns\nstring to write\n\n\nterminate\nif true an extra byte with a value of zero will be written at the end of the string\n\n\n\n\n\n", "tags": "Stream::WriteString", "url": "https://www.ultraengine.com/learn/Stream_WriteString?lang=cpp"},
{"title": "Stream::WriteWLine", "text": "\n\nThis method writes a line of wide text to the stream at the current position.\n\n\nvoid WriteWLine(const WString&amp; s)\n\n\n\n\nParameter\nDescription\n\n\n\n\ns\nvalue to write\n\n\n\n\n\n", "tags": "Stream::WriteWLine", "url": "https://www.ultraengine.com/learn/Stream_WriteWLine?lang=cpp"},
{"title": "Stream::WriteWString", "text": "\n\nThis method writes a wide string to the stream at the current position.\n\n\nvoid WriteWString(const WString&amp; s, const bool terminate = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\ns\nstring to write\n\n\nterminate\nif true an extra short with a value of zero will be written at the end of the string\n\n\n\n\n\n", "tags": "Stream::WriteWString", "url": "https://www.ultraengine.com/learn/Stream_WriteWString?lang=cpp"},
{"title": "AppDir", "text": "\n\nThis function returns the path of the folder the application executable is in. This will return the executables folder, even if the program is launched with a different working directory.\n\n\nWString AppDir()\n\n\nReturns the starting folder the application is launched in.\n\n\n", "tags": "AppDir", "url": "https://www.ultraengine.com/learn/AppDir?lang=cpp"},
{"title": "CasedPath", "text": "\n\nThis function returns a file path with capitalization fixed to match the existing file on the hard drive. It will also convert backslashes to forward slashes. The specified file must exist.\n\n\nWString CasedPath(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to correct\n\n\n\n\nReturns the file path with corrected capitalization.\n\n\n", "tags": "CasedPath", "url": "https://www.ultraengine.com/learn/CasedPath?lang=cpp"},
{"title": "ChangeDir", "text": "\n\nThis functions changes the current directory. Relative file paths will loaded from the new directory.\n\n\nbool ChangeDir(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfolder location to move to\n\n\n\n\nReturns true if the directory was successfully changed, otherwise false is returned.\n\n\n", "tags": "ChangeDir", "url": "https://www.ultraengine.com/learn/ChangeDir?lang=cpp"},
{"title": "CreateFile", "text": "\n\nThis function creates a new file on the users hard drive. The new file will initially be empty. If a file exists at this location it will be overwritten.\n\n\nbool CreateFile(const WString path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfull or relative path to the new file\n\n\n\n\n\n", "tags": "CreateFile", "url": "https://www.ultraengine.com/learn/CreateFile?lang=cpp"},
{"title": "CurrentDir", "text": "\n\nThis function returns the path of current folder.\n\n\nWString CurrentDir()\n\n\nReturns the current folder location.\n\n\n", "tags": "CurrentDir", "url": "https://www.ultraengine.com/learn/CurrentDir?lang=cpp"},
{"title": "DeleteDir", "text": "\n\nThis function deletes a folder in the file system.\n\n\nbool DeleteDir(const WString&amp; path, const bool recursive = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfolder location to delete\n\n\nrecursive\nif set to true, all files and subfolders will be deleted\n\n\n\n\nReturns true if the folder was successfully deleted.\n\nIf any files or subfolders exist within the specified folder, it will not be deleted unless the recursive option is set to true. Use this option with caution.\n\n\n", "tags": "DeleteDir", "url": "https://www.ultraengine.com/learn/DeleteDir?lang=cpp"},
{"title": "DeleteFile", "text": "\n\nThis function deletes a file in the file system.\n\n\nbool DeleteFile(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nlocation of file to delete\n\n\n\n\nReturns true if the file was successfully deleted.\n\nIt is not possible to restore deleted files. Use this feature with caution.\n\n\n", "tags": "DeleteFile", "url": "https://www.ultraengine.com/learn/DeleteFile?lang=cpp"},
{"title": "DownloadFile", "text": "\n\nThis function downloads a file from a web server and saves it to the users hard drive.\n\n\nbool DownloadFile(const WString&amp; src, const WString&amp; dest)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsrc\nURL of the file to download\n\n\ndest\nlocal file path to save to\n\n\n\n\nReturns true if the download succeeds, otherwise false is returned.\n\nDownloaded files are stored in a local cache. You do not need to implement an additional caching system.\n\n\n", "tags": "DownloadFile", "url": "https://www.ultraengine.com/learn/DownloadFile?lang=cpp"},
{"title": "ExtractDir", "text": "\n\nThis function returns the folder part of a file path.\n\n\nWString ExtractDir(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfull file path\n\n\n\n\nReturns the folder part of the specified path.\n\n\n", "tags": "ExtractDir", "url": "https://www.ultraengine.com/learn/ExtractDir?lang=cpp"},
{"title": "ExtractExt", "text": "\n\nThis function returns the extension part of a file path.\n\n\nWString ExtractExt(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfull file path\n\n\n\n\nReturns the extension part of the specified path.\n\n\n", "tags": "ExtractExt", "url": "https://www.ultraengine.com/learn/ExtractExt?lang=cpp"},
{"title": "FileHidden", "text": "\n\nThis function returns the hide state of the specified file path.\n\n\nbool FileHidden(const WString&amp; path)\n\n\nReturns true of the file exists and is hidden, otherwise false is returned.\n\n\n", "tags": "FileHidden", "url": "https://www.ultraengine.com/learn/FileHidden?lang=cpp"},
{"title": "FileTime", "text": "\n\nThis function returns the last time a file at the specified path was created or modified.\n\n\nuint64_t FileTime(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to read\n\n\n\n\nReturns the file time, in units of 100 nanosecond intervals that have elapsed since since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). If the file does not exist then zero is returned.\n\n\n", "tags": "FileTime", "url": "https://www.ultraengine.com/learn/FileTime?lang=cpp"},
{"title": "FileType", "text": "\n\nThis function detects the type of a specified file path.\n\n\nint FileType(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to read\n\n\n\n\nReturns 1 if the specified path is a file, 2 if it is a folder, or 0 if it does not exist.\n\n\n", "tags": "FileType", "url": "https://www.ultraengine.com/learn/FileType?lang=cpp"},
{"title": "GetPath", "text": "\n\nThis function returns a system path.\n\nWString GetPath(const UserPath path)\n\n\n\nParameter\nDescription\n\n\n\n\npath\nindicates which system path to retrieve, can be PATH_DESKTOP, PATH_DOCUMENTS, or PATH_PROGRAMDATA.\n\n\n\n\nReturns a string containing a file path.\n\n\n", "tags": "GetPath", "url": "https://www.ultraengine.com/learn/GetPath?lang=cpp"},
{"title": "HideFile", "text": "\n\nThis function makes the specified file or folder hidden in the file system.\n\n\nbool HideFile(const WString&amp; path)\n\n\nReturns true of the operation was successful or if the file was already hidden, otherwise false is returned.\n", "tags": "HideFile", "url": "https://www.ultraengine.com/learn/HideFile?lang=cpp"},
{"title": "LoadDir", "text": "\n\nThis function loads the contents of a directory and returns an array of files.\n\n\nvector&lt;WString&gt; LoadDir(const WString&amp; path)\n\n\nReturns an array of file names found within the directory. The array will be empty if the specified path contains no files, or if the folder contains no files.\n\n\n", "tags": "LoadDir", "url": "https://www.ultraengine.com/learn/LoadDir?lang=cpp"},
{"title": "OpenDir", "text": "\n\nThis function opens a folder in the default system file browser. If a file name is specified, the folder will be opened with that file selected.\n\n\nbool OpenDir(const WString&amp; path)\n\n\n\n\n\nName\nDescription\n\n\n\n\npath\nfolder or file path to show\n\n\n\n\nReturns true if the directory was opened successfully, otherwise false is returned.\n\n\n", "tags": "OpenDir", "url": "https://www.ultraengine.com/learn/OpenDir?lang=cpp"},
{"title": "OpenFile", "text": "\n\nThis function opens a file and returns a stream for read and write operations. If no file exists at the specified path, a new empty file will be created.\n\n\nshared_ptr&lt;Stream&gt; OpenFile(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to open\n\n\n\n\nReturns an open stream for read and write operations if the file was successfully created, otherwise NULL is returned.\n\n\n", "tags": "OpenFile", "url": "https://www.ultraengine.com/learn/OpenFile?lang=cpp"},
{"title": "ReadFile", "text": "\n\nThis function loads a file from a path and returns a stream.\n\n\nshared_ptr&lt;Stream&gt; ReadFile(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\n\nName\nDescriptio\n\n\n\n\npath\nfile name or URL to load\n\n\nflags\noptional load settings\n\n\n\n\nReturns a new Stream object If the file was successfully read, otherwise NULL is returned.\n\n\n", "tags": "ReadFile", "url": "https://www.ultraengine.com/learn/ReadFile?lang=cpp"},
{"title": "RealPath", "text": "\n\nThis function fixes a file path by adding the complete directory path and replacing backslashes with forward slashes. The file path does not have to specify an existing file.\n\n\nWString RealPath(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to correct\n\n\n\n\nReturns the corrected file path.\n\n\n", "tags": "RealPath", "url": "https://www.ultraengine.com/learn/RealPath?lang=cpp"},
{"title": "RenameFile", "text": "\n\nThis function changes the name of an existing file.\n\n\nbool RenameFile(const WString&amp; src, const WString&amp; dest)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsrc\nexisting file path\n\n\ndest\nnew file name\n\n\n\n\nReturns true if the file was successfully renamed, otherwise false is returned.\n\n", "tags": "RenameFile", "url": "https://www.ultraengine.com/learn/RenameFile?lang=cpp"},
{"title": "RunFile", "text": "\n\nExecutes a file with the default system file handler for this file type. This can be used to open an image, text file, or other known file type, or to open a URL in the default web browser.\n\n\nbool RunFile(const WString&amp; path)\n\n\n\n\n\nName\nDescription\n\n\n\n\npath\nfile path to execute\n\n\n\n\nReturns true if the file exists and was executed, otherwise false is returned.\n\n\n", "tags": "RunFile", "url": "https://www.ultraengine.com/learn/RunFile?lang=cpp"},
{"title": "ShowFile", "text": "\n\nThis function makes the specified file or folder visible in the file system.\n\n\nbool ShowFile(const WString&amp; path)\n\n\nReturns true of the operation was successful or if the file was already visible, otherwise false is returned.\n", "tags": "ShowFile", "url": "https://www.ultraengine.com/learn/ShowFile?lang=cpp"},
{"title": "StripAll", "text": "\n\nThis function removes the folder and file extension parts from a file path and returns the result.\n\n\nWString StripAll(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfull file path\n\n\n\n\nReturns the file path with the folder and extension removed.\n\n\n", "tags": "StripAll", "url": "https://www.ultraengine.com/learn/StripAll?lang=cpp"},
{"title": "StripDir", "text": "\n\nThis function removes the folder part from a file path and returns the result.\n\n\nWString StripDir(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfull file path\n\n\n\n\nReturns the file path with the folder removed.\n\n\n", "tags": "StripDir", "url": "https://www.ultraengine.com/learn/StripDir?lang=cpp"},
{"title": "StripExt", "text": "\n\nThis function removes the file extension part from a file path and returns the result.\n\n\nWString StripExt(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfull file path\n\n\n\n\nReturns the file path with the extension removed.\n\n\n", "tags": "StripExt", "url": "https://www.ultraengine.com/learn/StripExt?lang=cpp"},
{"title": "WriteFile", "text": "\n\nThis function creates a new file and returns a stream for write operations.\n\n\nshared_ptr&lt;Stream&gt; WriteFile(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to save\n\n\n\n\nReturns an open stream for write operations if the file was successfully created, otherwise NULL is returned.\n\n\n", "tags": "WriteFile", "url": "https://www.ultraengine.com/learn/WriteFile?lang=cpp"},
{"title": "GamePad", "text": "\n\nBase class: Object\nUltra Engine provides built-in support for XBox One and XBox 360 game controllers on Windows.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nButtonDown\nMethod\ngets the button press state\n\n\nButtonHit\nMethod\ngets the button hit state\n\n\nGetAxisPosition\nMethod\ngets the axis position\n\n\nGetConnected\nMethod\nreturns true as long as the game pad is connected\n\n\nFlush\nMethod\nresets the game pad button hit states\n\n\nRumble\nMethod\ncontrols haptic feedback\n\n\nGetGamePads\nFunction\ngets a list of connected game pads\n\n\n\n", "tags": "GamePad", "url": "https://www.ultraengine.com/learn/GamePad?lang=cpp"},
{"title": "GamePad::ButtonDown", "text": "\n\nThis method detects whether a gamepad button is currently pressed.\n\n\nbool ButtonDown(const GamePadButton button)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbutton\ngamepad button ID from the list below\n\n\n\n\nReturns true if the button is pressed or false if it is not.\n\nThe following button constants can be used:\n\nGAMEPADBUTTON_DPADUP\nGAMEPADBUTTON_DPADDOWN\nGAMEPADBUTTON_DPADLEFT\nGAMEPADBUTTON_DPADRIGHT\nGAMEPADBUTTON_START\nGAMEPADBUTTON_BACK\nGAMEPADBUTTON_LTHUMB\nGAMEPADBUTTON_RTHUMB\nGAMEPADBUTTON_LSHOULDER\nGAMEPADBUTTON_RSHOULDER\nGAMEPADBUTTON_X\nGAMEPADBUTTON_Y\nGAMEPADBUTTON_A\nGAMEPADBUTTON_B\n\n", "tags": "GamePad::ButtonDown", "url": "https://www.ultraengine.com/learn/GamePad_ButtonDown?lang=cpp"},
{"title": "GamePad::ButtonHit", "text": "\n\nThis method detects whether a gamepad button has been pressed since the last time it was checked.\n\n\nbool ButtonHit(const GamePadButton button)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbutton\ngamepad button ID from the list below\n\n\n\n\nReturns true if the button has been pressed or false if it has not.\n\nThe following button constants can be used:\n\nGAMEPADBUTTON_DPADUP\nGAMEPADBUTTON_DPADDOWN\nGAMEPADBUTTON_DPADLEFT\nGAMEPADBUTTON_DPADRIGHT\nGAMEPADBUTTON_START\nGAMEPADBUTTON_BACK\nGAMEPADBUTTON_LTHUMB\nGAMEPADBUTTON_RTHUMB\nGAMEPADBUTTON_LSHOULDER\nGAMEPADBUTTON_RSHOULDER\nGAMEPADBUTTON_X\nGAMEPADBUTTON_Y\nGAMEPADBUTTON_A\nGAMEPADBUTTON_B\n\n", "tags": "GamePad::ButtonHit", "url": "https://www.ultraengine.com/learn/GamePad_ButtonHit?lang=cpp"},
{"title": "GamePad::GetAxisPosition", "text": "\n\nThis method gets the current position of a thumbstick or trigger.\n\n\nVec2 GetAxisPosition(const GamePadAxis axis)\n\n\n\n\nParameter\nDescription\n\n\n\n\naxis\ngamepad axis, can be GAMEPADAXIS_RTRIGGER, GAMEPADAXIS_LTRIGGER, GAMEPADAXIS_RSTICK, or GAMEPADAXIS_LSTICK\n\n\n\n\nReturns the gamepad axis position.\n", "tags": "GamePad::GetAxisPosition", "url": "https://www.ultraengine.com/learn/GamePad_GetAxisPosition?lang=cpp"},
{"title": "GamePad::GetConnected", "text": "\n\nThis method can be used to check if one or more game controllers are connected.\n\n\nbool GetConnected()\n\n", "tags": "GamePad::GetConnected", "url": "https://www.ultraengine.com/learn/GamePad_GetConnected?lang=cpp"},
{"title": "GetGamePads", "text": "\n\nThis function retrieves a list of available game pads.\n\nvector&lt;shared_ptr&lt;GamePad&gt; &gt; GetGamePads()\n\nReturns the available game pads that are plugged in.\n", "tags": "GetGamePads", "url": "https://www.ultraengine.com/learn/GetGamePads?lang=cpp"},
{"title": "GamePad::Flush", "text": "\n\nThis function resets all button hit states for the controller.\n\n\nvoid Flush()\n\n", "tags": "GamePad::Flush", "url": "https://www.ultraengine.com/learn/GamePad_Flush?lang=cpp"},
{"title": "GamePad::Rumble", "text": "\n\nThis method controls gamepad haptic feedback.\n\n\nvoid Rumble(const float left, const float right)\n\n\n\n\nParameter\nDescription\n\n\n\n\nleft\nfrequency of left motor, between 0.0 and 1.0\n\n\nright\nfrequency of right motor, between 0.0 and 1.0\n\n\n\n", "tags": "GamePad::Rumble", "url": "https://www.ultraengine.com/learn/GamePad_Rumble?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Bone", "text": "\n\nBase class: Object\nA bone is an articulation in a Skeleton. Mesh vertices can be attached to bones for skinned animation. Although bones have a position and rotation in 3D space, bones are a more lightweight object than the Entity class.\nYou can attach an entity to a bone with the Entity::Attach method.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nGetPosition\nMethod\ngets the bone position\n\n\nGetRotation\nMethod\ngets the bone rotation\n\n\nGetScale\nMethod\ngets the bone uniform scale\n\n\nSetPosition\nMethod\nmanually sets the bone position\n\n\nSetRotation\nMethod\nmanually sets the bone rotation\n\n\nSetScale\nMethod\nmanually sets the bone uniform scale\n\n\nTurn\nMethod\nmanually turns the bone\n\n\n\n", "tags": "Bone", "url": "https://www.ultraengine.com/learn/Bone?lang=cpp"},
{"title": "Bone::GetPosition", "text": "\n\nThis method returns the position of a bone.\n\n\nVec3 GetPosition(const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nglobal\nif set to true position is relative to the skeleton, otherwise it is relative to the bones parent\n\n\n\n\nReturns the bones position.\n", "tags": "Bone::GetPosition", "url": "https://www.ultraengine.com/learn/Bone_GetPosition?lang=cpp"},
{"title": "Bone::GetRotation", "text": "\n\nThis method returns the position of a bone.\n\n\nVec3 GetRotation(const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nglobal\nif set to true rotation is relative to the skeleton, otherwise it is relative to the bones parent\n\n\n\n\nReturns the bones rotation.\n", "tags": "Bone::GetRotation", "url": "https://www.ultraengine.com/learn/Bone_GetRotation?lang=cpp"},
{"title": "Bone::GetScale", "text": "\n\nThis method returns the bone scale.\n\n\nfloat GetScale()\n\n\nReturns the uniform bone scale.\n", "tags": "Bone::GetScale", "url": "https://www.ultraengine.com/learn/Bone_GetScale?lang=cpp"},
{"title": "Bone::SetPosition", "text": "\n\nThis method can be used to manually rotate a bone. You can control skinned models enirely in code or apply your own movements on top of animation.\n\n\nvoid SetPosition(const float x, const float y, const float z, const bool global = false)\nvoid SetPosition(const Vec3&amp; position, const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nposition, (pitch, yaw, roll)\nposition to set\n\n\nglobal\nif set to true position is relative to the skeleton, otherwise it is relative to the bones parent\n\n\n\n\nTo combine programmatic movement with animation, this method should be called after World::Update and before World::Render.\n", "tags": "Bone::SetPosition", "url": "https://www.ultraengine.com/learn/Bone_SetPosition?lang=cpp"},
{"title": "Bone::SetRotation", "text": "\n\nThis method can be used to manually rotate a bone. You can control skinned models enirely in code or apply your own movements on top of animation.\n\n\nvoid SetRotation(const float pitch, const float yaw, const float roll, const bool global = false)\nvoid SetRotation(const Vec3&amp; rotation, const bool global = false)\nvoid SetRotation(const Quat&amp; rotation, const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrotation, (pitch, yaw, roll)\nrotation to set\n\n\nglobal\nif set to true rotation is relative to the skeleton, otherwise it is relative to the bones parent\n\n\n\n\nTo combine programmatic movement with animation, this method should be called after World::Update and before World::Render.\n\nThis example will load and display an animated model, but we will add code to turn the characters head back and forth as they walk.\n\n\n", "tags": "Bone::SetRotation", "url": "https://www.ultraengine.com/learn/Bone_SetRotation?lang=cpp"},
{"title": "Bone::SetScale", "text": "\n\nThis method can be used to manually scale a bone. You can control skinned models enirely in code or apply your own movements on top of animation.\n\n\nvoid SetScale(const float scale)\n\n\n\n\nParameter\nDescription\n\n\n\n\nscale\nuniform scale to set\n\n\n\n\nTo combine programmatic movement with animation, this method should be called after World::Update and before World::Render.\n\nThis example will load and display an animated model, but we will add code to give the character a supersized noggin.\n\n\n", "tags": "Bone::SetScale", "url": "https://www.ultraengine.com/learn/Bone_SetScale?lang=cpp"},
{"title": "Bone::Turn", "text": "\n\nThis method smoothly adds rotation to the current rotation.\n\n\nvoid Turn(const float pitch, const float yaw, const float roll)\nvoid Turn(const Vec3&amp; rotation)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrotation, (pitch, yaw, roll)\nrotation to apply\n\n\nglobal\nif set to true rotation is relative to the skeleton, otherwise it is relative to the bones parent\n\n\n\n\nTo combine programmatic movement with animation, this method should be called after World::Update and before World::Render.\n\nThis example will load and display an animated model, but we will add code to turn the characters head back and forth as they walk.\n\n\n", "tags": "Bone::Turn", "url": "https://www.ultraengine.com/learn/Bone_Turn?lang=cpp"},
{"title": "Face", "text": "\n\nBase class: Object\nThis class describes a flat surface of a Brush entity.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nplane\nconst Plane&amp;\nread-only face plane\n\n\nAddIndice\nMethod\nadds an indice to the face\n\n\nGetMaterial\nMethod\nreturns the face material\n\n\nGetTextureMappingPlane\nMethod\nreturns the face texture mapping planes\n\n\nGetTextureMappingRotation\nMethod\nreturns the face texture mapping rotation\n\n\nGetTextureMappingScale\nMethod\nreturns the face texture mapping scale\n\n\nGetTextureMappingTranslation\nMethod\nreturns the face texture mapping translation\n\n\nSetMaterial\nMethod\napplies a material to the face\n\n\nSetTextureMappingPlane\nMethod\noverrides the automatic face texture mapping planes\n\n\nSetTextureMappingRotation\nMethod\nsets the face texture mapping rotation\n\n\nSetTextureMappingScale\nMethod\nsets the face texture mapping scale\n\n\nSetTextureMappingTranslation\nMethod\nsets the face texture mapping translation\n\n\n\n", "tags": "Face", "url": "https://www.ultraengine.com/learn/Face?lang=cpp"},
{"title": "Face::AddIndice", "text": "\n\nThis method adds a new indice to a face.\n\n\nint AddIndice(const int v)\n\n\n\n\nParameter\nDescription\n\n\n\n\nv\nthe brush vertex index to add\n\n\n\n\nReturns the index of the new indice.\n\nThis example creates a box brush from scratch.\n\n", "tags": "Face::AddIndice", "url": "https://www.ultraengine.com/learn/Face_AddIndice?lang=cpp"},
{"title": "Face::GetMaterial", "text": "\n\nThis method returns the material for this face.\n\n\nshared_ptr&lt;Face&gt; GetMaterial()\n\n\nReturns the face material, or NULL if no material is in use.\n", "tags": "Face::GetMaterial", "url": "https://www.ultraengine.com/learn/Face_GetMaterial?lang=cpp"},
{"title": "Face::GetTextureMappingPlane", "text": "\n\nThis method returns the texture mapping plane for this face.\n\n\nPlane GetTextureMappingPlane(const int axis)\n\n\n\n\nParameter\nDescription\n\n\n\n\naxis\n0 for horizontal, 1 for vertical texture mapping plane\n\n\n\n\nReturns the face texture mapping plane.\n", "tags": "Face::GetTextureMappingPlane", "url": "https://www.ultraengine.com/learn/Face_GetTextureMappingPlane?lang=cpp"},
{"title": "Face::GetTextureMappingRotation", "text": "\n\nThis method returns the texture mapping rotation for this face.\n\n\nfloat GetTextureMappingRotation()\n\n\nReturns the face texture mapping rotation in degrees.\n", "tags": "Face::GetTextureMappingRotation", "url": "https://www.ultraengine.com/learn/Face_GetTextureMappingRotation?lang=cpp"},
{"title": "Face::GetTextureMappingScale", "text": "\n\nThis method returns the texture mapping scale for this face.\n\n\nVec2 GetTextureMappingScale()\n\n\nReturns the face texture mapping scale.\n", "tags": "Face::GetTextureMappingScale", "url": "https://www.ultraengine.com/learn/Face_GetTextureMappingScale?lang=cpp"},
{"title": "Face::GetTextureMappingTranslation", "text": "\n\nThis method returns the texture mapping translation for this face.\n\n\nVec2 GetTextureMappingPlane()\n\n\nReturns the face texture mapping translation.\n", "tags": "Face::GetTextureMappingTranslation", "url": "https://www.ultraengine.com/learn/Face_GetTextureMappingTranslation?lang=cpp"},
{"title": "Face::SetMaterial", "text": "\n\nThis method applies a material to a face.\n\n\nvoid SetMaterial(shared_ptr&lt;Material/&gt; material)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmaterial\nmaterial to assign\n\n\n\n\nYou must call Brush::Build before the material will appear on the visible mesh.\n", "tags": "Face::SetMaterial", "url": "https://www.ultraengine.com/learn/Face_SetMaterial?lang=cpp"},
{"title": "Face::SetTextureMappingPlane", "text": "\n\nTHis method manually sets the face texture mapping planes, overriding the default brush texture mapping routine.\n\n\nvoid SetFaceTextureMappingPlane(const Plane&amp; plane, const int axis)\n\n\n\n\nParameter\nDescription\n\n\n\n\nplane\ntexture mapping plane to set\n\n\naxis\n0 for horizontal, 1 for vertical\n\n\n\n", "tags": "Face::SetTextureMappingPlane", "url": "https://www.ultraengine.com/learn/Face_SetTextureMappingPlane?lang=cpp"},
{"title": "Face::SetTextureMappingRotation", "text": "\n\nTHis method manually sets the face texture mapping planes, overriding the default brush texture mapping routine.\n\n\nvoid SetTextureMappingRotation(const float angle)\n\n\n\n\nParameter\nDescription\n\n\n\n\nangle\ntexture mapping rotation, in degrees\n\n\n\n", "tags": "Face::SetTextureMappingRotation", "url": "https://www.ultraengine.com/learn/Face_SetTextureMappingRotation?lang=cpp"},
{"title": "Face::SetTextureMappingScale", "text": "\n\nTHis method manually sets the face texture mapping planes, overriding the default brush texture mapping routine.\n\n\nvoid SetTextureMappingScale(const float x, const float y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nhorizontal texture scale\n\n\ny\nvertical texture scale\n\n\n\n", "tags": "Face::SetTextureMappingScale", "url": "https://www.ultraengine.com/learn/Face_SetTextureMappingScale?lang=cpp"},
{"title": "Face::SetTextureMappingTranslation", "text": "\n\nTHis method manually sets the face texture mapping planes, overriding the default brush texture mapping routine.\n\n\nvoid SetTextureMappingTranslation(const float x, const float y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nhorizontal texture offset\n\n\ny\nvertical texture offset\n\n\n\n", "tags": "Face::SetTextureMappingTranslation", "url": "https://www.ultraengine.com/learn/Face_SetTextureMappingTranslation?lang=cpp"},
{"title": "Font", "text": "\n\nBase class: Asset\nThis class provides an interface for loading and rasterizing fonts for text drawing. Once a font is loaded, a Sprite can be created to display text on the screen.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nGetTextWidth\nMethod\nreturns the width in pixels of the specified text when rendered with this font.\n\n\nGetHeight\nMethod\nreturns the height in pixels of a line of text with this font\n\n\nLoadFont\nFunction\nloads a font from a True-type font (TTF) file.\n\n\n\n", "tags": "Font", "url": "https://www.ultraengine.com/learn/Font?lang=cpp"},
{"title": "Font::GetHeight", "text": "\n\nThis method returns the fonts line height.\n\n\nint GetHeight(const int size, )\n\n\n\n\nParameter\nDescription\n\n\n\n\nsize\nfont size\n\n\n\n\nReturns the fonts line height. For most fonts, this will be the distance between the base of a capital letter and its maximum height, known as the font ascent.\n\n\n", "tags": "Font::GetHeight", "url": "https://www.ultraengine.com/learn/Font_GetHeight?lang=cpp"},
{"title": "Font::GetTextWidth", "text": "\n\nThis method returns the width of a line of text rendered with the font with the specified settings.\n\n\nint GetTextWidth(const WString&amp; text, const int size, )\n\n\n\n\nParameter\nDescription\n\n\n\n\ntext\nstring to determine the width of\n\n\nsize\nfont size\n\n\n\n\nReturns the width the text will be when rendered.\n\n\n", "tags": "Font::GetTextWidth", "url": "https://www.ultraengine.com/learn/Font_GetTextWidth?lang=cpp"},
{"title": "LoadFont", "text": "\n\nThis function loads a font from a file path or stream.\n\n\nshared_ptr&lt;Font&gt; LoadFont(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\nshared_ptr&lt;Font&gt; LoadFont(shared_ptr&lt;Stream&gt; stream, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to load\n\n\nstream\nstream to read from\n\n\nflags\nloading options, can be LOAD_DEFAULT or LOAD_NO_CACHE\n\n\n\n\nReturns the loaded font, or NULL of the font could not be loaded.\n\n\n", "tags": "LoadFont", "url": "https://www.ultraengine.com/learn/LoadFont?lang=cpp"},
{"title": "Framebuffer", "text": "\n\nThis class provides an interface for displaying Vulkan graphics on the screen.\nBase class: Object\n\n\n\nProperty\nType\nDescription\n\n\n\n\nsize\nconst iVec2&amp;\nread-only dimensions\n\n\nwindow\nconst shared_ptr&lt;Window&gt;&amp;\nread-only window object\n\n\nCreateFramebuffer\nFunction\ncreates a new framebuffer object\n\n\n\n", "tags": "Framebuffer", "url": "https://www.ultraengine.com/learn/Framebuffer?lang=cpp"},
{"title": "CreateFramebuffer", "text": "\n\nThis function creates a new framebuffer object for 2D and 3D rendering.\n\n\nshared_ptr&lt;Framebuffer&gt; CreateFramebuffer(shared_ptr&lt;Window&gt; window)\n\n\n\n\nParameter\nDescription\n\n\n\n\nwindow\nwindow to create the framebuffer on\n\n\n\n\nReturns a new framebuffer object if one is successfully created, otherwise NULL is returned.\n\nA framebuffer cannot be created on a window that uses the WINDOW_RESIZABLE window style, unless the multi-threaded renderer is disabled by calling ASyncRender prior to engine initialization.\n\n\n", "tags": "CreateFramebuffer", "url": "https://www.ultraengine.com/learn/CreateFramebuffer?lang=cpp"},
{"title": "Lod", "text": "\n\nThia class stores mesh data for one level of detail in a Model.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nmeshes\nconst std::vector&lt; shared_ptr&lt;Mesh&gt; &gt;&amp;\narray of meshes in this level of detail\n\n\n\n", "tags": "Lod", "url": "https://www.ultraengine.com/learn/Lod?lang=cpp"},
{"title": "Material", "text": "\n\nBase class: Asset\nThis class is used to control the appearance of rendered surfaces.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ntextures\nconst vector&lt;shared_ptr&lt;Texture&gt; &gt;&amp;\nread-only list of material textures\n\n\ncolor\nconst Vec4&amp;\nread-only material color\n\n\nGetColor\nMethod\ngets the material color\n\n\nGetMetalness\nMethod\ngets the material metalness\n\n\nGetRoughness\nMethod\ngets the material rougness\n\n\nGetShaderFamily\nMethod\ngets the material shader family\n\n\nGetTexture\nMethod\ngets a material texture\n\n\nGetTransparent\nMethod\ngets the material transparency mode\n\n\nSetColor\nMethod\nsets the material color\n\n\nSetDisplacement\nMethod\ncontrols the maximum vertex displacement\n\n\nSetMetalness\nMethod\nsets the material metalness\n\n\nSetRoughness\nMethod\nsets the material rougness\n\n\nSetShaderFamily\nMethod\nsets the material shader family\n\n\nSetTessellation\nMethod\ncontrols material tessellation\n\n\nSetTexture\nMethod\nsets a material texture\n\n\nSetTransparent\nMethod\nsets the material transparency mode\n\n\nCreateMaterial\nFunction\ncreates a new material\n\n\nLoadMaterial\nFunction\nloads a material from a file\n\n\n\n", "tags": "Material", "url": "https://www.ultraengine.com/learn/Material?lang=cpp"},
{"title": "CreateMaterial", "text": "\n\nThis function creates a new material.\n\n\nshared_ptr&lt;Material&gt; CreateMaterial()\n\n\nReturns a new material object.\n", "tags": "CreateMaterial", "url": "https://www.ultraengine.com/learn/CreateMaterial?lang=cpp"},
{"title": "Material::GetColor", "text": "\n\nThis method retrieves the material color.\n\n\nVec4 GetColor()\n\n\nReturns the material color.\n", "tags": "Material::GetColor", "url": "https://www.ultraengine.com/learn/Material_GetColor?lang=cpp"},
{"title": "Material::GetMetalness", "text": "\n\nThis method returns the metallic property of the material.\n\n\nfloat GetMetalness()\n\n\nReturns the material metalness.\n", "tags": "Material::GetMetalness", "url": "https://www.ultraengine.com/learn/Material_GetMetalness?lang=cpp"},
{"title": "Material::GetRoughness", "text": "\n\nThis method returns the roughness property of the material.\n\n\nfloat GetRoughness()\n\n\nReturns the material roughness.\n", "tags": "Material::GetRoughness", "url": "https://www.ultraengine.com/learn/Material_GetRoughness?lang=cpp"},
{"title": "Material::GetShaderFamily", "text": "\n\nThis method retrieves the material shader family.\n\n\nshared_ptr&lt;ShaderFamily&gt; GetShaderFamily()\n\n\nReturns the material shader family.\n", "tags": "Material::GetShaderFamily", "url": "https://www.ultraengine.com/learn/Material_GetShaderFamily?lang=cpp"},
{"title": "Material::GetTexture", "text": "\n\nThis method retrieves a texture from the material.\n\n\nshared_ptr&lt;Material&gt; GetTexture(const int index = TEXTURE_BASE)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\ntexture slot from 0 to 15\n\n\n\n\nReturns the material texture if it exists, otherwise NULL is returned.\n", "tags": "Material::GetTexture", "url": "https://www.ultraengine.com/learn/Material_GetTexture?lang=cpp"},
{"title": "Material::GetTransparent", "text": "\n\nThis method retrieves the material transparency mode.\n\n\nbool GetTransparent()\n\n\nReturns true of the material is using transparency, otherwise false is returned.\n", "tags": "Material::GetTransparent", "url": "https://www.ultraengine.com/learn/Material_GetTransparent?lang=cpp"},
{"title": "LoadMaterial", "text": "\n\nThis function loads a material from a file.\n\n\nshared_ptr&lt;Material&gt; LoadMaterial(const WString path, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to read from\n\n\nflags\noptional load flags\n\n\n\n\nReturns a material object if the file is loaded successfully, otherwise NULL is returned.\n", "tags": "LoadMaterial", "url": "https://www.ultraengine.com/learn/LoadMaterial?lang=cpp"},
{"title": "Material::SetColor", "text": "\n\nThis method sets the material color.\n\n\nvoid SetColor(const Vec4&amp; color)\nvoid SetColor(const float r, const float g, const float b, const float a = 1)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncolor, (r, g, b, a)\ncolor to set\n\n\n\n", "tags": "Material::SetColor", "url": "https://www.ultraengine.com/learn/Material_SetColor?lang=cpp"},
{"title": "Material::SetDisplacement", "text": "\n\nThis method sets the maximum vertex displacement distance.\n\n\nvoid SetDisplacement(const float distance)\n\n\n\n\nParameter\nDescription\n\n\n\n\ndistance\nmaximum displacement, in meters\n\n\n\n\n\n\n", "tags": "Material::SetDisplacement", "url": "https://www.ultraengine.com/learn/Material_SetDisplacement?lang=cpp"},
{"title": "Material::SetMetalness", "text": "\n\nThis method sets the metallic property of a material.\n\n\nvoid SetMetalness(const float metallic)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmetallic\nmetalness value between 0 and 1\n\n\n\n\nMetallic materials use reflections for their color. Therefore you should call World::SetEnvironmentMap and assign specular and diffuse reflection maps when using metallic materials. If the reflection environment maps are not provided then metallic materials will appear very dark.\n\n\n\n", "tags": "Material::SetMetalness", "url": "https://www.ultraengine.com/learn/Material_SetMetalness?lang=cpp"},
{"title": "Material::SetRoughness", "text": "\n\nThis method sets the roughness of a material. A material with low roughness will appear more reflective than a rough surface.\n\n\nvoid SetRoughness(const float roughness)\n\n\n\n\nParameter\nDescription\n\n\n\n\nroughness\nsurface roughness between 0 and 1\n\n\n\n\n\n\n", "tags": "Material::SetRoughness", "url": "https://www.ultraengine.com/learn/Material_SetRoughness?lang=cpp"},
{"title": "Material::SetShaderFamily", "text": "\n\nThis methods sets the shader family of the material.\n\n\nvoid SetShaderFamily(shared_ptr&lt;ShaderFamily&gt; shaderfamily)\n\n\n\n\nParameter\nDescription\n\n\n\n\nshaderfamily\nshader family to set\n\n\n\n", "tags": "Material::SetShaderFamily", "url": "https://www.ultraengine.com/learn/Material_SetShaderFamily?lang=cpp"},
{"title": "Material::SetTessellation", "text": "\n\nThis method controls whether a material will use hardware tessellation.\n\n\nvoid SetTessellation(const bool mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\nset to true to enable tessellation\n\n\n\n\nTessellation will only be used if the camera has it enabled with Camera::SetTessellation.\n\n\n", "tags": "Material::SetTessellation", "url": "https://www.ultraengine.com/learn/Material_SetTessellation?lang=cpp"},
{"title": "Material::SetTexture", "text": "\n\nThis method assigns a texture to a material.\n\n\nvoid SetTexture(shared_ptr&lt;Texture&gt; texture, const int index = TEXTURE_BASE)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntexture\ntexture to set\n\n\nindex\ncan be TEXTURE_BASE, TEXTURE_NORMAL, TEXTURE_METALLICROUGHNESS, TEXTURE_EMISSION, TEXTURE_DISPLACEMENT, or any number from 0 to 15\n\n\n\n", "tags": "Material::SetTexture", "url": "https://www.ultraengine.com/learn/Material_SetTexture?lang=cpp"},
{"title": "Material::SetTransparent", "text": "\n\nThis method sets the transparency mode of the material.\n\n\nvoid SetTransparent(const bool mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\ntrue for transparent materials, false for opaque\n\n\n\n\n\n\n", "tags": "Material::SetTransparent", "url": "https://www.ultraengine.com/learn/Material_SetTransparent?lang=cpp"},
{"title": "Mesh", "text": "\n\nBase class: Object\nThe mesh class is a collection of vertices and polygons that form visible surfaces.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nbounds\nconst Aabb&amp;\nread-only mesh bounding box\n\n\nindices\nconst vector&lt;uint32_t&gt;&amp;\nread-only array of primitive indices\n\n\nmaterial\nconst shared_ptr&lt;Material&gt;&amp;\nread-only material object\n\n\nprimitives\nconst vector&lt;Primitive&gt;&amp;\nread-only array of mesh primitives\n\n\ntype\nconst MeshPrimitives&amp;\nread-only mesh primitive type\n\n\nvertices\nconst vector&lt;Vertex&gt;&amp;\nread-only array of mesh vertices\n\n\nAddPrimitive\nMethod\nadds a new polygon to the mesh\n\n\nAddVertex\nMethod\nadds a new vertex to the mesh\n\n\nCopy\nMethod\nmakes a copy of the mesh\n\n\nCountPrimitives\nMethod\nreturns the number of mesh primitives\n\n\nCountVertices\nMethod\nreturns the number of mesh vertices\n\n\nGetPrimitiveAttributes\nMethod\ngets attributes of a single primitive\n\n\nGetVertexPosition\nMethod\ngets the position of s vertex\n\n\nGetVertexNormal\nMethod\ngets the normal of a vertex\n\n\nGetVertexTexCoords\nMethod\ngets the texture coordinates of a vertex\n\n\nModify\nMethod\nbatch modify vertices and indices\n\n\nRecenter\nMethod\nrecenters a mesh along one or more axes\n\n\nRotate\nMethod\nrotates a mesh\n\n\nScale\nMethod\nscales a mesh\n\n\nSetSkinned\nMethod\nenables or disables vertex skinning\n\n\nSetMaterial\nMethod\nsets the mesh material\n\n\nSetPrimitiveAttributes\nMethod\nsets attributes of a single primitive\n\n\nSetSkinned\nMethod\nenables or disables mesh skinning\n\n\nSetVertexPosition\nMethod\nsets the position of a vertex\n\n\nSetVertexNormal\nMethod\nsets the normal of a vertex\n\n\nSetVertexTexCoords\nMethod\nsets the texture coordinates of one vertex\n\n\nTransform\nMethod\ntransforms a mesh\n\n\nTranslate\nMethod\ntranslates a mesh\n\n\nUpdateBounds\nMethod\nupdates the mesh bounding box\n\n\nUpdateNormals\nMethod\ncalculates new mesh normals\n\n\nUpdateTangents\nMethod\nupdates the mesh tangents\n\n\nCreateMesh\nFunction\ncreates a new mesh object\n\n\n\n", "tags": "Mesh", "url": "https://www.ultraengine.com/learn/Mesh?lang=cpp"},
{"title": "Mesh::AddPrimitive", "text": "\n\nThis method add a single line, triangle, or quad to the mesh.\n\n\nint AddPrimitive(const uint32_t a, const uint32_t b)\nint AddPrimitive(const uint32_t a, const uint32_t b, const uint32_t c)\nint AddPrimitive(const uint32_t a, const uint32_t b, const uint32_t c, const uint32_t d)\n\n\n\n\nParameter\nDescription\n\n\n\n\na, b, c, d\nvertex indices\n\n\n\n\nReturns the index of the new primitive.\n\nTHe number of arguments must match the mesh primitive type.\n", "tags": "Mesh::AddPrimitive", "url": "https://www.ultraengine.com/learn/Mesh_AddPrimitive?lang=cpp"},
{"title": "Mesh::AddVertex", "text": "\n\nThis methods adds a new vertex to the mesh.\n\n\nuint32_t AddVertex(const Vec3&amp; position, const Vec3&amp; normal = 0, const Vec2&amp; texcoords = 0, const float displacement = 1)\nuint32_t AddVertex(const float x, const float y, const float z, const float nx = 0, const float ny = 0, const float nz = 0, const float u0 = 0, const float v0 = 0, const float displacement = 1)\n\n\n\n\nParameter\nDescription\n\n\n\n\nposition, (x, y, z)\nvertex position\n\n\nnormal, (nx, ny, nz)\nvertex normal\n\n\ntexcoords, (u, v)\nvertex texture coordinates\n\n\ndisplacement\nmaximum tessellation displacement value\n\n\n\n\nReturns the index of the new vertex.\n\nOnce a mesh has been submitted to the rendering thread, additional vertices cannot be added to it. This occurs during the first call to World::Render after the mesh is created.\n", "tags": "Mesh::AddVertex", "url": "https://www.ultraengine.com/learn/Mesh_AddVertex?lang=cpp"},
{"title": "Mesh::Copy", "text": "\n\nThis method creates a new mesh that is a duplicate of this one.\n\n\nshared_ptr&lt;Mesh&gt; Copy()\n\n\nReturns a new mesh.\n", "tags": "Mesh::Copy", "url": "https://www.ultraengine.com/learn/Mesh_Copy?lang=cpp"},
{"title": "Mesh::CountPrimitives", "text": "\n\nThis method retrieves the number of mesh primitives.\n\n\nuint32_t CountPrimitives()\n\n\nReturns the number of primitives the mesh contains.\n", "tags": "Mesh::CountPrimitives", "url": "https://www.ultraengine.com/learn/Mesh_CountPrimitives?lang=cpp"},
{"title": "Mesh::CountVertices", "text": "\n\nThis method returns the number of vertices in the mesh.\n\n\nuint32_t CountVertices()\n\n\nReturns the number of mesh vertices.\n", "tags": "Mesh::CountVertices", "url": "https://www.ultraengine.com/learn/Mesh_CountVertices?lang=cpp"},
{"title": "CreateMesh", "text": "\n\nThis function creates a new mesh.\n\n\nshared_ptr&lt;Mesh&gt; CreateMesh(const MeshPrimitives primitive = MESH_TRIANGLES, const std::vector&lt;Vertex&gt;&amp; vertices = {}, const std::vector&lt;uint32_t&gt;&amp; indices = {})\n\n\n\n\nParameter\nDescription\n\n\n\n\nprimitive\ncan be MESH_LINES, MESH_TRIANGLES, or MESH_QUADS\n\n\nvertices\noptional vertex array\n\n\nindices\noptional indice array\n\n\n\n\nReturns a new mesh if successful.\nIf the indices array size is not evenly divisible by the number of indices per primitive then NULL is returned.\nIf the indices array contains invalid vertex indices then NULL is returned.\n", "tags": "CreateMesh", "url": "https://www.ultraengine.com/learn/CreateMesh?lang=cpp"},
{"title": "Mesh::GetVertexPosition", "text": "\n\nThis method gets the position of the specified vertex.\n\n\nVec3 GetVertexPosition(const uint32_t index)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\nvertex index\n\n\n\n\nReturns the vertex position.\n", "tags": "Mesh::GetVertexPosition", "url": "https://www.ultraengine.com/learn/Mesh_GetVertexPosition?lang=cpp"},
{"title": "Mesh::GetVertexNormal", "text": "\n\nThis method gets the normal of the specified vertex.\n\n\nVec3 GetVertexNormal(const uint32_t index)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\nvertex index\n\n\n\n\nReturns the vertex normal.\n", "tags": "Mesh::GetVertexNormal", "url": "https://www.ultraengine.com/learn/Mesh_GetVertexNormal?lang=cpp"},
{"title": "Mesh::GetVertexTexCoords", "text": "\n\nThis method gets the texture coordinates of the specified vertex.\n\n\nVec2 GetVertexTexCoords(const uint32_t index, const int texcoordset = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\nvertex index\n\n\ntexcoordset\ntexture coordinate set to return, can be 0 or 1\n\n\n\n\nReturns the vertex texture coordinates.\n", "tags": "Mesh::GetVertexTexCoords", "url": "https://www.ultraengine.com/learn/Mesh_GetVertexTexCoords?lang=cpp"},
{"title": "Mesh::Modify", "text": "\n\nThis method performs a batch modification of mesh data.\n\n\nvoid Modify(const vector&lt;Vertex&gt;&amp; vertices)\nvoid Modify(const vector&lt;uint32_t&gt;&amp; indices)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvertices\nvertex array to set\n\n\nindices\nindice array to set\n\n\n\n\nThe size of the vertex or indice array must be less than or equal to the number of mesh vertices or indices.\nIf the indice array size is less than the number of mesh indices, the remaining indices will be set to 0.\n", "tags": "Mesh::Modify", "url": "https://www.ultraengine.com/learn/Mesh_Modify?lang=cpp"},
{"title": "Mesh::Recenter", "text": "\n\nThis method centers a mesh along one or more axes.\n\n\nvoid Recenter(const bool x = true, const bool y = true, const bool z = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx, y, z\nif set to true the mesh will be recentered along this axis\n\n\n\n", "tags": "Mesh::Recenter", "url": "https://www.ultraengine.com/learn/Mesh_Recenter?lang=cpp"},
{"title": "Mesh::Rotate", "text": "\n\nThis method rotates all vertex positions by the specified rotation.\n\n\nvoid Rotate(const float pitch, const float yaw, const float roll)\nvoid Rotate(const Vec3 rotation)\nvoid Rotate(const Quat rotation)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrotation, (pitch, yaw, roll)\nrotation of mesh vertices\n\n\n\n", "tags": "Mesh::Rotate", "url": "https://www.ultraengine.com/learn/Mesh_Rotate?lang=cpp"},
{"title": "Mesh::Scale", "text": "\n\nThis method scales all vertex positions by the specified value.\n\n\nvoid Scale(const Vec3 offset)\nvoid Scale(const float x, const float y, const float z)\n\n\n\n\nParameter\nDescription\n\n\n\n\nscale, (x, y, z)\nmesh vertex scale\n\n\n\n", "tags": "Mesh::Scale", "url": "https://www.ultraengine.com/learn/Mesh_Scale?lang=cpp"},
{"title": "Mesh::SetMaterial", "text": "\n\nThis method sets the mesh material.\n\n\nvoid SetMaterial(shared_ptr&lt;Material&gt; material)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmaterial\nmesh material to set, or NULL for no material\n\n\n\n", "tags": "Mesh::SetMaterial", "url": "https://www.ultraengine.com/learn/Mesh_SetMaterial?lang=cpp"},
{"title": "Mesh::SetSkinned", "text": "\n\nThis method enables or disables vertex weighting.\n\n\nSetSkinned(mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\nif set to true vertex weighting will be enabled\n\n\n\n\nMesh skinning can be disabled in order to use bone indice and weight properties to store other information for a custom shader. For example, bone weights could be used to store vertex colors.\n", "tags": "Mesh::SetSkinned", "url": "https://www.ultraengine.com/learn/Mesh_SetSkinned?lang=cpp"},
{"title": "Mesh::SetVertexPosition", "text": "\n\nThis method sets the position of a single vertex in the mesh.\n\n\nvoid SetVertexPosition(const uint32_t index, const Vec3 position)\nvoid SetVertexPosition(const uint32_t index, const float x, const float y, const float z)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\nvertex index, starting with zero\n\n\nposition, (x, y, z)\nvertex position to set\n\n\n\n", "tags": "Mesh::SetVertexPosition", "url": "https://www.ultraengine.com/learn/Mesh_SetVertexPosition?lang=cpp"},
{"title": "Mesh::SetVertexNormal", "text": "\n\nThis method sets the normal of a single vertex in the mesh.\n\n\nvoid SetVertexNormal(const int index, const Vec3 normal)\nvoid SetVertexNormal(const int index, const float x, const float y, const float z)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\nvertex index, starting at zero\n\n\nnormal, (x, y, z)\nvertex normal to set\n\n\n\n", "tags": "Mesh::SetVertexNormal", "url": "https://www.ultraengine.com/learn/Mesh_SetVertexNormal?lang=cpp"},
{"title": "Mesh::SetVertexTexCoords", "text": "\n\nThis method sets the texture coordinates of a single vertex in the mesh.\n\n\nvoid SetVertexTexCoords(const uint32_t index, const float u, const float v, const int texcoordset = 0)\nvoid SetVertexTexCoords(const uint32_t index, const Vec2 texcoords, const int texcoordset = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\nvertex index, starting with zero\n\n\ntexcoords, (u, v)\nvertex texture coordinates to set\n\n\ntexcoordset\ntexture coordinate set, can be 0 or 1\n\n\n\n", "tags": "Mesh::SetVertexTexCoords", "url": "https://www.ultraengine.com/learn/Mesh_SetVertexTexCoords?lang=cpp"},
{"title": "Mesh::Transform", "text": "\n\nThis method multiplies all vertex positions, normals, and tangents by the specified matrix.\n\n\nvoid Transform(const Mat4 matrix)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmatrix\nmesh transform matrix\n\n\n\n", "tags": "Mesh::Transform", "url": "https://www.ultraengine.com/learn/Mesh_Transform?lang=cpp"},
{"title": "Mesh::Translate", "text": "\n\nThis method translates all vertex positions by the specified offset.\n\n\nvoid Translate(const float x, const float y, const float z)\nvoid Translate(const Vec3 offset)\n\n\n\n\nParameter\nDescription\n\n\n\n\noffset, (x, y, z)\noffset to translate mesh vertices by\n\n\n\n", "tags": "Mesh::Translate", "url": "https://www.ultraengine.com/learn/Mesh_Translate?lang=cpp"},
{"title": "Mesh::UpdateBounds", "text": "\n\nThis method updates the bounding box of the mesh.\n\n\nvoid UpdateBounds()\n\n", "tags": "Mesh::UpdateBounds", "url": "https://www.ultraengine.com/learn/Mesh_UpdateBounds?lang=cpp"},
{"title": "Mesh::UpdateTangents", "text": "\n\nThis method updates the mesh tangents, for normal mapping.\n\n\nvoid UpdateTangents()\n\n", "tags": "Mesh::UpdateTangents", "url": "https://www.ultraengine.com/learn/Mesh_UpdateTangents?lang=cpp"},
{"title": "PostEffect", "text": "\n\nBase class: Asset\nThis class handles fullscreen post-porcessing shader effects.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nLoadPostEffect\nFunction\nloads a post-processing effect from a JSON file\n\n\n\n\nA post effect file specifies one or more shader passes. For each subpass, a texture buffer is allocated automatically and the results of one subpass are used as the input image for the next one.\n\nYou can specify sized texture buffers and render to those instead of to a texture buffer of the same size. This is useful for effects that involve downsampling an image. The texture buffer dimensions are specified as a fraction of the current framebuffer size. The target value specifies which texture buffer to render to at each step. Screen-space ambient occlusion is a relatively expensive procedure, so this post effect renders the effect into a half-size buffer, then renders a second pass at full resolution with a denoiser filter to clean up the final image:\n\n", "tags": "PostEffect", "url": "https://www.ultraengine.com/learn/PostEffect?lang=cpp"},
{"title": "LoadPostEffect", "text": "\n\nThis function loads a post-processing effect from a JSON file.\n\n\nshared_ptr&lt;PostEffect&gt; LoadPostEffect(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile name to load\n\n\nflags\noptional load flags\n\n\n\n\nReturns the loaded post-processing effect is successful, otherwise NULL is returned.\n", "tags": "LoadPostEffect", "url": "https://www.ultraengine.com/learn/LoadPostEffect?lang=cpp"},
{"title": "ShaderFamily", "text": "\n\nBase class: Asset\nThis class defines the shader modules that should be used for a material, under different circumstances and settings.\n\n\n\nProperty\nDescription\n\n\n\n\nLoadShaderFamily\nloads a shader family from a JSON file\n\n\n\n", "tags": "ShaderFamily", "url": "https://www.ultraengine.com/learn/ShaderFamily?lang=cpp"},
{"title": "LoadShaderFamily", "text": "\n\nThis function loads a shader family from a JSON file.\n\n\nshared_ptr&lt;ShaderFamily&gt; LoadShaderFamily(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile name to load\n\n\nflags\noptional load flags\n\n\n\n\nReturns the loaded shader family is successful, otherwise NULL is returned.\n", "tags": "LoadShaderFamily", "url": "https://www.ultraengine.com/learn/LoadShaderFamily?lang=cpp"},
{"title": "Skeleton", "text": "\n\nBase class: Object\nThe skeleton class is a hierarchy of bones used for animation. A model can use a skeleton to warp its vertices for skinned animation. Skeletons can be unique per model, or can be shared across multiple models using the Model::SetSkeleton method.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nroot\nshared_ptr&lt;Bone&gt;\ntop-level bone in the hierarchy\n\n\nFindBone\nMethod\nsearches for a bone with the specified name\n\n\n\n", "tags": "Skeleton", "url": "https://www.ultraengine.com/learn/Skeleton?lang=cpp"},
{"title": "Skeleton::FindBone", "text": "\n\nThis method searches for a bone in the skeleton with the specified name.\n\n\nshared_ptr&lt;Bone&gt; FindBone(const WString name, const bool cased = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nname\nthe bone name to search for\n\n\ncased\nif set to true the search will be case-sensitive\n\n\n\n\nReturns a bone with the specified name if found, otherwise NULL is returned.\n", "tags": "Skeleton::FindBone", "url": "https://www.ultraengine.com/learn/Skeleton_FindBone?lang=cpp"},
{"title": "Texture", "text": "\n\nBase class: Asset\nA texture is an image that can be applied to 2D or 3D surfaces. Textures can be loaded from DDS files or other file formats loaded with plugins.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nsize\nconst iVec3&amp;\nread-only dimensions\n\n\nBuildMipmaps\nMethod\ngenerates mipmaps for the texture\n\n\nSetPixels\nMethod\nsets the texture image data\n\n\nSetSubPixels\nMethod\nsets the texture image data of an area\n\n\nCreateTexture\nFunction\ncreates a new texture\n\n\nLoadTexture\nFunction\nloads a texture from a file or stream\n\n\n\n\nSome of the performance optimizations Ultra Engine uses require a hard limit on the maximum number of textures that can be loaded at once. This value can be increased by defining the following values in a file called Ultra.json, in your games directory:\n\nYou must also define the same values in the shader file Shaders/Base/Limits.glsl and recompile all shaders:\n\nAn error will result if the limits defined in the shader do not match the limits defined in the JSON file.\n", "tags": "Texture", "url": "https://www.ultraengine.com/learn/Texture?lang=cpp"},
{"title": "Texture::BuildMipmaps", "text": "\n\nTHis method will create a new mipmap chain from the base image level. The texture must have been created with the TEXTURE_MIPMAPS flag to generate mipmaps.\n\n\nvoid BuildMipmaps()\nvoid BuildMipmaps(const int layer)\n\n\n\n\nParamter\nDescription\n\n\n\n\nlayer\ntexture layer or cubemap face to build, or all layers if not specified\n\n\n\n", "tags": "Texture::BuildMipmaps", "url": "https://www.ultraengine.com/learn/Texture_BuildMipmaps?lang=cpp"},
{"title": "CreateTexture", "text": "\n\nThis function creates a new texture.\n\n\nshared_ptr&lt;Texture&gt; CreateTexture(const TextureType type, const int width, const int height, const TextureFormat format = TEXTURE_RGBA, const std::vector&lt;shared_ptr &gt; mipchain = {}, const int layers = 1, const TextureFlags flags = TEXTURE_DEFAULT, const TextureFilter filter = TEXTUREFILTER_LINEAR, const int samples = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntype\ntexture type, can be TEXTURE_2D, TEXTURE_3D, or TEXTURE_CUBE\n\n\nwidth, height\ntexture dimensions\n\n\nformat\ntexture format\n\n\nmipchain\nthe mipmap chain can be specified upon creation, or each mipmap level can be set afterwards\n\n\nlayers\ntexture layers\n\n\nflags\ntexture flags, can be TEXTURE_DEFAULT or any combination of TEXTURE_BUFFER, TEXTURE_MIPMAPS, TEXTURE_CLAMP_U, TEXTURE_CLAMP_V, TEXTURE_CLAMP_W\n\n\nsamples\nfor multisampled texture\n\n\nfilter\ntexture filter, can be TEXTUREFILTER_LINEAR, TEXTUREFILTER_NEAREST, or TEXTUREFILTER_CUBIC\n\n\n\n\nReturns a new texture.\n", "tags": "CreateTexture", "url": "https://www.ultraengine.com/learn/CreateTexture?lang=cpp"},
{"title": "LoadTexture", "text": "\n\nThis function loads a texture from a file path or stream.\n\n\nshared_ptr&lt;Texture&gt; LoadTexture(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\nshared_ptr&lt;Texture&gt; LoadTexture(shared_ptr&lt;Stream&gt;,const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to load the pixmap from\n\n\nstream\nstream to load the pixmap from\n\n\nflags\noptional load flags\n\n\n\n\nReturns the loaded texture, or NULL if no texture was loaded.\n\nUltra Engine natively supports the DDS and Leadwerks TEX texture file formats. The FITextureLoader plugin supports JPEG, PNG, TGA, GIF, and HDR files.\n", "tags": "LoadTexture", "url": "https://www.ultraengine.com/learn/LoadTexture?lang=cpp"},
{"title": "Texture::SetPixels", "text": "\n\nThis method sets the image data of a texture.\n\n\nvoid SetPixels(shared_ptr&lt;Pixmap&gt; pixels, const int miplevel = 0, const int layer = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\npixels\npixel data to set\n\n\nmiplevel\nthe mipmap level to set\n\n\nface\ntexture layer or cubemap face\n\n\n\n\nThe provided pixmap must use the same format as the texture, and have the same dimensions as the specified miplevel.\n", "tags": "Texture::SetPixels", "url": "https://www.ultraengine.com/learn/Texture_SetPixels?lang=cpp"},
{"title": "Texture::SetSubPixels", "text": "\n\nThis method sets the image data for an area of the texture.\n\n\nvoid SetSubPixels(shared_ptr&lt;Pixmap&gt; pixmap, int x, int y, int width, int height, int dstx, int dsty, const int miplevel = 0, const int layer = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx, y\nposition on the source image to read from\n\n\nwidth, height\ndimensions of the area to copy\n\n\ndstx, dsty\nposition on the texture to write to\n\n\nmiplevel\ndestination mipmap level\n\n\nlayer\ndestination layer or cubemap face\n\n\n\n\nThe provided pixmap must use the same format as the texture, and have the same dimensions as the specified miplevel.\nIf the specified area lies outside the bounds of the source or destinaton image, it will be automatically trimmed.\n", "tags": "Texture::SetSubPixels", "url": "https://www.ultraengine.com/learn/Texture_SetSubPixels?lang=cpp"},
{"title": "TextureBuffer", "text": "\n\nBase class: Object\nThis class is used for render-to-texture operations.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nsize\nconst iVec2&amp;\nread-only dimensions\n\n\nCountColorAttachments\nMethod\nreturns the number of color attachments\n\n\nGetColorAttachment\nMethod\nreturns the color attachment\n\n\nGetDepthAttachment\nMethod\nreturns the depth attachment\n\n\nGetSize\nMethod\nreturns the texture buffer dimensions\n\n\nSetColorAttachment\nMethod\nsets the color render texture\n\n\nSetDepthAttachment\nMethod\nsets the depth render texture\n\n\nCreateTextureBuffer\nFunction\nreturns a new texturebuffer object\n\n\n\n", "tags": "TextureBuffer", "url": "https://www.ultraengine.com/learn/TextureBuffer?lang=cpp"},
{"title": "CreateTextureBuffer", "text": "\n\nThis function creates a new texture buffer, for render-to-texture operations.\n\n\nshared_ptr&lt;TextureBuffer&gt; CreateTextureBuffer(const int width, const int height, const int colorattachments = 1, const bool depthattachment = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nwidth, height\ndimensions of the texture buffer\n\n\ncolorattachments\nnumber of color textures to add, between 0 and 4\n\n\ndepthattachment\nset to true to add a depth texture\n\n\n\n\nReturns a new texture buffer object.\n\n\n", "tags": "CreateTextureBuffer", "url": "https://www.ultraengine.com/learn/CreateTextureBuffer?lang=cpp"},
{"title": "TextureBuffer::CountColorAttachments", "text": "\n\nThis method returns the number of color attachments the texture buffer has.\n\n\nint CountColorAttachments()\n\n\nReturns the number of color textures this texture buffer draws to.\n", "tags": "TextureBuffer::CountColorAttachments", "url": "https://www.ultraengine.com/learn/TextureBuffer_CountColorAttachments?lang=cpp"},
{"title": "TextureBuffer::GetColorAttachment", "text": "\n\nThis method returns a texture buffers color texture.\n\n\nshared_ptr&lt;Texture&gt; texture GetColorAttachment(const int index = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\ncolor attachment index to get\n\n\n\n\nReturns the color attachment at the specified index.\n", "tags": "TextureBuffer::GetColorAttachment", "url": "https://www.ultraengine.com/learn/TextureBuffer_GetColorAttachment?lang=cpp"},
{"title": "TextureBuffer::GetDepthAttachment", "text": "\n\nThis method returns a texture buffers depth texture.\n\n\nshared_ptr&lt;Texture&gt; texture GetDepthAttachment()\n\n\nReturns the depth attachment.\n", "tags": "TextureBuffer::GetDepthAttachment", "url": "https://www.ultraengine.com/learn/TextureBuffer_GetDepthAttachment?lang=cpp"},
{"title": "TextureBuffer::GetSize", "text": "\n\nThis method returns the texture buffer dimensions.\n\niVec2 GetSize()\n\n\nReturns the texture buffer size.\n", "tags": "TextureBuffer::GetSize", "url": "https://www.ultraengine.com/learn/TextureBuffer_GetSize?lang=cpp"},
{"title": "TextureBuffer::SetColorAttachment", "text": "\n\nThis method sets a texture buffers color texture.\n\n\nbool SetColorAttachment(shared_ptr&lt;Texture&gt; texture, const int index = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntexture\ncolor attachment to set\n\n\nindex\ncolor attachment index to set\n\n\n\n\nReturns true of the color attachment is set, otherwise false is returned.\n\nThe specified texture must use a renderable color format.\nThe specified texture must have been created with the TEXTURE_BUFFER flag.\nThe specified texture must be the same dimensions as the texture buffer.\nThe index value must be less than 4.\nThe index value must be between 0 and the value returned by TextureBuffer::CountColorAttachments.\n", "tags": "TextureBuffer::SetColorAttachment", "url": "https://www.ultraengine.com/learn/TextureBuffer_SetColorAttachment?lang=cpp"},
{"title": "TextureBuffer::SetDepthAttachment", "text": "\n\nThis method sets a texture buffers depth texture.\n\n\nbool SetDepthAttachment(shared_ptr&lt;Texture&gt; texture)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntexture\ndepth attachment to set\n\n\n\n\nReturns true of the depth attachment is set, otherwise false is returned.\n\nThe specified texture must use a renderable depth format.\nThe specified texture must have been created with the TEXTURE_BUFFER flag.\nThe specified texture must be the same dimensions as the texture buffer.\n", "tags": "TextureBuffer::SetDepthAttachment", "url": "https://www.ultraengine.com/learn/TextureBuffer_SetDepthAttachment?lang=cpp"},
{"title": "Vertex", "text": "\n\nBase class: Object\nThis class stores properties for a single mesh vertex.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nbitangent\nVec3\nvertex bitangent\n\n\nboneindices\narray&lt;unsigned char, 4&gt;\nvertex bone indices, for skinned animation\n\n\nboneweights\nVec4\nvertex bone weights, for skinned animation\n\n\ndisplacement\nfloat\nmaximum displacement, for use with tessellation\n\n\nnormal\nVec3\nvertex normal\n\n\nposition\nVec3\nvertex position\n\n\ntexcoords\nVec2\nvertex texcoords\n\n\ntangent\nVec3\nvertex tangent\n\n\n\n", "tags": "Vertex", "url": "https://www.ultraengine.com/learn/Vertex?lang=cpp"},
{"title": "ASyncRender", "text": "\n\nThis function can be used to disable multithreaded rendering.\n\n\nvoid ASyncRender(const bool mode)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmode\nset to false to disable multithreaded rendering\n\n\n\n\nA framebuffer can only be created on a resizable window when multithreaded rendering is disabled using this function. This should not be done for real-time applications, but can be useful for making tools that do not need to render in real-time.\nIf you use this function, you must call it before any other API commands.\nOnce the engine is initialized, the multithreaded rendering mode cannot be changed.\n\nThis example creates an event-based application with a resizable window and a 3D viewport.\n\n", "tags": "ASyncRender", "url": "https://www.ultraengine.com/learn/ASyncRender?lang=cpp"},
{"title": "GUI", "text": "\n\nUltra Engine features a robust graphical user interface for creating in-game interfaces and desktop applications.\nThe first step to creating a GUI is to retrieve the machines displays (monitors). A window is then created on one display, typically the primary one, which is listed first. An Interface object is created on the window, which contains all our user interface elements. One or more Widgets are created on the root interface panel. Some widgets may have multiple items added to them with the Widget::AddItem method.\nWidgets and timers are the two object types that may emit events using the EmitEvent command. When this is called, the event is first evaluated by any callbacks that have been defined with the ListenEvent function. The event is then added to the event queue, where it may be retrieved using the WaitEvent command.\n", "tags": "GUI", "url": "https://www.ultraengine.com/learn/GUI?lang=cpp"},
{"title": "Display", "text": "\n\nBase class: Object\nThis class provides an interface for querying and managing hardware monitors.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ngraphicsmodes\nconst vector&lt;iVec2&gt;&amp;\nread-only available screen resolutions\n\n\nposition\nconst iVec2&amp;\nread-only screen position on the virtual desktop\n\n\nscale\nconst float&amp;\nread-only DPI scaling value\n\n\nsize\nconst iVec2&amp;\nread-only screen dimensions\n\n\nClientArea\nMethod\nreturns the usable area within the screen\n\n\nGetPosition\nMethod\nreturns the position of the display on the virtual monitor space\n\n\nGetSize\nMethod\nreturns the display dimensions in pixels\n\n\nGetScale\nMethod\nreturns the current DPI scale value\n\n\nGetDisplays\nFunction\nreturns a list of hardware displays in use\n\n\n\n", "tags": "Display", "url": "https://www.ultraengine.com/learn/Display?lang=cpp"},
{"title": "Display::ClientArea", "text": "\n\nThis method returns the usable area within a screen, excluding system task bars or other decorations.\n\niVec4 ClientArea()\n\nReturns the usable area of the screen.\n\n\n", "tags": "Display::ClientArea", "url": "https://www.ultraengine.com/learn/Display_ClientArea?lang=cpp"},
{"title": "GetDisplays", "text": "\n\nThis function retrievs a list of hardware monitors that are currently in use.\n\n\nvector&lt;shared_ptr&lt;Display&gt; &gt; GetDisplays()\n\n\nReturns an array of all displays currently in use, with the primary display in the first index.\n\n\n", "tags": "GetDisplays", "url": "https://www.ultraengine.com/learn/GetDisplays?lang=cpp"},
{"title": "Display::GetPosition", "text": "\n\nThis methods retrieves the display position on the virtual display.\n\n\niVec2 GetPosition()\n\n\nReturns the displays position on the bounding virtual display.\n\n\n", "tags": "Display::GetPosition", "url": "https://www.ultraengine.com/learn/Display_GetPosition?lang=cpp"},
{"title": "Display::GetScale", "text": "\n\nThis methods retrieves the display scaling factor that is currently in use on this display.\n\n\nfloat GetScale()\n\n\nReturns the scaling factor of this display.\n\n\n", "tags": "Display::GetScale", "url": "https://www.ultraengine.com/learn/Display_GetScale?lang=cpp"},
{"title": "Display::GetSize", "text": "\n\nThis methods retrieves the display size.\n\n\niVec2 GetSize()\n\n\nReturns the displays size, in screen pixels.\n\n\n", "tags": "Display::GetSize", "url": "https://www.ultraengine.com/learn/Display_GetSize?lang=cpp"},
{"title": "Event", "text": "\n\nThis class contains information for events emitted by the GUI and other systems.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ndata\nint\nfield for event data value\n\n\nextra\nshared_ptr&lt;Object&gt;\nextra value associated witht the event\n\n\nid\nEventId\nEvent type\n\n\nposition\niVec2\nscreen coordinate at which event occurred\n\n\nsize\niVec2\nsize of the event source when the event occurred\n\n\nsource\nshared_ptr&lt;Object&gt;\nobject that emitted the event\n\n\ntext\nWString\nstring information like file paths\n\n\nEvent\nConstructor\nEvent(const EventID id, shared_ptr&lt;Object&gt; source, const int data=0, iVec2 position = 0, iVec2 size = 0, shared_ptr&lt;Object&gt; extra = NULL)\n\n\nAllocEventId\nFunction\nallocates a unique event ID\n\n\nEmitEvent\nFunction\nadds an event to the event queue\n\n\nPeekEvent\nFunction\nreturns true if any events are available in the event queue.\n\n\nListenEvent\nFunction\nsets a callback function to execute when an event occurs\n\n\nWaitEvent\nFunction\nwait until an event occurs and return it\n\n\n\nThe following event IDs may be emitted by the program. Additional event ID can be created with the AllocEventId command.\n\n\n\nID\nDescription\n\n\n\n\nEVENT_WINDOWCLOSE\nwindow is closed\n\n\nEVENT_WINDOWPAINT\nwindow region is drawn\n\n\nEVENT_WINDOWSIZE\nwindow is resized\n\n\nEVENT_MOUSEMOVE\nmouse cursor moves\n\n\nEVENT_MOUSEUP\nmouse button released\n\n\nEVENT_MOUSEDOWN\nmouse button pressed\n\n\nEVENT_KEYUP\nkey is released\n\n\nEVENT_KEYDOWN\nkey is pressed\n\n\nEVENT_WINDOWMOVE\nwindow position changed\n\n\nEVENT_MOUSEWHEEL\nmouse wheel turned\n\n\nEVENT_KEYCHAR\nkey is pressed. The ASCII character is stored in the data member\n\n\nEVENT_TIMERTICK\ntimer tick occurs\n\n\nEVENT_DOUBLECLICK\nmouse button is double-clicked\n\n\nEVENT_TRIPLECLICK\nmouse button is triple-clicked\n\n\nEVENT_MOUSELEAVE\nmouse cursor leaves the window client area\n\n\nEVENT_MOUSEENTER\nmouse cursor enters the window client area\n\n\nEVENT_STARTRENDERER\nif data is 1 the graphics renderer has been initialized and the graphics device name is stored in the event text, otherwise it failed to initialize and an error message is stored in the Event text\n\n\nEVENT_WIDGETDESELECT\nwidget item is deselected\n\n\nEVENT_WIDGETOPEN\ntreeview node is expanded\n\n\nEVENT_WIDGETCLOSE\ntreeview node is collapsed\n\n\nEVENT_WIDGETACTION\nwidget action occurs\n\n\nEVENT_WIDGETSELECT\nwidget item is selected\n\n\nEVENT_WIDGETMENU\nwidget menu is activated\n\n\nEVENT_WINDOWSELECT\nnew window gains the focus\n\n\nEVENT_WINDOWDESELECT\nwindow loses the focus\n\n\nEVENT_KEYREPEAT\nkey is held down for an amount of time\n\n\nEVENT_WINDOWDRAGBEGIN\nwindow move or resize loop begins\n\n\nEVENT_WINDOWDRAGEND\nwindow move or resize loop ends\n\n\nEVENT_WIDGETGAINFOCUS\nwidget loses the focus\n\n\nEVENT_WIDGETLOSEFOCUS\nnew widget is gains the focus\n\n\nEVENT_WIDGETDROP\ndrag-and-drop operation occurs\n\n\nEVENT_WINDOWDPICHANGE\nthe display of a window has changed its DPI scale\n\n\n\n", "tags": "Event", "url": "https://www.ultraengine.com/learn/Event?lang=cpp"},
{"title": "AllocEventId", "text": "\n\nThis function allocates a unique event ID you can use for user-defined events.\n\n\nEventId AllocEventId()\n\n\nReturns a new event ID.\n\n\n", "tags": "AllocEventId", "url": "https://www.ultraengine.com/learn/AllocEventId?lang=cpp"},
{"title": "EmitEvent", "text": "\n\nThis function adds an event to the event queue and triggers any callbacks added with the ListenEvent function.\n\n\nvoid EmitEvent(const Event&amp; event)\nvoid EmitEvent(const EventId id, shared_ptr&lt;Object&gt; source, const int data = 0, const int x = 0, const int y = 0, const int width = 0, const int height = 0, shared_ptr&lt;Object&gt; extra = NULL, const WString&amp; text = )\n\n\n\n\nParameter\nDescription\n\n\n\n\nevent\nevent to emit\n\n\nid\nevent ID\n\n\nsource\nevent source\n\n\ndata\nevent data\n\n\nx\nX component of event position\n\n\ny\nY component of event position\n\n\nwidth\nX compononent of event size\n\n\nheight\nY component of event size\n\n\nextra\nevent extra data\n\n\ntext\nevent text data\n\n\n\n\n\n", "tags": "EmitEvent", "url": "https://www.ultraengine.com/learn/EmitEvent?lang=cpp"},
{"title": "ListenEvent", "text": "\n\nThis function sets a callback function that will be executed when an event occurs.\n\n\nvoid ListenEvent(const EventId id, shared_ptr&lt;Widget&gt; source, bool callback(const Event&amp; event, shared_ptr&lt;Object&gt; extra),  shared_ptr&lt;Object&gt; extra = NULL)\n\n\n\n\nParameter\nDescription\n\n\n\n\nid\nevent ID to listen for, or EVENT_NONE to listen for all events\n\n\nsource\nevent source to listen for, or NULL for events emitted from any source\n\n\ncallback\nfunction to call when event is triggered\n\n\nextra\nextra object to pass to the callback function\n\n\n\n\nInternally, this function will store a weak pointer to the event source and a shared pointer to the extra field.\nIf the callback function returns false no more callbacks will be executed and no event will be added to the event queue.\n\nThe first example shows another way to quit the program when the window is closed:\n\nThe example below demonstrates how an event listener can be used for custom resizing behavior:\n\n", "tags": "ListenEvent", "url": "https://www.ultraengine.com/learn/ListenEvent?lang=cpp"},
{"title": "PeekEvent", "text": "\n\nThis function returns true if any events are available in the event queue.\n\n\nbool PeekEvent()\n\n\nMost GUI applications will use an event-driven design. Occasionally you may need to perform real-time operations (such as rendering). This method provides a mecahnism to incorporate events into such an application.\n\nReturns true of the event queue has any events waiting, otherwise false is returned.\n\n\n", "tags": "PeekEvent", "url": "https://www.ultraengine.com/learn/PeekEvent?lang=cpp"},
{"title": "WaitEvent", "text": "\n\nThis function waits until an event is available in the event queue and returns the oldest event.\n\nEvent WaitEvent()\n\nReturns the oldest event in the queue.\n\nUse PeekEvent to check if any events are available before calling this function, if you dont want the application to pause.\n\n\n", "tags": "WaitEvent", "url": "https://www.ultraengine.com/learn/WaitEvent?lang=cpp"},
{"title": "Icon", "text": "\n\nThis class provides an interface for loading and rasterising vector images. Unlike pixmaps, icons can be used for resolution-independent graphics.\nBase class: Asset\n\n\n\nProperty\nType\nDescription\n\n\n\n\nsize\nconst iVec2&amp;\ndefault size of the image, in pixels\n\n\nRasterize\nMethod\nGenerates a pixmap\n\n\nLoadIcon\nFunction\nLoads an icon object from a file\n\n\n\n", "tags": "Icon", "url": "https://www.ultraengine.com/learn/Icon?lang=cpp"},
{"title": "LoadIcon", "text": "\n\nThis functions loads a vector image from a file path or stream.\n\n\nshared_ptr&lt;Icon&gt; LoadIcon(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\nshared_ptr&lt;Icon&gt; LoadIcon(shared_ptr&lt;Stream&gt; stream, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to load the icon from\n\n\nstream\nstream to load the icon from\n\n\nflags\noptional loading flags\n\n\n\n\nReturns the loaded icon object if successful, otherwise NULL is returned.\n\n\n", "tags": "LoadIcon", "url": "https://www.ultraengine.com/learn/LoadIcon?lang=cpp"},
{"title": "Icon::Rasterize", "text": "\n\nThis method generates a pixmap from a vector image. A scaling value can be used to create the pixmap at any magnification level.\n\n\nshared_ptr&lt;Pixmap&gt; Rasterize(const float scale = 1.0f, const bool cached = true)\n\n\n\n\n\nName\nDescription\n\n\n\n\nscale\nmagnification value to create scaled versions of the image\n\n\ncached\nif set to true the routine will search for a cached pixmap at the specified scale, otherwise a new pixmap will always be generated\n\n\n\n\nReturns a pixmap at the specified scale.\n\n\n", "tags": "Icon::Rasterize", "url": "https://www.ultraengine.com/learn/Icon_Rasterize?lang=cpp"},
{"title": "Interface", "text": "\n\nBase class: Object\nThis class is used to create a graphical user interface.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nroot\nconst shared_ptr&lt;Widget&gt;&amp;\nread-only pointer to root panel widget\n\n\nscale\nconst float&amp;\nread-only interface DPI scaling value\n\n\nLoadColorScheme\nMethod\nloads a GUI color scheme from a JSON file\n\n\nSetRenderLayers\nMethod\nsets the interface render layers, for 3D graphics\n\n\nSetScale\nMethod\nsets the interface DPI scaling value\n\n\nCreateInterface\nFunction\ncreates a new graphical user interface\n\n\n\n", "tags": "Interface", "url": "https://www.ultraengine.com/learn/Interface?lang=cpp"},
{"title": "CreateInterface", "text": "\n\nThis function creates a new graphical user interface for desktop applications or in-game interfaces.\n\n\nshared_ptr&lt;Interface&gt; CreateInterface(shared_ptr&lt;Window&gt; window)\nshared_ptr&lt;Interface&gt; CreateInterface(shared_ptr&lt;World&gt; world, shared_ptr&lt;Font&gt; font, iVec2&gt; size)\n\n\n\n\nParameter\nDescription\n\n\n\n\nwindow\nwindow to create the user interface on\n\n\nworld\nworld to create the interface in, for 3D graphics\n\n\nfont\nfont to use, for 3D graphics\n\n\nsize\ninterface dimensions, for 3D graphics\n\n\n\n\nReturns a new interface object.\n\nThe first example shows how to create an interface directly on a window for an event-based application.\n\nThe second example shows how to create an interface that appears in a 3D rendering biewport.\n\n", "tags": "CreateInterface", "url": "https://www.ultraengine.com/learn/CreateInterface?lang=cpp"},
{"title": "Interface::LoadColorScheme", "text": "\n\nThis method loads a color scheme from a JSON file.\n\n\nbool LoadColorScheme(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to load\n\n\nflags\noptional load flags\n\n\n\n\nReturns true if the color scheme was successfully loaded, otherwise false is returned.\n\nColor schemes are stored in JSON format and define an RGB color for various widget attributes:\n\n\n\n", "tags": "Interface::LoadColorScheme", "url": "https://www.ultraengine.com/learn/Interface_LoadColorScheme?lang=cpp"},
{"title": "Interface::SetRenderLayers", "text": "\n\nThis method can be used to control which cameras an interface is visible in.\n\n\nvoid SetRenderLayers(const unsigned int renderlayers)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrenderlayers\nbitwise flag indicating which render layers the entity should appear in\n\n\n\n", "tags": "Interface::SetRenderLayers", "url": "https://www.ultraengine.com/learn/Interface_SetRenderLayers?lang=cpp"},
{"title": "Interface::SetScale", "text": "\n\nThis method sets the DPI scaling value of an interface.\n\n\nvoid SetScale(const float scale)\n\n\n\n\nParameter\nDescription\n\n\n\n\nscale\nDPI scaling value to set\n\n\n\n\n\n", "tags": "Interface::SetScale", "url": "https://www.ultraengine.com/learn/Interface_SetScale?lang=cpp"},
{"title": "Pixmap", "text": "\n\nBase class: Asset\nThis class provides an interface for loading, manipulating, and saving image data.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nformat\nconst TextureFormat&amp;\nformat of the pixel data\n\n\nsize\nconst iVec2&amp;\nsize of the pixmap\n\n\nblocks\nconst iVec2&amp;\nnumber of blocks in the image, for compressed formats\n\n\npixels\nconst shared_ptr&lt;Buffer&gt;&amp;\nbuffer containing pixel data\n\n\nblocksize\nconst int&amp;\nsize of each block, for compressed formats\n\n\nConvert\nMethod\nconverts a pixmap to another format\n\n\nFill\nMethod\nwrites each pixel with the specified color\n\n\nReadPixel\nMethod\nreads a single pixel\n\n\nResize\nMethod\nresizes the pixmap\n\n\nSample\nMethod\nreads a pixel sample with bilinear filtering\n\n\nWritePixel\nMethod\nwrites a single pixel\n\n\nCreatePixmap\nFunction\nCreates a new pixmap object.\n\n\nLoadPixmap\nFunction\nLoads a pixmap object from a file.\n\n\n\n", "tags": "Pixmap", "url": "https://www.ultraengine.com/learn/Pixmap?lang=cpp"},
{"title": "Pixmap::Convert", "text": "\n\n\nshared_ptr&lt;Pixmap&gt; Convert(const TextureFormat format)\n\n\n\n\nParameter\nDescription\n\n\n\n\nformat\npixel format to convert to\n\n\n\n\nReturns a pixmap with the new pixel format if successful, otherwise NULL is returned.\n\n\n", "tags": "Pixmap::Convert", "url": "https://www.ultraengine.com/learn/Pixmap_Convert?lang=cpp"},
{"title": "CreatePixmap", "text": "\n\nThis function creates a new pixmap with the specified size and format.\n\n\nshared_ptr&lt;Pixmap&gt; CreatePixmap(const int width, const int height, const TextureFormat format = TEXTURE_RGBA, shared_ptr&lt;Buffer&gt; pixeldata = NULL)\n\n\n\n\nParameter\nDescription\n\n\n\n\nwidth\nwidth of the pixmap\n\n\nheight\nheight of the pixmap\n\n\nformat\npixmap pixel format, can be TEXTURE_RGBA, TEXTURE_RGB, TEXTURE_RG, TEXTURE_BGRA, TEXTURE_BGR, TEXTURE_RED, TEXTURE_RED16, or the compressed formats TEXTURE_BC1, TEXTURE_BC3, TEXTURE_BC5, or TEXTURE_BC7\n\n\npixeldata\nif specified the pixmap pixel data will be filled with the buffer contents\n\n\n\n\nReturns a new pixmap object.\n\n\n", "tags": "CreatePixmap", "url": "https://www.ultraengine.com/learn/CreatePixmap?lang=cpp"},
{"title": "Pixmap::Fill", "text": "\n\nThis method writes each pixel of the pixmap with the specified color.\n\n\nvoid Fill(const int color)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncolor\nRGBA color\n\n\n\n\n\n", "tags": "Pixmap::Fill", "url": "https://www.ultraengine.com/learn/Pixmap_Fill?lang=cpp"},
{"title": "LoadPixmap", "text": "\n\nThis function loads a pixmap from a file path or stream.\n\n\nshared_ptr&lt;Pixmap&gt; LoadPixmap(const WString&amp; path, const int miplevel = 0, const int face = 0, const LoadFlags flags = LOAD_DEFAULT)\nshared_ptr&lt;Pixmap&gt; LoadPixmap(shared_ptr&lt;Stream&gt;, const int miplevel = 0, const int face = 0, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to load the pixmap from\n\n\nstream\nstream to load the pixmap from\n\n\nmiplevel\noptional mipmap level to load\n\n\nface\noptional texture face to load\n\n\nflags\noptional load flags\n\n\n\n\nReturns the loaded pixmap, or NULL if no pixmap was loaded.\n\n\n", "tags": "LoadPixmap", "url": "https://www.ultraengine.com/learn/LoadPixmap?lang=cpp"},
{"title": "Pixmap::ReadPixel", "text": "\n\nThis method writes each pixel of the pixmap with the specified color.\n\n\nint ReadPixel(const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nx position of the pixel to read\n\n\ny\ny position of the pixel to read\n\n\n\n\nReturns the RGBA color of the specified pixel.\n\n\n", "tags": "Pixmap::ReadPixel", "url": "https://www.ultraengine.com/learn/Pixmap_ReadPixel?lang=cpp"},
{"title": "Pixmap::Resize", "text": "\n\nThis method resizes a pixmap to make it larger or smaller.\n\n\nshared_ptr&lt;Pixmap&gt; Resize(const int width, const int height)\n\n\n\n", "tags": "Pixmap::Resize", "url": "https://www.ultraengine.com/learn/Pixmap_Resize?lang=cpp"},
{"title": "Pixmap::Sample", "text": "\n\nThis method retrieves a pixel sample using bilinear filtering to smoothly interpolate between pixels.\n\n\nVec4 Sample(const float u, const float v)\nVec4 Sample(const Vec2&amp; coords)\n\n", "tags": "Pixmap::Sample", "url": "https://www.ultraengine.com/learn/Pixmap_Sample?lang=cpp"},
{"title": "Pixmap::WritePixel", "text": "\n\nThis method sets a single pixel in the pixmap to the specified color.\n\n\nvoid WritePixel(const int x, const int y, const int color)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nx position of the pixel to write\n\n\ny\ny position of the pixel to write\n\n\ncolor\nRGBA color\n\n\n\n\nThis command is thread-safe, as long as multiple threads do not write to the same region. See the ThreadPool class for an example of multi-threaded use.\n\n\n", "tags": "Pixmap::WritePixel", "url": "https://www.ultraengine.com/learn/Pixmap_WritePixel?lang=cpp"},
{"title": "Timer", "text": "\n\nBase class: Object\nA timer object emits a TIMERTICK event at a regular frequency. This is provides a method of updating an event-driven application in real-time while maintaining minimal CPU usage.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nCreateTimer\nFunction\ncreates a new timer object\n\n\n\n", "tags": "Timer", "url": "https://www.ultraengine.com/learn/Timer?lang=cpp"},
{"title": "CreateTimer", "text": "\n\nThis function creates a new timer object. A timer emits a TIMERTICK event at a regular frequency. The event source will be the timer object, and the event data value will be the timer tick count.\n\n\nshared_ptr&lt;Timer&gt; CreateTimer(const int frequency)\n\n\n\n\n\nName\nDescription\n\n\n\n\nfrequency\ntimer frequency in milliseconds\n\n\n\n\nReturns a new timer object.\n\n\n", "tags": "CreateTimer", "url": "https://www.ultraengine.com/learn/CreateTimer?lang=cpp"},
{"title": "Widget", "text": "\n\nBase class: Object\nThis class handle user interface elements. A variety of widget types are supported. You can also create custom widgets by extending this class.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nblocks\nconst vector&lt;shared_ptr&lt;WidgetBlock&gt; &gt;&amp;\nread-only container of widget blocks\n\n\nitems\nconst std::vector&lt;WidgetItem&gt;&amp;\nread-only items list\n\n\nkids\nconst vector&lt;shared_ptr&lt;Widget&gt; &gt;&amp;\nread-only container of child widgets\n\n\nsize\nconst iVec2&amp;\nread-only widget size\n\n\ntext\nconst WString&amp;\nread-only widget text\n\n\nAddBlock\nMethod\nadds a widget block\n\n\nAddItem\nMethod\nadds a widget item\n\n\nAddNode\nMethod\nadds a node to a treeview widget\n\n\nClearItems\nMethod\nremoves all widget items\n\n\nClientSize\nMethod\nreturns the client area\n\n\nDoubleClick\nMethod\ncalled when a mouse button is clicked twice in rapid succession\n\n\nDraw\nMethod\ncalled each time the widget is redrawn\n\n\nGetItemText\nMethod\ngets the widget item text\n\n\nGetHidden\nMethod\nreturns the widget visibility\n\n\nGetParent\nMethod\nreturns the widget parent\n\n\nGetPosition\nMethod\ngets the button position\n\n\nGetSelectedItem\nMethod\ngets the selected widget item\n\n\nGetSelectedNode\nMethod\ngets the selected treeview node\n\n\nGetSize\nMethod\ngets the widget size\n\n\nGetState\nMethod\ngets the widget state\n\n\nGetText\nMethod\ngets the widget text\n\n\nGetValue\nMethod\ngets a sliders value\n\n\nGainFocus\nMethod\ncalled when the widget is selected\n\n\nKeyChar\nMethod\ncalled when a keyboard character is entered\n\n\nKeyDown\nMethod\ncalled when a keyboard key is pressed\n\n\nKeyUp\nMethod\ncalled when a keyboard key is released\n\n\nLoseFocus\nMethod\ncalled when the widget is deselected\n\n\nMouseDown\nMethod\ncalled when a mouse button is pressed\n\n\nMouseEnter\nMethod\ncalled when the mouse cursor enters the active window bounds\n\n\nMouseLeave\nMethod\ncalled when the mouse cursor leaves the active window bounds\n\n\nMouseMove\nMethod\ncalled whenever the mouse moves, with coordinates relative to the active window\n\n\nMouseUp\nMethod\ncalled when a mouse button is released\n\n\nMouseWheel\nMethod\ncalled when the mouse wheel turns\n\n\nPaint\nMethod\nredraws a widget\n\n\nRemoveItem\nMethod\nremoves a widget item\n\n\nSetColor\nMethod\nsets the widget color\n\n\nSetFontBold\nMethod\nsets the widget font weight\n\n\nSetFontScale\nMethod\nsets the widget font scale\n\n\nSetHidden\nMethod\nhides or shows the widget\n\n\nSetIcon\nMethod\napplies an icon to the widget\n\n\nSetInteractive\nMethod\napplies an icon to the widget\n\n\nSetItemText\nMethod\nmodifies the item text\n\n\nSetLayout\nMethod\ncontrols the way a widget behaves during resizing\n\n\nSetParent\nMethod\nmakes this widget the child of the parent widget\n\n\nSetPixmap\nMethod\napplies a pixmap to the widget\n\n\nSetProgress\nMethod\nsets the progress complete for a progress bar widget\n\n\nSetShape\nMethod\nsets the widget position sna size\n\n\nSetRange\nMethod\nsets the range of a slider widget\n\n\nSetState\nMethod\nsets the button state\n\n\nSetText\nMethod\nsets the widget color\n\n\nSetValue\nMethod\nsets the value of a slider\n\n\nSelectItem\nMethod\nselects a widget item\n\n\nSelectNode\nMethod\nselects a treeview node\n\n\nTripleClick\nMethod\ncalled when a mouse button is clicked rapidly three times\n\n\nCreateButton\nFunction\ncreates a button widget\n\n\nCreateComboBox\nFunction\ncreates a combobox widget\n\n\nCreateLabel\nFunction\ncreates a label widget\n\n\nCreateListBox\nFunction\ncreates a listbox widget\n\n\nCreateMenu\nFunction\ncreates a menu widget\n\n\nCreatePanel\nFunction\ncreates a panel widget\n\n\nCreateProgressBar\nFunction\ncreates a progress bar widget\n\n\nCreateSlider\nFunction\ncreates a slider widget\n\n\nCreateTextArea\nFunction\ncreates a text area widget\n\n\nCreateTextField\nFunction\ncreates a text field widget\n\n\nCreateTreeView\nFunction\ncreates a treeview widget\n\n\n\n", "tags": "Widget", "url": "https://www.ultraengine.com/learn/Widget?lang=cpp"},
{"title": "Widget::AddBlock", "text": "\n\nThis method adds a WidgetBlock to a custom widget, for displaying a rectangle, image, or text. Generally, this method will be called inside the Draw method of a custom class derived from the Widget class.\n\n\nint AddBlock(const iVec2&amp; position, const iVec2&amp; size, const Vec4&amp; color = Vec4(0), const bool wireframe = false, const float radius = 0.0f, const float gradient = 1.0f);\nint AddBlock(const WString&amp; text, const iVec2&amp; position, const iVec2&amp; size, const Vec4&amp; color, const TextAlignment alignment = 0);\nint AddBlock(shared_ptr&lt;Icon&gt; icon, const iVec2&amp; position, const float scale = 1.0f, const Vec4&amp; color = 1.0f);\nint AddBlock(shared_ptr&lt;Pixmap&gt; pixmap, const iVec2&amp; position, const Vec4&amp; color = 1.0f);\n\n\n\n\n\nName\nDescription\n\n\n\n\nposition\nscreen coordinates of the block within the widget\n\n\nsize\nwidth and height of the block clipping region\n\n\ncolor\nblock color\n\n\nwireframe\nif set to true a rectangle outline will be drawn, otherwise a filled rectangle is drawn\n\n\nradius\nfor rounded rectangles, radius of the corners\n\n\ngradient\ncolor multiplier for vertical gradient\n\n\ntext\ntext to display\n\n\nalignment\ntext alignment, can be any combination of TEXT_LEFT, TEXT_CENTER, or TEXT_RIGHT and TEXT_TOP, TEXT_MIDDLE, and TEXT_BOTTOM\n\n\nicon\nicon to display\n\n\nscale\nicon scale, independent from DPI scaling\n\n\npixmap\npixmap to display\n\n\n\n\nReturns the index of the new widget block.\n\n\n", "tags": "Widget::AddBlock", "url": "https://www.ultraengine.com/learn/Widget_AddBlock?lang=cpp"},
{"title": "Widget::AddItem", "text": "\n\nThis method adds an item to any widget that displays a list of items.\n\n\nint AddItem(const WString&amp; text, const bool selected = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntext\nwidget item text\n\n\nselected\nif true the item will be selected\n\n\n\n\nReturns the index of the new widget item.\n\n\n", "tags": "Widget::AddItem", "url": "https://www.ultraengine.com/learn/Widget_AddItem?lang=cpp"},
{"title": "Widget::AddNode", "text": "\n\nThis method adds a node to a treeview widget.\n\n\nshared_ptr&lt;Widget&gt; AddNode(const WString&amp; text, shared_ptr&lt;Icon&gt; icon = NULL)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntext\ntreeview node text\n\n\nicon\ntreeview node icon\n\n\n\n\nReturns a new treeview node if called by a treeview widget, otherwise NULL is returned.\n\n\n", "tags": "Widget::AddNode", "url": "https://www.ultraengine.com/learn/Widget_AddNode?lang=cpp"},
{"title": "Widget::ClearItems", "text": "\n\nThis method clears all widget items and redraws the widget.\n\n\nvoid ClearItems()\n\n\n\n", "tags": "Widget::ClearItems", "url": "https://www.ultraengine.com/learn/Widget_ClearItems?lang=cpp"},
{"title": "Widget::ClientSize", "text": "\n\nThis method returns the dimensions of the drawable area inside a widget, excluding any padding.\n\n\niVec2 ClientSize()\n\n\nReturns the widget client size. This is the area inside the widget with all borders removed, inside which a child widget may be created.\n\n\n", "tags": "Widget::ClientSize", "url": "https://www.ultraengine.com/learn/Widget_ClientSize?lang=cpp"},
{"title": "CreateButton", "text": "\n\nThe button widget can be used to create push buttons, checkboxes, radio buttons, and toolbar items. Buttons emit a WIDGETACTION event when pushed. Some styles use the widget state to indicate whether they are selected.\n\n\nshared_ptr&lt;Widget&gt; CreateButton(const WString&amp; text, const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent, const ButtonStyle = BUTTON_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntext\nwidget text\n\n\nx\nwidget x position\n\n\ny\nwidget y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\nstyle\noptional button style, can be any combination of BUTTON_CANCEL, BUTTON_CHECKBOX, BUTTON_RADIO, BUTTON_OK, BUTTON_TOGGLE, and BUTTON_TOOLBAR.\n\n\n\n\nReturns a new button object.\n\n\n\n", "tags": "CreateButton", "url": "https://www.ultraengine.com/learn/CreateButton?lang=cpp"},
{"title": "CreateComboBox", "text": "\n\nThe combobox widget displays a drop-down box the user can select an item from. This widget emits a WIDGETSELECT event when a new item is selected.\n\n\nshared_ptr&lt;Widget&gt; CreateComboBox(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nwidget X position\n\n\ny\nwidget Y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\n\n\n\n\n", "tags": "CreateComboBox", "url": "https://www.ultraengine.com/learn/CreateComboBox?lang=cpp"},
{"title": "CreateLabel", "text": "\n\nThe label widget displays a read-only block of text.\n\n\nshared_ptr&lt;Widget&gt; CreateLabel(const WString&amp; text, const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent, const ButtonStyle = LABEL_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntext\nwidget text\n\n\nx\nwidget x position\n\n\ny\nwidget y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\nstyle\noptional button style, can be any combination of LABEL_LEFT, LABEL_RIGHT, LABEL_CENTER, LABEL_TOP, LABEL_MIDDLE, LABEL_BOTTOM, and LABEL_BORDER\n\n\n\n\n\n\n", "tags": "CreateLabel", "url": "https://www.ultraengine.com/learn/CreateLabel?lang=cpp"},
{"title": "CreateMenu", "text": "\n\nThis function creates a menu widget. A menu item emits a WIDGETACTION event when it is selected.\n\n\nshared_ptr&lt;Widget&gt; CreateMenu(const WString&amp; text, shared_ptr&lt;Widget&gt; parent);\n\n\n\n\nParent\nDescription\n\n\n\n\ntext\ninitial widget text\n\n\nparent\nwidget parent\n\n\n\n\nReturns a new widget.\n\n\n\n", "tags": "CreateMenu", "url": "https://www.ultraengine.com/learn/CreateMenu?lang=cpp"},
{"title": "CreateListBox", "text": "\n\nThe listbox widget displays a vertical list of items. The widget emits a WIDGETACTION event when an item is double-clicked, or when the enter key is pressed, with the item index stored in the event data member. The widget emits a WIDGETSELECT event when a new item is selected, with the item index stored in the event data member.\n\n\nshared_ptr&lt;Widget&gt; CreateListBox(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nwidget X position\n\n\ny\nwidget Y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\n\n\n\n\n", "tags": "CreateListBox", "url": "https://www.ultraengine.com/learn/CreateListBox?lang=cpp"},
{"title": "CreatePanel", "text": "\n\nThis function creates a Panel widget. The Panel widget is a rectangular area for framing child widgets.\n\n\nshared_ptr&lt;Widget&gt; CreatePanel(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent, const PanelStyle style = PANEL_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\ninitial x position of the widget\n\n\ny\ninitial y position of the widget\n\n\nwidth\ninitial width of the widget\n\n\nheight\ninitial height of the widget\n\n\nparent\nparent of the widget\n\n\nstyle\noptional widget style, can be PANEL_DEFAULT, PANEL_BORDER, or PANEL_GROUP\n\n\n\n\nReturns a new panel widget.\n\n\n\n", "tags": "CreatePanel", "url": "https://www.ultraengine.com/learn/CreatePanel?lang=cpp"},
{"title": "CreateProgressBar", "text": "\n\nThe progressbar widget displays a horizontal bar that indicates the progress of some task. The progress complete can be set using the Widget::SetProgress method.\n\n\nshared_ptr&lt;Widget&gt; CreateProgressBar(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nwidget X position\n\n\ny\nwidget Y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\n\n\n\n\n", "tags": "CreateProgressBar", "url": "https://www.ultraengine.com/learn/CreateProgressBar?lang=cpp"},
{"title": "CreateSlider", "text": "\n\nThe slider widget adjusts an integer value within a defined range. Three different styles are available. The slider can also be set to scroll horizontally or vertically with an additional style flag.\n\n\nshared_ptr&lt;Widget&gt; CreateSlider(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent, const SliderStyle style = SLIDER_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nwidget X position\n\n\ny\nwidget Y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\nstyle\nslider style, can be any combination of SLIDER_SCROLLBAR, SLIDER_STEPPER, SLIDER_TRACKBAR, SLIDER_HORIZONTAL, and SLIDER_VERTICAL\n\n\n\n\nReturns a new slider widget.\n\n\n\n", "tags": "CreateSlider", "url": "https://www.ultraengine.com/learn/CreateSlider?lang=cpp"},
{"title": "CreateTabber", "text": "\n\nThe tabber widget is a tabbed panel that allows the user to select different pages in a user interface.\n\n\nshared_ptr&lt;Widget&gt; CreateTabber(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nwidget X position\n\n\ny\nwidget Y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\n\n\n\n\n", "tags": "CreateTabber", "url": "https://www.ultraengine.com/learn/CreateTabber?lang=cpp"},
{"title": "CreateTextField", "text": "\n\nThe textfield widget is an editable input box. It will emit a WIDGETACTION event if the text changes and the widget loses the focus or the enter key is pressed. If the READONLY style is used the widget text will not be editable. If the PASSWORD style is used the widget text will appear as a series of dots.\n\n\nshared_ptr&lt;Widget&gt; CreateTextField(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent, const TextField style = TEXTFIELD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nwidget X position\n\n\ny\nwidget Y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\nstyle\ntextfield style, can be any combination of TEXTFIELD_DEFAULT, TEXTFIELD_READONLY, TEXTFIELD_PASSWORD, TEXTFIELD_TEXTCHANGEACTIONEVENT, TEXTFIELD_LOSEFOCUSACTIONEVENT, and TEXTFIELD_ENTERKEYACTIONEVENT\n\n\n\n\nThe TEXTFIELD_DEFAULT style flag is equal to TEXTFIELD_LOSEFOCUSACTIONEVENT + TEXTFIELD_ENTERKEYACTIONEVENT.\n\n\n\n", "tags": "CreateTextField", "url": "https://www.ultraengine.com/learn/CreateTextField?lang=cpp"},
{"title": "CreateTextArea", "text": "\n\nThe text area widget is a read-only multiline text display. If the WORDWRAP style is used the text will be adjusted to fit in the horizontal space of the widget.\n\n\nshared_ptr&lt;Widget&gt; CreateTextArea(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent, const TextField style = TEXTAREA_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nwidget X position\n\n\ny\nwidget Y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\nstyle\ntextfield style, can be TEXTAREA_DEFAULT or TEXTAREA_WORDWRAP\n\n\n\n\nReturns a new TextArea widget.\n\nWhen the TEXTAREA_WORDWRAP style is used whitespace characters may be optimized for faster layout calculation.\n\n\n\n", "tags": "CreateTextArea", "url": "https://www.ultraengine.com/learn/CreateTextArea?lang=cpp"},
{"title": "CreateTreeView", "text": "\n\nThe treeview widget displays a hierarchy of nodes that can be selected, opened and closed, double-clicked, and moved. The Widget::AddNode method is used to add nodes to the tree hierarchy.\nWhen a new node is selected the WIDGETSELECT event will be emitted, with the treeview node stored in the event extra member. When a node is double-clicked, a WIDGETACTION event will be emitted, with the treeview node stored in the event extra member.\nIf the DRAGANDDROP style is used, the widget will emit a WIDGETDROP event when a node is dragged onto another node, with the source node as the event source and the destination node stored in the event extra member. If the DRAGINSERT style is also used, the event data member will be set to 0 when the node is dropped onto another node, -1 when it is dropped above it, and 1 when it is dropped below it.\nIf the MULTISELECT style is used, the user can select multiple nodes in the tree at once by holding using the control or shift keys when clicking.\nThe SORT style can be used to automatically sort treeview nodes alphabetically.\n\n\nshared_ptr&lt;Widget&gt; CreateTreeView(const int x, const int y, const int width, const int height, shared_ptr&lt;Widget&gt; parent, const TreeViewStyle style = TREEVIEW_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nwidget X position\n\n\ny\nwidget Y position\n\n\nwidth\nwidget width\n\n\nheight\nwidget height\n\n\nparent\nparent widget\n\n\nstyle\ntreeview style, can be any combination of TREEVIEW_MULTISELECT, TREEVIEW_DRAGANDDROP, TREEVIEW_SORT, and TREEVIEW_DRAGINSERT\n\n\n\n\n\n\n", "tags": "CreateTreeView", "url": "https://www.ultraengine.com/learn/CreateTreeView?lang=cpp"},
{"title": "Custom Widgets", "text": "\n\nYou can create new types of widgets in C++ by extending the base Widget class. The widgets behavior is controlled by overriding the Widget class methods. Drawing is accomplished by adding WidgetBlock objects to the blocks member.\nThe following methods can be overridden to control custom widget behavior:\n\n\n\nName\nDescription\n\n\n\n\nDraw\ncalled each time the widget is painted\n\n\nDoubleClick\ncalled when a mouse button is clicked twice in rapid succession\n\n\nGainFocus\ncalled when the widget is selected\n\n\nKeyChar\ncalled when a keyboard character is entered\n\n\nKeyDown\ncalled when a keyboard key is pressed\n\n\nKeyUp\ncalled when a keyboard key is released\n\n\nLoseFocus\ncalled when the widget is deselected\n\n\nMouseDown\ncalled when a mouse button is pressed\n\n\nMouseEnter\ncalled when the mouse cursor enters the active window bounds\n\n\nMouseLeave\ncalled when the mouse cursor leaves the active window bounds\n\n\nMouseMove\ncalled whenever the mouse moves, with coordinates relative to the active window\n\n\nMouseUp\ncalled when a mouse button is released\n\n\nMouseWheel\ncalled when the mouse wheel turns\n\n\nTripleClick\ncalled when a mouse button is clicked rapidly three times\n\n\n\n\n\n", "tags": "Custom Widgets", "url": "https://www.ultraengine.com/learn/CustomWidgets?lang=cpp"},
{"title": "Widget::Draw", "text": "\n\nThis method is called each time the widget is redrawn.\n\n\nvoid Draw(const int x, const int y, const int width, const int height)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nx screen coordinate of drawn area\n\n\ny\ny screen coordinate of drawn area\n\n\nwidth\nwidth of the drawn area\n\n\nheight\nheight of the drawn area\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::Draw", "url": "https://www.ultraengine.com/learn/Widget_Draw?lang=cpp"},
{"title": "Widget::DoubleClick", "text": "\n\nThis method is called when a mouse button is clicked twice in rapid succession.\n\n\nvoid DoubleClick(const MouseButton button, const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbutton\nwhich mouse button that was clicked, can be MOUSE_LEFT, MOUSE_RIGHT, or MOUSE_MIDDLE\n\n\nx\nmouse x position when clicked\n\n\ny\nmouse y position when clicked\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::DoubleClick", "url": "https://www.ultraengine.com/learn/Widget_DoubleClick?lang=cpp"},
{"title": "Widget::GainFocus", "text": "\n\nThis method is called when the widget is selected.\n\n\nvoid GainFocus()\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::GainFocus", "url": "https://www.ultraengine.com/learn/Widget_GainFocus?lang=cpp"},
{"title": "Widget::GetItemText", "text": "\n\nThis method returns the text of the specified widget item.\n\n\nWString GetItemText(const int item)\n\n\n\n\nParameter\nDescription\n\n\n\n\nitem\nwidget item index\n\n\n\n\nReturns the widget item text at the specified index.\n\n\n", "tags": "Widget::GetItemText", "url": "https://www.ultraengine.com/learn/Widget_GetItemText?lang=cpp"},
{"title": "Widget::GetHidden", "text": "\n\nThis method returns the widget visibility state.\n\n\nbool GetHidden()\n\n\nReturns true if the widget is hidden, otherwise false is returned.\n", "tags": "Widget::GetHidden", "url": "https://www.ultraengine.com/learn/Widget_GetHidden?lang=cpp"},
{"title": "Widget::GetParent", "text": "\n\nThis method retrieves the widget parent.\n\n\nshared_ptr&lt;Widget&gt; GetParent()\n\n\nReturns the widget parent.\n", "tags": "Widget::GetParent", "url": "https://www.ultraengine.com/learn/Widget_GetParent?lang=cpp"},
{"title": "Widget::GetPosition", "text": "\n\nThis method returns the widget position, relative to the parent or the interface.\n\n\niVec2 GetPosition(const bool global = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nglobal\nif set to false the position is relative to the parent, otherwise it is relative to the interface\n\n\n\n\nReturns the widget position.\n\n\n", "tags": "Widget::GetPosition", "url": "https://www.ultraengine.com/learn/Widget_GetPosition?lang=cpp"},
{"title": "Widget::GetSelectedItem", "text": "\n\nFor use with listbox and combobox widgets, this method gets the selected widget item.\n\n\nint GetSelectedItem()\n\n\nReturns the selected widget item index, or -1 if no item is selected.\n\n\n", "tags": "Widget::GetSelectedItem", "url": "https://www.ultraengine.com/learn/Widget_GetSelectedItem?lang=cpp"},
{"title": "Widget::GetSelectedNode", "text": "\n\nThis method retrieves the currently selected node in a treeview widget.\n\n\nshared_ptr&lt;Widget&gt; GetSelectedNode()\n\n\nReturns the selected treeview node, or NULL if none is selected.\n\n\n", "tags": "Widget::GetSelectedNode", "url": "https://www.ultraengine.com/learn/Widget_GetSelectedNode?lang=cpp"},
{"title": "Widget::GetSize", "text": "\n\nThis method returns the dimensions of the widget. To retrieve the area inside the widget excluding any padding, use the ClientSize method.\n\n\niVec2 GetSize()\n\n\nReturns the widget size.\n\n\n", "tags": "Widget::GetSize", "url": "https://www.ultraengine.com/learn/Widget_GetSize?lang=cpp"},
{"title": "Widget::GetState", "text": "\n\nThis method retrieves the widget state.\n\n\nWidgetState GetState()\n\n\nReturns the widget state. This may be WIDGETSTATE_SELECTED, WIDGETSTATE_UNSELECTED, or WIDGETSTATE_INDETERMINATE.\n\n\n", "tags": "Widget::GetState", "url": "https://www.ultraengine.com/learn/Widget_GetState?lang=cpp"},
{"title": "Widget::GetText", "text": "\n\nThis method returns the widget text.\n\n\nWString GetText()\n\n\nReturns the widget text.\n\n\n", "tags": "Widget::GetText", "url": "https://www.ultraengine.com/learn/Widget_GetText?lang=cpp"},
{"title": "Widget::GetValue", "text": "\n\nThis method gets the value of a slider widget.\n\n\nint GetValue()\n\n\nReturns the currently set widget value.\n\n\n", "tags": "Widget::GetValue", "url": "https://www.ultraengine.com/learn/Widget_GetValue?lang=cpp"},
{"title": "Widget::KeyChar", "text": "\n\nThis method is called when a keyboard character is entered.\n\n\nvoid KeyChar(const int keychar);\n\n\n\n\nParameter\nDescription\n\n\n\n\nkeychar\nASCII character code for the inputted text\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::KeyChar", "url": "https://www.ultraengine.com/learn/Widget_KeyChar?lang=cpp"},
{"title": "Widget::KeyDown", "text": "\n\nThis method is called called when a keyboard key is pressed.\n\n\nvoid KeyDown(const KeyCode key)\n\n\n\n\nParameter\nDescription\n\n\n\n\nkeycode\nthe key that was pressed\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::KeyDown", "url": "https://www.ultraengine.com/learn/Widget_KeyDown?lang=cpp"},
{"title": "Widget::KeyUp", "text": "\n\nThis method is called called when a keyboard key is released.\n\n\nvoid KeyUp(const KeyCode key)\n\n\n\n\nParameter\nDescription\n\n\n\n\nkeycode\nthe key that was pressed\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::KeyUp", "url": "https://www.ultraengine.com/learn/Widget_KeyUp?lang=cpp"},
{"title": "Widget::LoseFocus", "text": "\n\nThis method is called when the widget is deselected\n\n\nvoid LoseFocus()\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::LoseFocus", "url": "https://www.ultraengine.com/learn/Widget_LoseFocus?lang=cpp"},
{"title": "Widget::MouseDown", "text": "\n\nThis method is called when the mouse cursor enters the active window bounds.\n\n\nvoid MouseDown(const MouseButton button, const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbutton\nmouse button pressed, can be MOUSE_LEFT, MOUSE_RIGHT, or MOUSE_MIDDLE\n\n\nx\nmouse x screen coordinate\n\n\ny\nmouse y screen coordinate\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::MouseDown", "url": "https://www.ultraengine.com/learn/Widget_MouseDown?lang=cpp"},
{"title": "Widget::MouseEnter", "text": "\n\nThis method is called when the mouse cursor enters the active window bounds.\n\n\nvoid MouseEnter(const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nmouse x screen coordinate\n\n\ny\nmouse y screen coordinate\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::MouseEnter", "url": "https://www.ultraengine.com/learn/Widget_MouseEnter?lang=cpp"},
{"title": "Widget::MouseLeave", "text": "\n\nThis method is called when the mouse cursor leaves the active window bounds.\n\n\nvoid MouseLeave(const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nmouse x screen coordinate\n\n\ny\nmouse y screen coordinate\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::MouseLeave", "url": "https://www.ultraengine.com/learn/Widget_MouseLeave?lang=cpp"},
{"title": "Widget::MouseMove", "text": "\n\nThis method is called whenever the mouse moves, with coordinates relative to the active window.\n\n\nvoid MouseMove(const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nmouse x screen coordinate\n\n\ny\nmouse y screen coordinate\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::MouseMove", "url": "https://www.ultraengine.com/learn/Widget_MouseMove?lang=cpp"},
{"title": "Widget::MouseUp", "text": "\n\nThis method is called when a mouse button is released.\n\n\nvoid MouseUp(const MouseButton button, const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbutton\nmouse button released, can be MOUSE_LEFT, MOUSE_RIGHT, or MOUSE_MIDDLE\n\n\nx\nmouse x screen coordinate\n\n\ny\nmouse y screen coordinate\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::MouseUp", "url": "https://www.ultraengine.com/learn/Widget_MouseUp?lang=cpp"},
{"title": "Widget::MouseWheel", "text": "\n\nThis method is called when the mouse wheel turns.\n\n\nvoid MouseWheel(const int delta, const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\ndelta\nhow much it turned since last call\n\n\nx\nmouse x screen coordinate\n\n\ny\nmouse y screen coordinate\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::MouseWheel", "url": "https://www.ultraengine.com/learn/Widget_MouseWheel?lang=cpp"},
{"title": "Widget::Paint", "text": "\n\nThis method send a paint message to the user interface signaling the widget to be redrawn.\n\n\nvoid Paint()\nvoid Paint(const int x, const int y, const int width, const int height)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nx position of the region to paint\n\n\ny\ny position of the region to paint\n\n\nwidth\nwidth of the region to paint\n\n\nheight\nheight of the region to paint\n\n\n\n\nIn most cases a widget will be automatically drawn when needed, but this method provides a way to force a redraw.\n\n\n", "tags": "Widget::Paint", "url": "https://www.ultraengine.com/learn/Widget_Paint?lang=cpp"},
{"title": "Widget::RemoveItem", "text": "\n\nThis method removes the item at the specified index.\n\n\nvoid RemoveItem(const int item)\n\n\n\n\nParameter\nDescription\n\n\n\n\nitem\nitem index to remove, in the range from zero to the number of items minus one\n\n\n\n\n\n", "tags": "Widget::RemoveItem", "url": "https://www.ultraengine.com/learn/Widget_RemoveItem?lang=cpp"},
{"title": "Widget::SelectItem", "text": "\n\nFor use with listbox and combobox widgets, this method selects a widget item.\n\n\nvoid SelectItem(const int index)\n\n\n\n\nParameter\nDescription\n\n\n\n\nindex\nwidget item index, in the range from zero to the number of items minus one, or -1 to deselect all items\n\n\n\n\n\n", "tags": "Widget::SelectItem", "url": "https://www.ultraengine.com/learn/Widget_SelectItem?lang=cpp"},
{"title": "Widget::SelectNode", "text": "\n\nThis method sets the selection state of a tree view node.\n\n\nvoid SelectNode(shared_ptr&lt;Widget&gt; node, const bool selected = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nnode\nnode to set the selection state for\n\n\nselected\ntrue to select the node or false to deselect it\n\n\n\n\n\n", "tags": "Widget::SelectNode", "url": "https://www.ultraengine.com/learn/Widget_SelectNode?lang=cpp"},
{"title": "Widget::SetColor", "text": "\n\nThis method sets a widgets color value.\n\n\nvoid SetColor(const float r, const float g, const float b, const float a = 1.0f, const WidgetColor index = WIDGETCOLOR_BACKGROUND)\nvoid SetColor(const Vec4&amp; color, const WidgetColor index = WIDGETCOLOR_BACKGROUND)\n\n\n\n\nParameter\nDescription\n\n\n\n\nr\nred component of the color to set\n\n\ng\ngreen component of the color to set\n\n\nb\nblue component of the color to set\n\n\na\nalpha component of the color to set\n\n\ncolor\ncolor to set\n\n\nindex\ncolor index\n\n\n\n\nThe color index can be any of the following values:\n\nWIDGETCOLOR_BACKGROUND\nWIDGETCOLOR_SUNKEN\nWIDGETCOLOR_RAISED\nWIDGETCOLOR_BORDER\nWIDGETCOLOR_FOREGROUND\nWIDGETCOLOR_SELECTION\nWIDGETCOLOR_HIGHLIGHT\nWIDGETCOLOR_SELECTEDTEXT\nWIDGETCOLOR_SLIDERARROW\nWIDGETCOLOR_SLIDERTRACK\nWIDGETCOLOR_SLIDERTRACKHOVERED\nWIDGETCOLOR_MENUBORDER\nWIDGETCOLOR_POPUP\n\n\n\n", "tags": "Widget::SetColor", "url": "https://www.ultraengine.com/learn/Widget_SetColor?lang=cpp"},
{"title": "Widget::SetFontBold", "text": "\n\nThis method sets the font weight to make text bold or normal.\n\n\nvoid SetFontBold(const bool bold)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbold\nfont weight\n\n\n\n\n\n", "tags": "Widget::SetFontBold", "url": "https://www.ultraengine.com/learn/Widget_SetFontBold?lang=cpp"},
{"title": "Widget::SetFontScale", "text": "\n\nThis method sets the font scale to make text relatively larger or smaller. The font scale will adjust with DPI scaling so it only needs to be set once.\n\n\nvoid SetFontScale(const float scale)\n\n\n\n\nParameter\nDescription\n\n\n\n\nscale\nfont scale to set (default is 1.0)\n\n\n\n\n\n", "tags": "Widget::SetFontScale", "url": "https://www.ultraengine.com/learn/Widget_SetFontScale?lang=cpp"},
{"title": "WIdget::SetHidden", "text": "\n\nThis method hides or shows the widget.\n\n\nvoid SetHidden(const bool hide)\n\n\n\n\nParameter\nDescription\n\n\n\n\nhide\nset to true to hide the widget\n\n\n\n", "tags": "WIdget::SetHidden", "url": "https://www.ultraengine.com/learn/Widget_SetHidden?lang=cpp"},
{"title": "Widget::SetIcon", "text": "\n\nThis method adds an icon to the widget.\n\n\nvoid Seticon(shared_ptr&lt;Icon&gt; icon)\n\n\n\n\nParameter\nDescription\n\n\n\n\nicon\nicon to set\n\n\n\n\n\n", "tags": "Widget::SetIcon", "url": "https://www.ultraengine.com/learn/Widget_SetIcon?lang=cpp"},
{"title": "Widget::SetItemText", "text": "\n\nThis method sets a widget items text and redraws the widget.\n\n\nvoid SetItemText(const int item, const WString&amp; text)\n\n\n\n\nParameter\nDescription\n\n\n\n\nitem\nwidget item index\n\n\ntext\ntext to set\n\n\n\n\n\n", "tags": "Widget::SetItemText", "url": "https://www.ultraengine.com/learn/Widget_SetItemText?lang=cpp"},
{"title": "Widget::SetLayout", "text": "\n\nThis method controls the way a widget behaves when its parent is resized or when the DPI scale setting is changed.\n\n\nvoid SetLayout(const int left, const int right, const int top, const int bottom)\n\n\n\n\nParameter\nDescription\n\n\n\n\nleft, right, top, bottom\nedge clamp mode, can be 0 or 1\n\n\n\n\n\n\n", "tags": "Widget::SetLayout", "url": "https://www.ultraengine.com/learn/Widget_SetLayout?lang=cpp"},
{"title": "Widget::SetParent", "text": "\n\nThis method makes this widget a child of the specified parent widget.\n\n\nvoid SetParent(shared_ptr&lt;Widget&gt; parent)\nvoid SetParent(shared_ptr&lt;Widget&gt; parent, const int position)\n\n\n\n\nParameter\nDescription\n\n\n\n\nparent\nnew parent widget\n\n\nposition\nthe position in the parent child list to insert this widget\n\n\n\n\nIf the position is not specified the widget will be added to the end of the parents list of children.\nThe parent widget may be NULL if you are deleting the widget.\n\n\n", "tags": "Widget::SetParent", "url": "https://www.ultraengine.com/learn/Widget_SetParent?lang=cpp"},
{"title": "Widget::SetPixmap", "text": "\n\nThis method sets a widget pixmap. It is preferable to use the Widget::SetIcon method if the vector image is available, we this will be resolution-independent.\n\n\nvoid SetPixmap(shared_ptr&lt;Pixmap&gt; pixmap, PixmapAlignment alignment = PIXMAP_CENTER)\n\n\n\n\nParameter\nDescription\n\n\n\n\npixmap\npixmap to set\n\n\nalignment\nmay be set to PIXMAP_CENTER, PIXMAP_CONTAIN, PIXMAP_COVER, or PIXMAP_STRETCH\n\n\n\n\n", "tags": "Widget::SetPixmap", "url": "https://www.ultraengine.com/learn/Widget_SetPixmap?lang=cpp"},
{"title": "Widget::SetProgress", "text": "\n\nThis method sets the progress complete to display, for a progress bar widget.\n\n\nvoid SetProgress(const double progress)\n\n\n\n\nParameter\nDescription\n\n\n\n\nprogress\nprogress complete, in the range from 0 to 1\n\n\n\n\n\n", "tags": "Widget::SetProgress", "url": "https://www.ultraengine.com/learn/Widget_SetProgress?lang=cpp"},
{"title": "Widget::SetRange", "text": "\n\nThis method sets the range of a slider widget.\n\n\nvoid SetRange(const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nminimum value for a stepper or trackbar, or visible range for a scrollbar\n\n\ny\nmaximum value for a stepper or trackbar, or total range for a scrollbar\n\n\n\n\nIf this method is used with a slider widget that uses the STEPPER slider style, the x value will be the minimum value and the y parameter will be the maximum value returned by Widget::GetValue.\nIf this method is used with a slider widget that uses the TRACKBAR slider style, the x value will be the value Widget::GetValue returns when the trackbar knob is all the way to the left (or up, for a vertical slider) and the y value is the value that will be returned when the slider knob is all the way to the right (or bottom).\nIf this method is used with a slider widget that uses the SCROLLBAR slider style, the x value will be the range the handle takes up, and the y value will be the total range of the entire bar excluding the arrow buttons at the ends. For example, calling SetRange(1,10) would make the scrollbar handle take up 10% the total length of the bar. The total number of possible values the slider can have will be given by (y - x) + 1.\n\n\n", "tags": "Widget::SetRange", "url": "https://www.ultraengine.com/learn/Widget_SetRange?lang=cpp"},
{"title": "Widget::SetShape", "text": "\n\nThis method sets the widget position and height.\n\n\nvoid SetShape(const int x, const int y, const int width, const int height)\nvoid SetShape(const iVec2&amp; position, const iVec2&amp; size)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nX component of the widget position\n\n\ny\nY component of the widget position\n\n\nwidth\nX component of the widget size\n\n\nheight\nY component of the widget size\n\n\nposition\nwidget position to set\n\n\nsize\nwidget size to set\n\n\n\n\n\n", "tags": "Widget::SetShape", "url": "https://www.ultraengine.com/learn/Widget_SetShape?lang=cpp"},
{"title": "Widget::SetState", "text": "\n\nThis method sets the widget state. The widget state may be WIDGETSTATE_SELECTED, WIDGETSTATE_UNSELECTED, or WIDGETSTATE_INDETERMINATE.\n\n\nvoid SetState(const WidgetState state)\nvoid SetState(const bool selected)\n\n\n\n\nParameter\nDescription\n\n\n\n\nstate\nwidget state to set, either WIDGETSTATE_SELECTED, WIDGETSTATE_UNSELECTED, or WIDGETSTATE_INDETERMINATE\n\n\nselected\nif true the state will be WIDGETSTATE_SELECTED, otherwise it will be WIDGETSTATE_UNSELECTED\n\n\n\n\n\n", "tags": "Widget::SetState", "url": "https://www.ultraengine.com/learn/Widget_SetState?lang=cpp"},
{"title": "Widget::SetText", "text": "\n\nThis method sets the widget text.\n\n-void SetText(const WString text)\n\n\n\nParameter\nDescription\n\n\n\n\ntext\nwidget text to set\n\n\n\n\n\n", "tags": "Widget::SetText", "url": "https://www.ultraengine.com/learn/Widget_SetText?lang=cpp"},
{"title": "Widget::SetValue", "text": "\n\nThis method sets the value of a slider widget.\n\n\nvoid SetValue(const int value)\n\n\n\n\nParamter\nDescription\n\n\n\n\nvalue\nnew value to set\n\n\n\n\n\n", "tags": "Widget::SetValue", "url": "https://www.ultraengine.com/learn/Widget_SetValue?lang=cpp"},
{"title": "Widget::TripleClick", "text": "\n\nThis method is called when a mouse button is clicked rapidly three times.\n\n\nvoid TripleClick(const MouseButton button, const int x, const int y)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbutton\nmouse button pressed\n\n\nx\nmouse x screen coordinate\n\n\ny\nmouse y screen coordinate\n\n\n\n\nThis is a protected virtual method. It can only be used by declaring it in a custom widget.\n", "tags": "Widget::TripleClick", "url": "https://www.ultraengine.com/learn/Widget_TripleClick?lang=cpp"},
{"title": "WidgetBlock", "text": "\n\nThis class is used by a custom widget to define a rectangle, image, or a block of text.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ncolor\nVec4\nblock color\n\n\ngradient\nfloat\nvertical gradient multiplier\n\n\nposition\niVec2\nblock position\n\n\nradius\nint\ncorner radius\n\n\nsize\niVec2\nblock width and height\n\n\ntext\nWString\nread-only block text\n\n\nSetIcon\nMethod\ndefines an icon to display\n\n\nSetPixmap\nMethod\ndefines a pixmap to display\n\n\nSetText\nMethod\ndefines a string of text to display\n\n\n\n", "tags": "WidgetBlock", "url": "https://www.ultraengine.com/learn/WidgetBlock?lang=cpp"},
{"title": "WidgetBlock::SetIcon", "text": "\n\nThis method allows you to dynamically modify the icon a widget block displays. This can be more efficient than clearing and re-creating all widget blocks.\n\n\nSetIcon(shared_ptr&lt;Icon&gt; icon)\n\n\n\n\nParameter\nDescription\n\n\n\n\nicon\nnew icon to display\n\n\n\n", "tags": "WidgetBlock::SetIcon", "url": "https://www.ultraengine.com/learn/WidgetBlock_SetIcon?lang=cpp"},
{"title": "WidgetBlock::SetPixmap", "text": "\n\nThis method allows you to dynamically modify the pixmap a widget block displays. This can be more efficient than clearing and re-creating all widget blocks.\n\n\nSetPixmap(shared_ptr&lt;Pixmap&gt; pixmap)\n\n\n\n\nParameter\nDescription\n\n\n\n\npixmap\npixmap to display\n\n\n\n", "tags": "WidgetBlock::SetPixmap", "url": "https://www.ultraengine.com/learn/WidgetBlock_SetPixmap?lang=cpp"},
{"title": "WidgetBlock::SetText", "text": "\n\nThis method allows you to dynamically modify the text a widget block displays. This can be more efficient than clearing and re-creating all widget blocks.\n\n\nSetText(const WString&amp; text)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntext\nnew text to display\n\n\n\n", "tags": "WidgetBlock::SetText", "url": "https://www.ultraengine.com/learn/WidgetBlock_SetText?lang=cpp"},
{"title": "WidgetItem", "text": "\n\nThis class contains an item in a listbox or combobox widget.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nextra\nshared_ptr&lt;Object&gt;\nuser-defined object\n\n\nicon\nshared_ptr&lt;Icon&gt;\nwidget item icon\n\n\npixmap\nshared_ptr&lt;Pixmap&gt;\nwidget item pixmap\n\n\nstate\nWidgetState\nwidget item state\n\n\ntext\nconst WString&amp;\nread-only widget item text\n\n\n\n", "tags": "WidgetItem", "url": "https://www.ultraengine.com/learn/WidgetItem?lang=cpp"},
{"title": "Window", "text": "\n\nThe window class provides an interface for creating system application windows.\nBase class: Object\n\n\n\nProperty\nType\nDescription\n\n\n\n\ndisplay\nconst shared_ptr&lt;Display&gt;&amp;\nread-only display the window resides on\n\n\nposition\nconst iVec2&amp;\nread-only window position\n\n\nsize\nconst iVec2&amp;\nread-only window size\n\n\ntext\nconst WString&amp;\nread-only text shown in the window titlebar\n\n\nActivate\nMethod\nactivates the window\n\n\nClientSize\nMethod\nreturns the window dimensions\n\n\nClosed\nMethod\nreturns true if the user has closed the window\n\n\nFlushKeys\nMethod\nresets the keyboard button press states\n\n\nFlushMouse\nMethod\nresets the mouse button press states\n\n\nGetHandle\nMethod\nreturns the system window object\n\n\nGetHidden\nMethod\ngets the window visibility\n\n\nGetMousePosition\nMethod\ngets the current mouse position\n\n\nGetPosition\nMethod\nreturns the window screen position\n\n\nGetSize\nMethod\nreturns the window dimensions\n\n\nKeyDown\nMethod\nreturns true if the key is pressed\n\n\nKeyHit\nMethod\nreturns true if the key has been pressed since the last call\n\n\nMouseDown\nMethod\nreturns true if the mouse button is pressed\n\n\nMouseHit\nMethod\nreturns true if the mouse button has been pressed since the last call\n\n\nMaximized\nMethod\nreturns true if the window is currently maximized\n\n\nMaximize\nMethod\nmaximizes the window\n\n\nMinimize\nMethod\nminimizes the window\n\n\nMinimized\nMethod\nreturns true if the window is currently minimized\n\n\nRestore\nMethod\nrestores the window from the minimized or maximized state\n\n\nSetCursor\nMethod\nsets the window cursor\n\n\nSetHidden\nMethod\nhide and show the window\n\n\nSetMinSize\nMethod\nsets the minimum size the window can be resized to\n\n\nSetMousePosition\nMethod\nsets the mouse position\n\n\nSetShape\nMethod\nsets the window position and size\n\n\nShow\nMethod\nmakes the window visible\n\n\nActiveWindow\nFunction\nreturns the focused application window\n\n\nCreateWindow\nFunction\ncreates a new window\n\n\nTransformCoord\nFunction\ntransforms coordinates from one window to another\n\n\n\n", "tags": "Window", "url": "https://www.ultraengine.com/learn/Window?lang=cpp"},
{"title": "Window::Activate", "text": "\n\nThis method makes the window gain the keyboard focus and brings it to the top of the window order.\n\n\nvoid Activate()\n\n\n\n", "tags": "Window::Activate", "url": "https://www.ultraengine.com/learn/Window_Activate?lang=cpp"},
{"title": "ActiveWindow", "text": "\n\nThis functions returns the focused application window.\n\nshared_ptr&lt;Window&gt; ActiveWindow()\n\nReturns the focused window, or NULL if no application window has the focus.\n\n\n", "tags": "ActiveWindow", "url": "https://www.ultraengine.com/learn/ActiveWindow?lang=cpp"},
{"title": "Window::ClientSize", "text": "\n\nThis method returns the dimensions of the drawable area inside a window, excluding the title bar and borders.\n\n\niVec2 ClientSize()\n\n\nReturns the window client size.\n\n\n", "tags": "Window::ClientSize", "url": "https://www.ultraengine.com/learn/Window_ClientSize?lang=cpp"},
{"title": "Window::Closed", "text": "\n\nThis method returns true if the window has been closed since the last call, or since the creation of the window.\n\n\nbool Closed()\n\n\nReturns the window closed state and resets the state to false.\n\nThis method uses a global state to detect when the window has been closed. If two different parts of your application call the method, only one will detect the close event. For finer control use the events system and listen for WINDOWCLOSE events.\n\n\n", "tags": "Window::Closed", "url": "https://www.ultraengine.com/learn/Window_Closed?lang=cpp"},
{"title": "CreateWindow", "text": "\n\nThis function is used to create a new window.\n\n\n\nshared_ptr&lt;Window&gt; CreateWindow(const WString&amp; title, const int x, const int y, const int width, const int height, shared_ptr&lt;Display&gt; display, const WindowStyle style = WINDOW_DEFAULT)\n\n\nshared_ptr&lt;Window&gt; CreateWindow(const WString&amp; title, const int x, const int y, const int width, const int height, shared_ptr&lt;Window&gt; parent, const WindowStyle style = WINDOW_DEFAULT)\n\n\n\n\n\nParameter\nDescription\n\n\n\n\ntitle\ntext to display in the titlebar\n\n\nx\ninitial x position of the window\n\n\ny\ninitial y position of the window\n\n\nwidth\ninitial width of the window\n\n\nheight\ninitial height of the window\n\n\ndisplay\nDisplay to create the window on\n\n\nparent\nparent Window\n\n\nstyle\ncan be any combination of WINDOW_TITLEBAR, WINDOW_RESiZABLE, WINDOW_CENTER, WINDOW_HIDDEN, WINDOW_CHILD and WINDOW_CLIENTCOORDS\n\n\n\n\n\n", "tags": "CreateWindow", "url": "https://www.ultraengine.com/learn/CreateWindow?lang=cpp"},
{"title": "Window::FlushKeys", "text": "\n\nThis method resets the key button states.\n\n\nvoid FlushKeys()\n\n\n\n", "tags": "Window::FlushKeys", "url": "https://www.ultraengine.com/learn/Window_FlushKeys?lang=cpp"},
{"title": "Window::FlushMouse", "text": "\n\nThis method resets the mouse button states, the mouse wheel position, and the raw mouse movement.\n\n\nvoid FlushMouse()\n\n\n\n", "tags": "Window::FlushMouse", "url": "https://www.ultraengine.com/learn/Window_FlushMouse?lang=cpp"},
{"title": "Window::GetHandle", "text": "\n\nThis method returns a handle to the system window object.\n\n\nHWND GetHandle()\n::Window GetHandle()\nNSWindow* GetHandle()\n\n\nReturns the system window handle.\n\n\n", "tags": "Window::GetHandle", "url": "https://www.ultraengine.com/learn/Window_GetHandle?lang=cpp"},
{"title": "Window::GetHidden", "text": "\n\nThis method gets the window visibility state.\n\n\nbool GetHidden()\n\n\nReturns true if the window is visible, otherwise false is returned.\n", "tags": "Window::GetHidden", "url": "https://www.ultraengine.com/learn/Window_GetHidden?lang=cpp"},
{"title": "Window::GetMousePosition", "text": "\n\nThis method returns the mouse position relative to the window, in integer screen coordinates.\n\n\niVec3 MousePosition()\n\n\nReturns the mouse screen position in the x and y components of the vector, and the mouse wheel position in the z component.\n\nThis method uses integer coordinates. For higher-precision mouse input use the MouseMovement method.\n\n\n", "tags": "Window::GetMousePosition", "url": "https://www.ultraengine.com/learn/Window_GetMousePosition?lang=cpp"},
{"title": "Window::GetPosition", "text": "\n\nThis method returns the position of a window in screen coordinates.\n\n\niVec2 GetPosition()\n\n\nReturns the window position.\n\n\n", "tags": "Window::GetPosition", "url": "https://www.ultraengine.com/learn/Window_GetPosition?lang=cpp"},
{"title": "Window::GetSize", "text": "\n\nThis method returns the dimensions of a window. To retrieve the area inside the window excluding the titlebar and borders, use the ClientSize method.\n\n\niVec2 ClientSize()\n\n\nReturns the window size.\n\n\n", "tags": "Window::GetSize", "url": "https://www.ultraengine.com/learn/Window_GetSize?lang=cpp"},
{"title": "Window::KeyDown", "text": "\n\nReturns the current key state of the specified key.\n\n\nbool KeyDown(const KeyCode key)\n\n\n\n\nParameter\nDescription\n\n\n\n\nkey\ncode of the key to check the state of\n\n\n\n\nReturns true if the specified key is currently pressed, otherwise false is returned.\n\n\n", "tags": "Window::KeyDown", "url": "https://www.ultraengine.com/learn/Window_KeyDown?lang=cpp"},
{"title": "Window::KeyHit", "text": "\n\nReturns true if the specified key has been pressed since the last call to KeyHit, or since the creation of the window.\n\n\nbool KeyHit(const KeyCode key)\n\n\n\n\nParameter\nDescription\n\n\n\n\nkey\ncode of the key to check the state of\n\n\n\n\nReturns true if the specified key has been pressed, otherwise false is returned.\n\nThis method uses a global state to track whether any KEYDOWN events have occurred since the last call. If two different parts of your program both call this method, only one of them will detect that the key was pressed. The event system should be used for finer control over keyboard input.\n\n\n", "tags": "Window::KeyHit", "url": "https://www.ultraengine.com/learn/Window_KeyHit?lang=cpp"},
{"title": "Window::MouseDown", "text": "\n\nReturns the current press state of the specified mouse button.\n\n\nbool MouseDown(const MouseButton button)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbutton\nmouse button to test, can be MOUSE_LEFT, MOUSE_RIGHT, or MOUSE_MIDDLE\n\n\n\n\nReturns true if the specified mouse button is currently pressed, otherwise false is returned.\n\n\n", "tags": "Window::MouseDown", "url": "https://www.ultraengine.com/learn/Window_MouseDown?lang=cpp"},
{"title": "Window::MouseHit", "text": "\n\nReturns true if the specified mouse button has been pressed since the last call to the method, or since the creation of the window.\n\n\nbool MouseHit(const MouseButton button)\n\n\n\n\nParameter\nDescription\n\n\n\n\nbutton\nmouse button to test, can be MOUSE_LEFT, MOUSE_RIGHT, or MOUSE_MIDDLE\n\n\n\n\nReturns true if the specified mouse button has been pressed, otherwise false is returned.\n\nThis method uses a global state to track whether any MOUSEDOWN events have occurred since the last call. If two different parts of your program both call this method, only one of them will detect that the button was pressed. The event system should be used for finer control over mouse input.\n\n\n", "tags": "Window::MouseHit", "url": "https://www.ultraengine.com/learn/Window_MouseHit?lang=cpp"},
{"title": "Window::Maximize", "text": "\n\nThis method maximizes the window to fill the entire dekstop client area.\n\n\nvoid Maximize()\n\n\nThe window should be created with the WINDOW_RESIZABLE style flag included.\n\n\n", "tags": "Window::Maximize", "url": "https://www.ultraengine.com/learn/Window_Maximize?lang=cpp"},
{"title": "Window::Maximized", "text": "\n\nThis method returns true is the window is maximized.\n\n\nbool Maximized()\n\n\nReturns true if the window is maximized, otherwise false is returned.\n\n", "tags": "Window::Maximized", "url": "https://www.ultraengine.com/learn/Window_Maximized?lang=cpp"},
{"title": "Window::Minimize", "text": "\n\nThis method minimizes the window to the desktop taskbar.\n\n\nvoid Minimize()\n\n\n\n", "tags": "Window::Minimize", "url": "https://www.ultraengine.com/learn/Window_Minimize?lang=cpp"},
{"title": "Window::Minimized", "text": "\n\nThis method returns true is the window is minimized.\n\n\nbool Minimized()\n\n\nReturns true if the window is minimized, otherwise false is returned.\n", "tags": "Window::Minimized", "url": "https://www.ultraengine.com/learn/Window_Minimized?lang=cpp"},
{"title": "Window::Restore", "text": "\n\nThis method restores a window that is minimized or maximized to its previous position and size.\n\n\nvoid Restore()\n\n\n\n", "tags": "Window::Restore", "url": "https://www.ultraengine.com/learn/Window_Restore?lang=cpp"},
{"title": "Window::SetCursor", "text": "\n\nThis method sets the window cursor.\n\n\nvoid SetCursor(const MouseCursor cursor)\n\n\n\n\nParameter\nDescription\n\n\n\n\ncursor\nmouse icon to set, can be any of the values in the list below\n\n\n\n\nThe cursor can be any of the values below:\n\nCURSOR_NONE\nCURSOR_DEFAULT\nCURSOR_HAND\nCURSOR_CROSS\nCURSOR_IBEAM\nCURSOR_SIZENS\nCURSOR_SIZEWE\nCURSOR_SIZENESW\nCURSOR_SIZENWSE\nCURSOR_SIZEALL\nCURSOR_DRAG\nCURSOR_DRAGADD\nCURSOR_NO\n\nUse CURSOR_NONE to hide the mouse pointer.\n", "tags": "Window::SetCursor", "url": "https://www.ultraengine.com/learn/Window_SetCursor?lang=cpp"},
{"title": "Window::SetHidden", "text": "\n\nThis method hides a window.\n\n\nvoid SetHidden(const bool hide)\n\n\n\n\nParameter\nDescription\n\n\n\n\nhide\nwindow visibility\n\n\n\n\n\n", "tags": "Window::SetHidden", "url": "https://www.ultraengine.com/learn/Window_SetHidden?lang=cpp"},
{"title": "Window_SetMinSize", "text": "\n404: Not Found\n", "tags": "Window_SetMinSize", "url": "https://www.ultraengine.com/learn/Window_SetMinSize?lang=cpp"},
{"title": "Window::SetMousePosition", "text": "\n\nThis method moves the mouse pointer to the specified window coordinate.\n\n\nvoid SetMousePosition(const int x, const int y)\nvoid SetMousePosition(const iVec2&amp; coords)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nX component of the destination coordinates\n\n\ny\nY component of the destination coordinates\n\n\ncoords\ndestination coordinates\n\n\n\n\n\n", "tags": "Window::SetMousePosition", "url": "https://www.ultraengine.com/learn/Window_SetMousePosition?lang=cpp"},
{"title": "Window::SetShape", "text": "\n\nThis method sets the windows position and size.\n\n\nvoid SetShape(const int x, const int y, const int width, const int height)\nvoid SetShape(const iVec2&amp; position, const iVec2&amp; size)\n\n\n\n\n\nName\nDescription\n\n\n\n\nx\nX component of the new window screen position\n\n\ny\nY component of the new window screen position\n\n\nposition\nnew window screen position\n\n\nwidth\nX component of the new window size\n\n\nheight\nY component of the new window size\n\n\nsize\nnew window size\n\n\n\n\n\n", "tags": "Window::SetShape", "url": "https://www.ultraengine.com/learn/Window_SetShape?lang=cpp"},
{"title": "TransformCoord", "text": "\n\nThis function transforms a screen coordinate from one window to another, from a window to the desktop, or from the desktop to a window.\n\n\niVec2 TransformCoord(const int x, const int y, shared_ptr&lt;Window&gt; src, shared_ptr&lt;Window&gt; dst)\niVec2 TransformCoord(const iVec2&amp; coord, shared_ptr&lt;Window&gt; src, shared_ptr&lt;Window&gt; dst)\n\n\n\n\nParameter\nDescription\n\n\n\n\nx\nX component of the coordinate to transform\n\n\ny\nY component of the coordinate to transform\n\n\ncoord\ncoordinate to transform\n\n\nsrc\nsource window to transform the coordinate from, or NULL for the desktop\n\n\ndst\ndestination window to transform the coordinate to, or NULL for the desktop\n\n\n\n\nReturns the transformed coordinate relative to the destination window.\n\n\n", "tags": "TransformCoord", "url": "https://www.ultraengine.com/learn/TransformCoord?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Aabb", "text": "\n\nThis class describes an axis-aligned bounding box.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nAabb\nConstructor\nAabb()\n\n\nAabb\nConstructor\nAabb(const Vec3&amp; min, const Vec3&amp; max)\n\n\nAabb\nConstructor\nAabb(const float x0, const float y0, const float z0, const float x1, const float y1, const float z1)\n\n\nmin\nVec3\nMinimum extent of the bounding box.\n\n\nmax\nVec3\nMaximum extent of the bounding box.\n\n\ncenter\nVec3\nHalfway point between the minimum and maximum extents\n\n\nsize\nVec3\nDistance between the minimum and maximum extents\n\n\nradius\nfloat\nRadius of a sphere that complete encloses the bounding box.\n\n\n+=\nOperator\nExpands one Aabb to enclose another.\n\n\n+\nOperator\nExpands one Aabb to enclose another and returns the result.\n\n\nUpdate\nMethod\nCalculates the bounding box size, center, and radius from the minimum and maximum extents.\n\n\n\n", "tags": "Aabb", "url": "https://www.ultraengine.com/learn/Aabb?lang=cpp"},
{"title": "Aabb::Update", "text": "\n\nThis method calculates the bounding box size, center, and radius from the minimum and maximum extents.\n\n\nvoid Update()\n\n", "tags": "Aabb::Update", "url": "https://www.ultraengine.com/learn/Aabb_Update?lang=cpp"},
{"title": "iVec2", "text": "\n\nThis class describes a two-dimensional integer vector.\n\n\n\n\nName\nType\nDescription\n\n\n\n\nx, width\nint\nx component of the vector\n\n\ny, height\nint\ny component of the vector\n\n\niVec2\nConstructor\niVec2(const int x)\n\n\niVec2\nConstructor\niVec2(const int x, const int y)\n\n\n\n", "tags": "iVec2", "url": "https://www.ultraengine.com/learn/iVec2?lang=cpp"},
{"title": "iVec3", "text": "\n\nThis class describes a three-dimensional integer vector.\n\n\n\n\nName\nType\nDescription\n\n\n\n\nx\nint\nx component of the vector\n\n\ny\nint\ny component of the vector\n\n\nz\nint\nz component of the vector\n\n\niVec3\nConstructor\niVec3(const int x)\n\n\niVec3\nConstructor\niVec3(const int x, const int y, const int z)\n\n\n\n", "tags": "iVec3", "url": "https://www.ultraengine.com/learn/iVec3?lang=cpp"},
{"title": "iVec4", "text": "\n\nThis class describes a four-dimensional integer vector.\n\n\n\n\nName\nType\nDescription\n\n\n\n\nx\nint\nx component of the vector\n\n\ny\nint\ny component of the vector\n\n\nz, width\nint\nz component of the vector\n\n\nw, height\nint\nw component of the vector\n\n\niVec4()\nConstructor\n\n\n\niVec4(const int x)\nConstructor\n\n\n\niVec4(const int x, const int y, const int z, const int w)\nConstructor\n\n\n\n\n", "tags": "iVec4", "url": "https://www.ultraengine.com/learn/iVec4?lang=cpp"},
{"title": "Mat4", "text": "\n\nThis class describes a 4x4 matrix used for 3D orientations in space.\n\n\n\n\nName\nType\nDescription\n\n\n\n\ni\nVec4\nfirst matrix row\n\n\nj\nVec4\nsecond matrix row\n\n\nk\nVec4\nthird matrix row\n\n\nt\nVec4\nfourth matrix row\n\n\nMat4\nConstructor\nMat4()\n\n\nMat4\nConstructor\nMat4(const float scale)\n\n\nMat4\nConstructor\nMat4(const Vec4&amp; i, const Vec4&amp; j, const Vec4&amp; k, const Vec4&amp; t)\n\n\nMat4\nConstructor\nMat4(const Vec3&amp; translation, const Vec3&amp; rotation, const Vec3&amp; scale)\n\n\nMat4\nConstructor\nMat4(const Vec3&amp; translation, const Quat&amp; rotation, const Vec3&amp; scale)\n\n\nDeterminant\nMethod\ngets the matrix determinant\n\n\nGetQuaternion\nMethod\ngets the matrix rotation\n\n\nGetRotation\nMethod\ngets the matrix Euler rotation\n\n\nGetScale\nMethod\ngets the matrix scale\n\n\nGetTranslation\nMethod\ngets the matrix translation\n\n\nInverse\nMethod\ngets the inverse matrix\n\n\nNormalize\nMethod\ngets the normalized matrix\n\n\nTranspose\nMethod\ngets the transpose matrix\n\n\n\n", "tags": "Mat4", "url": "https://www.ultraengine.com/learn/Mat4?lang=cpp"},
{"title": "Mat4::Determinant", "text": "\n\nThis method returns the matrix determinant.\n\nfloat Determinant()\n\nReturns the matrix determinant.\n", "tags": "Mat4::Determinant", "url": "https://www.ultraengine.com/learn/Mat4_Determinant?lang=cpp"},
{"title": "Mat4::GetQuaternion", "text": "\n\nThis method returns the matrix rotation as a quaternion.\n\n\nQuat GetRotation()\n\n\nReturns the matrix rotation.\n", "tags": "Mat4::GetQuaternion", "url": "https://www.ultraengine.com/learn/Mat4_GetQuaternion?lang=cpp"},
{"title": "Mat4::GetRotation", "text": "\n\nThis method returns the matrix rotation as a Euler rotation.\n\n\nVec3 GetRotation()\n\n\nReturns the matrix rotation.\n", "tags": "Mat4::GetRotation", "url": "https://www.ultraengine.com/learn/Mat4_GetRotation?lang=cpp"},
{"title": "Mat4::GetScale", "text": "\n\nThis method returns the matrix scale.\n\n\nVec3 GetScale()\n\n\nReturns the matrix scale.\n", "tags": "Mat4::GetScale", "url": "https://www.ultraengine.com/learn/Mat4_GetScale?lang=cpp"},
{"title": "Mat4::GetTranslation", "text": "\n\nThis method returns the matrix translation.\n\n\nVec3 GetTranslation()\n\n\nReturns the matrix translation.\n", "tags": "Mat4::GetTranslation", "url": "https://www.ultraengine.com/learn/Mat4_GetTranslation?lang=cpp"},
{"title": "Mat4::Inverse", "text": "\n\nThis method returns the inverse matrix.\n\n\nMat4 Inverse()\n\n\nReturns the inverse matrix.\n", "tags": "Mat4::Inverse", "url": "https://www.ultraengine.com/learn/Mat4_Inverse?lang=cpp"},
{"title": "Mat4::Normalize", "text": "\n\nThis method returns the normalized matrix.\n\n\nMat4 Normalize()\n\n\nReturns the normalized matrix.\n", "tags": "Mat4::Normalize", "url": "https://www.ultraengine.com/learn/Mat4_Normalize?lang=cpp"},
{"title": "Mat4::Transpose", "text": "\n\nThis method returns the transpose matrix.\n\n\nMat4 Transpose()\n\n\nReturns the transpose matrix.\n", "tags": "Mat4::Transpose", "url": "https://www.ultraengine.com/learn/Mat4_Transpose?lang=cpp"},
{"title": "Plane", "text": "\n\nA plane is an infinite flat surface in 3D space with a direction and distance from the origin.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nx, y, z\nfloat\nnormal\n\n\nd\nfloat\ndistance from the origin\n\n\nPlane\nConstructor\nPlane(const float x, const float y, const float z, const float d)\n\n\nPlane\nConstructor\nPlane(const Vec3 point, const Vec3 normal)\n\n\nPlane\nConstructor\nPlane(const Vec3 a, const Vec3 b, const Vec3 c)\n\n\nDistanceToPoint\nMethod\ngets the shortest distance between the plane and a point\n\n\nIntersectsLine\nMethod\ntest if the plane intersects a line or line segment\n\n\n\n", "tags": "Plane", "url": "https://www.ultraengine.com/learn/Plane?lang=cpp"},
{"title": "Plane::DistanceToPoint", "text": "\n\nThie method gets the shortest distance between the plane and a point.\n\n\nfloat DistanceToPoint(const Vec3&amp; point)\n\n\nReturns the distance to the specified point.\n", "tags": "Plane::DistanceToPoint", "url": "https://www.ultraengine.com/learn/Plane_DistanceToPoint?lang=cpp"},
{"title": "Plane::IntersectsLine", "text": "\n\nThis method tests if the plane intersects a line or line segment.\n\n\nbool IntersectsLine(const Vec3&amp; p0, const Vec3&amp; p1, Vec3&amp; result, const bool twosided = false, const bool infinite = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\np0\nstarting point\n\n\np1\nend point\n\n\nresult\nstorage for intersection point\n\n\ntwosided\nif true the plane will be considered two-sided and the direction of the line will not matter\n\n\ninfinite\nif true then an infinite line will be tested, otherwise only the line segment will be tested\n\n\n\n\nIf the line intersects the plane true is returned and the intersection point is stored in result, otherwise false is returned.\n", "tags": "Plane::IntersectsLine", "url": "https://www.ultraengine.com/learn/Plane_IntersectsLine?lang=cpp"},
{"title": "Quat", "text": "\n\nThis class describes a quaternion rotation. Quaternions are more accurate than Euler angles and do not suffer from Gimbal lock, but they more difficult to intuitively understand.\n\n\n\n\nName\nType\nDescription\n\n\n\n\nQuat\nConstructor\nQuat(const float x, const float y, const float z, const float w)\n\n\nQuat\nConstructor\nQuat(const Vec3&amp; euler)\n\n\nQuat\nConstructor\nQuat(const float angle, const Vec3&amp; axis)\n\n\nx\nfloat\nX component\n\n\ny\nfloat\nY component\n\n\nz\nfloat\nZ component\n\n\nw\nfloat\nW component\n\n\nInverse\nMethod\ngets the inverse quaternion\n\n\nNormalize\nMethod\ngets the normalized quaternion\n\n\nSlerp\nMethod\nspherical linear interpolation for smooth transitions between 3D rotations\n\n\nToEuler\nMethod\nconverts the quaternion to a Euler angle\n\n\n\n", "tags": "Quat", "url": "https://www.ultraengine.com/learn/Quat?lang=cpp"},
{"title": "Quat_Inverse", "text": "\n404: Not Found\n", "tags": "Quat_Inverse", "url": "https://www.ultraengine.com/learn/Quat_Inverse?lang=cpp"},
{"title": "Quat::Normalize", "text": "\n\nThis method returns the normalized quaternion.\nQuat Normalize()\n\nReturns the normalized quaternion.\n", "tags": "Quat::Normalize", "url": "https://www.ultraengine.com/learn/Quat_Normalize?lang=cpp"},
{"title": "Quat::Slerp", "text": "\n\nThis method performs spherical linear interpolation to interpolate between two rotations.\n\n\nQuat Slerp(const Quat&amp; r0, const Quat&amp; r1, const float blend)\n\n\n\n\nParameter\nDescription\n\n\n\n\nr0\nstarting rotation\n\n\nr1\nend rotation\n\n\nblend\ninterpolation amount between 0 and 1\n\n\n\n\nReturns the interpolated rotation.\n", "tags": "Quat::Slerp", "url": "https://www.ultraengine.com/learn/Quat_Slerp?lang=cpp"},
{"title": "Quat::ToEuler", "text": "\n\nThis method returns the quaternion as a Euler rotation.\n\n\nVec3 ToEuler()\n\n\nReturns a Euler rotation.\n\nQuaternion to Euler conversion is a potentially lossy operation.\n", "tags": "Quat::ToEuler", "url": "https://www.ultraengine.com/learn/Quat_ToEuler?lang=cpp"},
{"title": "Vec2", "text": "\n\nThis structure describes a two-dimensional vector.\n\n\n\n\nName\nType\nDescription\n\n\n\n\nx\nfloat\nx component of the vector\n\n\ny\nfloat\ny component of the vector\n\n\nVec2\nConstructor\nVec2(const float x)\n\n\nVec2\nConstructor\nVec2(const float x, const float y)\n\n\nLength\nMethod\nreturns the length of the vector\n\n\nNormalize\nMethod\nreturns the normalized vector\n\n\n\n", "tags": "Vec2", "url": "https://www.ultraengine.com/learn/Vec2?lang=cpp"},
{"title": "Vec2::Length", "text": "\n\nThis method returns the length of the vector.\n\n\nfloat Length()\n\n\nReturns the length of the vector.\n\n\n", "tags": "Vec2::Length", "url": "https://www.ultraengine.com/learn/Vec2_Length?lang=cpp"},
{"title": "Vec2::Normalize", "text": "\n\nThis method returns the normalized vector. The resulting vector will have a length of one.\n\n\nVec2 Normalize()\n\n\nReturns the normalized vector. If the magnitude of this vector is zero, a vector with zero length will be returned.\n\n\n", "tags": "Vec2::Normalize", "url": "https://www.ultraengine.com/learn/Vec2_Normalize?lang=cpp"},
{"title": "Vec3", "text": "\n\nThis structure describes a three-dimensional vector.\n\n\n\n\nName\nType\nDescription\n\n\n\n\nx, r\nfloat\nx component of the vector\n\n\ny, g\nfloat\ny component of the vector\n\n\nz, b\nfloat\nz component of the vector\n\n\nVec3\nConstructor\nVec3(const float x)\n\n\nVec3\nConstructor\nVec3(const float x, const float y, const float z)\n\n\nDistanceToPoint\nMethod\n\n\n\nDot\nMethod\ngets the distance to a point\n\n\nCross\nMethod\ngets the vector cross product\n\n\nHsl\nMethod\nconverts an RGB value to HSL\n\n\nInverse\nMethod\ngets the inverse vector\n\n\nLength\nMethod\ngets the vector length\n\n\nNormalize\nMethod\ngets the normalized vector\n\n\nReflect\nMethod\ngets the reflected vector\n\n\nRgb\nMethod\nconverts an HSL value to RGB\n\n\n\n", "tags": "Vec3", "url": "https://www.ultraengine.com/learn/Vec3?lang=cpp"},
{"title": "Vec3::DistanceToPoint", "text": "\n\nThis method returns the distance between this point and the specified position.\n\n\nVec3 DistanceToPoint(const Vec3&amp; position)\n\n\n\n\nParameter\nDescription\n\n\n\n\nposition\nposition to return the distance to.\n\n\n\n\nReturns the distance between this point and the specified position.\n\n\n", "tags": "Vec3::DistanceToPoint", "url": "https://www.ultraengine.com/learn/Vec3_DistanceToPoint?lang=cpp"},
{"title": "Vec3::Dot", "text": "\n\nThis method returns the dot product of this vector and the specified vector.\n\n\nfloat Dot(const Vec3&amp; v)\n\n\n\n\nParameter\nDescription\n\n\n\n\nv\nvector to return the dot product of.\n\n\n\n\nThe dot product is a measure of how similar two vector are. If the vectors point in the opposite direction, the dodt product is -1. If the two vector are identical the dot product is 1. If the two vector are perpindicular, the dot product is 0.\n\nReturns the dot product of this vector and the specified vector.\n\n\n", "tags": "Vec3::Dot", "url": "https://www.ultraengine.com/learn/Vec3_Dot?lang=cpp"},
{"title": "Vec3::Hsl", "text": "\n\nThis method converts an RGB color to an HSL value.\n\n\nVec3 Hsl()\n\n\nReturns the color stored as hue, saturation, and lightness.\n", "tags": "Vec3::Hsl", "url": "https://www.ultraengine.com/learn/Vec3_Hsl?lang=cpp"},
{"title": "Vec3::Inverse", "text": "\n\nThis method returns the inverse of this vector.\n\n\nVec3 Inverse()\n\n\nReturns the inverse vector.\n\n\n", "tags": "Vec3::Inverse", "url": "https://www.ultraengine.com/learn/Vec3_Inverse?lang=cpp"},
{"title": "Vec3::Length", "text": "\n\nThis method returns the length of the vector.\n\n\nfloat Length()\n\n\nReturns the length of the vector.\n\n\n", "tags": "Vec3::Length", "url": "https://www.ultraengine.com/learn/Vec3_Length?lang=cpp"},
{"title": "Vec3::Normalize", "text": "\n\nThis method returns the normalized vector. The resulting vector will have a length of one.\n\n\nVec3 Normalize()\n\n\nReturns the normalized vector. If the magnitude of this vector is zero, a vector with zero length will be returned.\n\n\n", "tags": "Vec3::Normalize", "url": "https://www.ultraengine.com/learn/Vec3_Normalize?lang=cpp"},
{"title": "Vec3::Cross", "text": "\n\nThis method returns the cross product of this vector and the specified vector.\n\n\nVec3 Cross(const Vec3&amp; v)\n\n\n\n\nParameter\nDescription\n\n\n\n\nv\nvector to return the cross product of.\n\n\n\n\nReturns the cross product of this vector and the specified vector.\n\nThe cross product calculates a vector that is perpindicular to both input vectors. If both vectors are the same this method will return a vector with a length of zero.\n\n\n", "tags": "Vec3::Cross", "url": "https://www.ultraengine.com/learn/Vec3_Cross?lang=cpp"},
{"title": "Vec3::Reflect", "text": "\n\nThis method bounces this vector off a specified normal vector and returns the result.\n\n\nVec3 Reflect(const Vec3&amp; normal)\n\n\n\n\nParameter\nDescription\n\n\n\n\nnormal\nsurface normal to bounce the vector off of.\n\n\n\n\nReturns the reflected vector.\n\n\n", "tags": "Vec3::Reflect", "url": "https://www.ultraengine.com/learn/Vec3_Reflect?lang=cpp"},
{"title": "Vec3::Rgb", "text": "\n\nThis method converts an HSL color to an RGB value.\n\n\nVec3 Rgb()\n\n\nReturns the HSL color as red, green, and blue components.\n", "tags": "Vec3::Rgb", "url": "https://www.ultraengine.com/learn/Vec3_Rgb?lang=cpp"},
{"title": "Vec4", "text": "\n\nThis class describes a four-dimensional vector or an RGBA color.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nx, r\nfloat\nx component of the vector, or red channel of color\n\n\ny, g\nfloat\ny component of the vector, or green channel of color\n\n\nz, b\nfloat\nz component of the vector, or blue channel of color\n\n\nw, a\nfloat\nw component of the vector, or alpha channel of color\n\n\nVec4\nConstructor\nVec4(const float x)\n\n\nVec4\nConstructor\nVec4(const float x, const float y)\n\n\nVec4\nConstructor\nVec4(const float x, const float y, const float z)\n\n\nVec4\nConstructor\nVec4(const float x, const float y, const float z, const float w)\n\n\nVec4\nConstructor\nVec4(const Vec3&amp; v, const float w)\n\n\n\n", "tags": "Vec4", "url": "https://www.ultraengine.com/learn/Vec4?lang=cpp"},
{"title": "Abs", "text": "\n\nThis functions returns the absolute value of a number.\n\n\nfloat Abs(const float value)\nfloat Abs(const double value)\nfloat Abs(const int value)\n\n\nReturns the absolute value.\n\n\n", "tags": "Abs", "url": "https://www.ultraengine.com/learn/Abs?lang=cpp"},
{"title": "ACos", "text": "\n\nThis function returns the arc cosine of the specified value.\n\n\nfloat ACos(const float value)\ndouble ACos(const double value)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvalue\ncosine value\n\n\n\n\nReturns the arc cosine.\n\n\n", "tags": "ACos", "url": "https://www.ultraengine.com/learn/ACos?lang=cpp"},
{"title": "Alpha", "text": "\n\nExtracts the alpha component from a packed RGBA value.\n\n\nunsigned char Alpha(const unsigned int rgba)\n\n\nReturns the alpha component of the color.\n\n\n", "tags": "Alpha", "url": "https://www.ultraengine.com/learn/Alpha?lang=cpp"},
{"title": "ASin", "text": "\n\nThis function returns the arc sine of the specified value.\n\n\nfloat ASin(const float value)\ndouble ASin(const double value)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvalue\nsine value\n\n\n\n\nReturns the arc sine.\n\n\n", "tags": "ASin", "url": "https://www.ultraengine.com/learn/ASin?lang=cpp"},
{"title": "ATan", "text": "\n\nThis function returns the arc tangent of the specified value.\n\n\nfloat ATan(const float value)\nfloat ATan(const float y, const float x)\ndouble ATan(const double value)\ndouble ATan(const double y, const double x)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvalue\ntangent value\n\n\ny\nY component of the vector\n\n\nx\nX component of the vector\n\n\n\n\nReturns the arc tangent, or the angle given by the vector XY.\n\n\n", "tags": "ATan", "url": "https://www.ultraengine.com/learn/ATan?lang=cpp"},
{"title": "Blue", "text": "\n\nExtracts the red component from a packed RGBA value.\n\n\nunsigned char Blue(const unsigned int rgba)\n\n\nReturns the blue component of the color.\n\n\n", "tags": "Blue", "url": "https://www.ultraengine.com/learn/Blue?lang=cpp"},
{"title": "Ceil", "text": "\n\nThis functions rounds a decimal number up to the upper integer and returns the result.\n\n\nint Ceil(const float f)\nint64_t Ceil(const double f)\n\n\nReturns the upper integer value.\n\n\n", "tags": "Ceil", "url": "https://www.ultraengine.com/learn/Ceil?lang=cpp"},
{"title": "Clamp", "text": "\n\nThis function constrains a value between a lower and upper limit.\n\n\nfloat Clamp(const float value, const float minimum, const float maximum)\ndouble Clamp(const double value, const double minimum, const double maximum)\nint Clamp(const int value, const int minimum, const int maximum)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvalue\nvalue to constrain\n\n\nminimum\nlower limit of the return value\n\n\nmaximum\nupper limit of the return value\n\n\n\n\nThe closest value to the input value that is between the specified minimum and maximum will be returned.\n\n\n", "tags": "Clamp", "url": "https://www.ultraengine.com/learn/Clamp?lang=cpp"},
{"title": "Cos", "text": "\n\nThis function returns the cosine of the specified angle.\n\n\nfloat Cos(const float angle)\ndouble Cos(const double angle)\n\n\n\n\nParameter\nDescription\n\n\n\n\nangle\nangle, in degrees\n\n\n\n\nReturns the cosine of the specified angle.\n\n\n", "tags": "Cos", "url": "https://www.ultraengine.com/learn/Cos?lang=cpp"},
{"title": "Dec", "text": "\n\nThis function converts a hexadecimal value into a decimal number and returns the result.\n\n\nuint64_t Dec(const String&amp; hex)\n\n\n\n\nParameter\nDescription\n\n\n\n\ndec\ndecimal number\n\n\n\n\nReturns a string containing the hexadecimal number.\n\n\n", "tags": "Dec", "url": "https://www.ultraengine.com/learn/Dec?lang=cpp"},
{"title": "Degrees", "text": "\n\nThis function converts an angle from radians to degrees.\n\n\nfloat Radians(const float angle)\ndouble Radians(const double angle)\n\n\n\n\nParameter\nDescription\n\n\n\n\nangle\nangle in radians\n\n\n\n\nReturns the angle, converted to degrees.\n\n\n", "tags": "Degrees", "url": "https://www.ultraengine.com/learn/Degrees?lang=cpp"},
{"title": "DeltaAngle", "text": "\n\nThis function returns the smallest angle between two specified angles.\n\n\nfloat DeltaAngle(const float angle0, const float angle1)\ndouble DeltaAngle(const double angle0, const double angle1)\n\n\nReturns the smallest angle between the two angles, in degrees.\n\n\n", "tags": "DeltaAngle", "url": "https://www.ultraengine.com/learn/DeltaAngle?lang=cpp"},
{"title": "Floor", "text": "\n\nThis functions rounds a decimal number down to the lower integer and returns the result.\n\n\nint Floor(const float f)\nint64_t Floor(const double f)\n\n\nReturns the lower integer value.\n\n\n", "tags": "Floor", "url": "https://www.ultraengine.com/learn/Floor?lang=cpp"},
{"title": "Green", "text": "\n\nExtracts the green component from a packed RGBA value.\n\n\nunsigned char Green(const unsigned int rgba)\n\n\nReturns the green component of the color.\n\n\n", "tags": "Green", "url": "https://www.ultraengine.com/learn/Green?lang=cpp"},
{"title": "Hex", "text": "\n\nThis function converts a decimal value into a hexadecimal number and returns the result.\n\n\nString Hex(const uint64_t dec)\n\n\n\n\nParameter\nDescription\n\n\n\n\ndec\ndecimal number\n\n\n\n\nReturns a string containing the hexadecimal number.\n\n\n", "tags": "Hex", "url": "https://www.ultraengine.com/learn/Hex?lang=cpp"},
{"title": "Max", "text": "\n\nThis function returns the maximum of two specified values.\n\n\nfloat Max(const float value0, const float value1)\ndouble Max(const double value0, const double value1)\nint Max(const int value0, const int value1)\n\n\nReturns the highest of the two specified values.\n\n\n", "tags": "Max", "url": "https://www.ultraengine.com/learn/Max?lang=cpp"},
{"title": "Min", "text": "\n\nThis function returns the minimum of two specified values.\n\n\nfloat Min(const float value0, const float value1)\ndouble Min(const double value0, const double value1)\nint Min(const int value0, const int value1)\n\n\nReturns the lowest of the two specified values.\n\n\n", "tags": "Min", "url": "https://www.ultraengine.com/learn/Min?lang=cpp"},
{"title": "Mix", "text": "\n\nThis function performs a linear interpolation and returns the result.\n\n\nfloat Mix(const float value0, const float value1, const float d)\ndouble Mix(const double value0, const double value1, const double d)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvalue0\nfirst value\n\n\nvalue1\nsecond value\n\n\nd\ninterpolation amount\n\n\n\n\nReturns the result of the linear interpolation.\n\n\n", "tags": "Mix", "url": "https://www.ultraengine.com/learn/Mix?lang=cpp"},
{"title": "MixAngle", "text": "\n\nThis function performs a linear interpolation between two angles and returns the result.\n\n\nfloat MixAngle(const float angle0, const float angle1, const float d)\ndouble MixAngle(const double angle0, const double angle1, const double d)\n\n\n\n\nParameter\nDescription\n\n\n\n\nangle0\nfirst value\n\n\nangle1\nsecond value\n\n\nd\ninterpolation amount\n\n\n\n\nReturns the result of the linear interpolation.\n\nFor interpolation between full 3D rotations, use the Quat::Slerp method.\n", "tags": "MixAngle", "url": "https://www.ultraengine.com/learn/MixAngle?lang=cpp"},
{"title": "Mod", "text": "\n\nThis function performs a modulus operation and returns the result.\n\n\nfloat Mod(const float value, const float divisor)\ndouble Mod(const double value, const double divisor)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvalue\nvalue to determine the modulus for\n\n\ndivisor\nvalue to divide by\n\n\n\n\nReturns the result of the modulus operation.\n\n\n", "tags": "Mod", "url": "https://www.ultraengine.com/learn/Mod?lang=cpp"},
{"title": "MoveTowards", "text": "\n\nThis function increments one value towards a target at a steady rate.\n\n\nfloat MoveTowards(const float start, const float stop, const float amount)\ndouble MoveTowards(const double start, const double stop, const double amount)\n\n\n\n\nParameter\nDescription\n\n\n\n\nstart\nbeginning value\n\n\nstop\ndestination value\n\n\namount\nmaximum distance to move\n\n\n\n\nReturns the incremented value. If the difference between the values is less than amount then stop will be returned.\n", "tags": "MoveTowards", "url": "https://www.ultraengine.com/learn/MoveTowards?lang=cpp"},
{"title": "Radians", "text": "\n\nThis function converts an angle from degrees to radians.\n\n\nfloat Radians(const float angle)\ndouble Radians(const double angle)\n\n\n\n\nParameter\nDescription\n\n\n\n\nangle\nangle in degrees\n\n\n\n\nReturns the angle, converted to radians.\n\n\n", "tags": "Radians", "url": "https://www.ultraengine.com/learn/Radians?lang=cpp"},
{"title": "Random", "text": "\n\nThis function returns a psuedorandom value within the specified range. If no range is specified, the result will be between 0 and 1.\n\n\nfloat Random(const float maxima = 1.0f)\nfloat Random(const float minima, const float maxima)\n\n\n\n\nParameter\nDescription\n\n\n\n\nminima\nminimum value that can be returned\n\n\nmaxima\nmaximum value that can be returned\n\n\n\n\nReturns a psuedorandom number.\n\n\n", "tags": "Random", "url": "https://www.ultraengine.com/learn/Random?lang=cpp"},
{"title": "Red", "text": "\n\nExtracts the red component from a packed RGBA value.\n\n\nunsigned char Red(const unsigned int rgba)\n\n\nReturns the red component of the color.\n\n\n", "tags": "Red", "url": "https://www.ultraengine.com/learn/Red?lang=cpp"},
{"title": "Rgba", "text": "\n\nThis function combines four 8-bit color channels into a single packed RGBA color.\n\n\nunsigned int Rgba(const unsigned char r, const unsigned char g, const unsigned char b, const unsigned char a = 255)\n\n\n\n\nParameter\nDescription\n\n\n\n\nr\nred component\n\n\ng\ngreen component\n\n\nb\nblue component\n\n\na\nalpha component\n\n\n\n\nReturns an RGBA color packed into a single integer. The individual color channel values can be extracted with the Red, Green, Blue, and Alpha functions.\n\n\n", "tags": "Rgba", "url": "https://www.ultraengine.com/learn/Rgba?lang=cpp"},
{"title": "Round", "text": "\n\nThis functions rounds a decimal number off to the nearest integer and returns the result.\n\n\nint Round(const float f)\nint64_t Round(const double f)\n\n\nReturns the nearest integer value.\n\n\n", "tags": "Round", "url": "https://www.ultraengine.com/learn/Round?lang=cpp"},
{"title": "Seed", "text": "\n\nThis functions sets the seed for psuedorandom number calculation.\n\n\nvoid Seed(const int seed)\n\n\n\n", "tags": "Seed", "url": "https://www.ultraengine.com/learn/SeedRandom?lang=cpp"},
{"title": "Sin", "text": "\n\nThis function returns the sine of the specified angle.\n\n\nfloat Sin(const float angle)\ndouble Sin(const double angle)\n\n\n\n\nParameter\nDescription\n\n\n\n\nangle\nangle, in degrees\n\n\n\n\nReturns the sine of the specified angle.\n\n\n", "tags": "Sin", "url": "https://www.ultraengine.com/learn/Sin?lang=cpp"},
{"title": "Tan", "text": "\n\nThis function returns the tangent of the specified angle.\n\n\nfloat Tan(const float angle)\ndouble Tan(const double angle)\n\n\n\n\nParameter\nDescription\n\n\n\n\nangle\nangle, in degrees\n\n\n\n\nReturns the tangent of the specified angle.\n", "tags": "Tan", "url": "https://www.ultraengine.com/learn/Tan?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Buffer", "text": "\n\nThis class provides an interface for allocating, writing to, and reading from blocks of memory.\nBase class: Object\n\n\n\nProperty\nType\nDescription\n\n\n\n\nClear\nMethod\n\n\n\nCopy\nMethod\n\n\n\nData\nMethod\n\n\n\nGetSize\nMethod\n\n\n\nPeekByte\nMethod\n\n\n\nPeekDouble\nMethod\n\n\n\nPeekInt\nMethod\n\n\n\nPeekFloat\nMethod\n\n\n\nPeekShort\nMethod\n\n\n\nPeekString\nMethod\n\n\n\nPeekWString\nMethod\n\n\n\nPokeByte\nMethod\n\n\n\nPokeDouble\nMethod\n\n\n\nPokeInt\nMethod\n\n\n\nPokeFloat\nMethod\n\n\n\nPokeShort\nMethod\n\n\n\nPokeString\nMethod\n\n\n\nPokeWString\nMethod\n\n\n\nResize\nMethod\n\n\n\nSave\nMethod\n\n\n\nCreateBuffer\nFunction\n\n\n\nCreateStaticBuffer\nFunction\n\n\n\nLoadBuffer\nFunction\n\n\n\n\n", "tags": "Buffer", "url": "https://www.ultraengine.com/learn/Buffer?lang=cpp"},
{"title": "Buffer::Clear", "text": "\n\nWhen a buffer is first created its contents are random. This method sets each byte in the allocated memory block to zero.\n\n\nvoid Clear()\n\n\n\n", "tags": "Buffer::Clear", "url": "https://www.ultraengine.com/learn/Buffer_Clear?lang=cpp"},
{"title": "Buffer::Copy", "text": "\n\nThis method copies the contents of this buffer to another one.\n\n\nvoid Copy(const uint64_t srcoffset, shared_ptr dst, const uint64_t dstoffset, const uint64_t size)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsrcoffset\noffset for the source buffer data, in bytes\n\n\ndst\ndestination buffer\n\n\ndstoffset\noffset for the destination buffer data, in bytes\n\n\nsize\nnumber of bytes to copy\n\n\n\n\nA runtime error will occur if the source or destination range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::Copy", "url": "https://www.ultraengine.com/learn/Buffer_Copy?lang=cpp"},
{"title": "CreateBuffer", "text": "\n\nThis function creates a new memory buffer object.\n\n\nshared_ptr&lt;Buffer&gt; CreateBuffer(const uint64_t size)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsize\nsize of the allocated memory block\n\n\n\n\nIf the memory is allocated successfully a new buffer object is returned, otherwise NULL is returned.\n\n\n", "tags": "CreateBuffer", "url": "https://www.ultraengine.com/learn/CreateBuffer?lang=cpp"},
{"title": "CreateStaticBuffer", "text": "\n\nThis function creates a static buffer from an existing block of memory.\n\n\nshared_ptr&lt;Buffer&gt; CreateStaticBuffer(const void* data, const uint64_t size)\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata\npointer to a block of allocated memory\n\n\nsize\nsize of the allocated memory block\n\n\n\n\nReturns a new static buffer.\n\nCaution should be exercised when using this command. The buffer cannot be resized and will not free the memory when the buffer is deleted. If the memory block is freed elsewhere while still in use in this buffer it may cause errors.\n\n\n", "tags": "CreateStaticBuffer", "url": "https://www.ultraengine.com/learn/CreateStaticBuffer?lang=cpp"},
{"title": "Buffer::Data", "text": "\n\nThis method retrieves a pointer to the buffers allocated memory block.\n\n\nchar* Data()\n\n\nReturns a pointer to the allocated block of memory, or returns NULL is no memory is allocated.\n\nThis method exposes low-level memory allocations. If possible it is better to use the Buffer::Copy method, which has more built-in error checking.\nThe pointer this method returns may become invalid if the buffer is resized. To prevent errors, this method should be called each time the pointer is used. Do not store the returned pointer in a variable to be reused.\n\n\n", "tags": "Buffer::Data", "url": "https://www.ultraengine.com/learn/Buffer_Data?lang=cpp"},
{"title": "Buffer::GetSize", "text": "\n\nThis method retrieves the size of the allocated memory block.\n\nuint64_t GetSize()\n\nReturns the size of the allocated memory block, in bytes.\n\n\n", "tags": "Buffer::GetSize", "url": "https://www.ultraengine.com/learn/Buffer_GetSize?lang=cpp"},
{"title": "LoadBuffer", "text": "\n\nThis function loads a buffer from a file.\n\n\nshared_ptr&lt;Buffer&gt; LoadBuffer(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile name to load\n\n\nflags\noptional load settings\n\n\n\n\nReturns the loaded buffer if successful, otherwise NULL is returned.\n\n\n", "tags": "LoadBuffer", "url": "https://www.ultraengine.com/learn/LoadBuffer?lang=cpp"},
{"title": "Buffer::PeekByte", "text": "\n\nThis method returns a single byte from the memory buffer.\n\n\nunsigned char PeekByte(const uint64_t pos)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\n\n\nReturns a byte value.\n\nA runtime error will occur if the read range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PeekByte", "url": "https://www.ultraengine.com/learn/Buffer_PeekByte?lang=cpp"},
{"title": "Buffer::PeekDouble", "text": "\n\nThis method returns a double float value from the memory buffer.\n\n\ndouble PeekDouble(const uint64_t pos)\n\n\n\n\n\nName\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\n\n\nReturns a double float value.\n\nA runtime error will occur if the read range lies outside of the buffer extents. Note that a double value is 8 bytes, twice the size of an int or float value.\n\n\n", "tags": "Buffer::PeekDouble", "url": "https://www.ultraengine.com/learn/Buffer_PeekDouble?lang=cpp"},
{"title": "Buffer::PeekInt", "text": "\n\nThis method returns an integer value from the memory buffer.\n\n\nint PeekInt(const uint64_t pos)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\n\n\nReturns an integer value.\n\nA runtime error will occur if the read range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PeekInt", "url": "https://www.ultraengine.com/learn/Buffer_PeekInt?lang=cpp"},
{"title": "Buffer::PeekFloat", "text": "\n\nThis method returns a float value from the memory buffer.\n\n\nfloat PeekFloat(const uint64_t pos)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\n\n\nReturns a float value.\n\nA runtime error will occur if the read range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PeekFloat", "url": "https://www.ultraengine.com/learn/Buffer_PeekFloat?lang=cpp"},
{"title": "Buffer::PeekShort", "text": "\n\nThis method returns a short integer from the memory buffer.\n\n\nunsigned short PeekShort(const uint64_t pos)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\n\n\nReturns a short integer value.\n\nA runtime error will occur if the read range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PeekShort", "url": "https://www.ultraengine.com/learn/Buffer_PeekShort?lang=cpp"},
{"title": "Buffer::PeekString", "text": "\n\nThis method returns a string value from the memory buffer.\n\n\nstring PeekString(const uint64_t pos)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\n\n\nReturns a string value.\n\nA runtime error will occur if the read range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PeekString", "url": "https://www.ultraengine.com/learn/Buffer_PeekString?lang=cpp"},
{"title": "Buffer::PeekWString", "text": "\n\nThis method returns a wide string value from the memory buffer.\n\n\nstring PeekWString(const uint64_t pos)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\n\n\nReturns a wide string value.\n\nA runtime error will occur if the read range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PeekWString", "url": "https://www.ultraengine.com/learn/Buffer_PeekWString?lang=cpp"},
{"title": "Buffer::PokeByte", "text": "\n\nThis method inserts a single byte into a memory buffer.\n\n\nvoid PokeByte(const uint64_t pos, const unsigned char b)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\nb\nvalue to insert\n\n\n\n\nA runtime error will occur if the destination range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PokeByte", "url": "https://www.ultraengine.com/learn/Buffer_PokeByte?lang=cpp"},
{"title": "Buffer::PokeDouble", "text": "\n\nThis method inserts a double float value into the memory buffer.\n\n\nvoid PokeDouble(const uint64_t pos, const double f)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\nf\nvalue to insert\n\n\n\n\nA runtime error will occur if the destination range lies outside of the buffer extents. Note that a double value is 8 bytes, twice the size of an int or float value.\n\n\n", "tags": "Buffer::PokeDouble", "url": "https://www.ultraengine.com/learn/Buffer_PokeDouble?lang=cpp"},
{"title": "Buffer::PokeInt", "text": "\n\nThis method inserts a single integer into a memory buffer.\n\n\nvoid PokeInt(const uint64_t pos, const int i)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\ni\nvalue to insert\n\n\n\n\nA runtime error will occur if the destination range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PokeInt", "url": "https://www.ultraengine.com/learn/Buffer_PokeInt?lang=cpp"},
{"title": "Buffer::PokeFloat", "text": "\n\nThis method inserts a float value into the memory buffer.\n\n\nvoid PokeFloat(const uint64_t pos, const float f)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\nf\nvalue to insert\n\n\n\n\nA runtime error will occur if the destination range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PokeFloat", "url": "https://www.ultraengine.com/learn/Buffer_PokeFloat?lang=cpp"},
{"title": "Buffer::PokeShort", "text": "\n\nThis method inserts a single short integer into a memory buffer.\n\n\nvoid PokeShort(const uint64_t pos, const unsigned short i)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\ni\nvalue to insert\n\n\n\n\nA runtime error will occur if the destination range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PokeShort", "url": "https://www.ultraengine.com/learn/Buffer_PokeShort?lang=cpp"},
{"title": "Buffer::PokeString", "text": "\n\nThis method inserts a string into a memory buffer.\n\n\nvoid PokeString(const uint64_t pos, const string&amp; s)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\ns\nvalue to insert\n\n\n\n\nThe buffer must have enough space to store the string plus an extra NULL character. A runtime error will occur if the destination range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PokeString", "url": "https://www.ultraengine.com/learn/Buffer_PokeString?lang=cpp"},
{"title": "Buffer::PokeWString", "text": "\n\nThis method inserts a wide string into a memory buffer.\n\n\nvoid PokeString(const uint64_t pos, const wstring&amp; s)\n\n\n\n\n\nName\nDescription\n\n\n\n\npos\noffset from the start of the buffer, in bytes\n\n\ns\nvalue to insert\n\n\n\n\nThe buffer must have enough space to store the string plus an extra NULL short value. A runtime error will occur if the destination range lies outside of the buffer extents.\n\n\n", "tags": "Buffer::PokeWString", "url": "https://www.ultraengine.com/learn/Buffer_PokeWString?lang=cpp"},
{"title": "Buffer::Resize", "text": "\n\nThis method resizes the allocated memory block. The contents of the buffer will be retained in the new memory block.\n\n\nbool Resize(uint64_t size, const bool padding = true)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsize\nnew size of the memory block\n\n\npadding\nif set to true the new block may be automatically padded internally for faster resizing\n\n\n\n\nReturns true if the memory block is successfully resized, otherwise false is returned.\n\n\n", "tags": "Buffer::Resize", "url": "https://www.ultraengine.com/learn/Buffer_Resize?lang=cpp"},
{"title": "Buffer::Save", "text": "\n\nThie method saves the buffers contents to a file.\n\n\nbool Save(const WString&amp; path)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile name to save\n\n\n\n\nReturns true if the file is saved successfully, otherwise false is returned.\n\n\n", "tags": "Buffer::Save", "url": "https://www.ultraengine.com/learn/Buffer_Save?lang=cpp"},
{"title": "StreamBuffer", "text": "\n\nThis class provides an interface to manipulate part of a file as if it was a memory block, without loading the entire file into memory at once. This can be useful when working with very large files.\nBase class: Buffer\n\n\n\nProperty\nType\nDescription\n\n\n\n\nCreateStreamBuffer\nFunction\ncreates a new StreamBuffer object\n\n\n\n", "tags": "StreamBuffer", "url": "https://www.ultraengine.com/learn/StreamBuffer?lang=cpp"},
{"title": "CreateStreamBuffer", "text": "\n\nThis function creates a new StreamBuffer object. A StreamBuffer is a file stream that can be treated like a memory buffer.\n\n\nshared_ptr&lt;StreamBuffer&gt; CreateStreamBuffer(shared_ptr&lt;Stream&gt; stream, uint64_t pos, uint64_t size)\n\n\nReturns a new StreamBuffer object.\n\nIf the Buffer::Data() method is called on a StreamBuffer object, it will return NULL since the data is not loaded in memory.\n\n\n", "tags": "CreateStreamBuffer", "url": "https://www.ultraengine.com/learn/CreateStreamBuffer?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Mutex", "text": "\n\nBase class: Object\nA mutex (mutually exclusive) is used to defined a block of code that two threads may not execute at the same time. Use of mutexes should be minimized, as they can slow down multithreaded code so that it loses its advantages over single-threaded code.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nLock\nMethod\nlocks the mutex\n\n\nUnlock\nMethod\nunlocks the mutex\n\n\nCreateMutex\nFunction\ncreates a new mutex\n\n\n\n", "tags": "Mutex", "url": "https://www.ultraengine.com/learn/Mutex?lang=cpp"},
{"title": "CommandBuffer", "text": "\n\nThis class provides an interface to pass a stack of instructions in between threads.\n\n\n\nParameter\nType\nDescription\n\n\n\n\nAddCommand\nMethod\nadds a command to the buffer\n\n\nExecute\nMethod\nexecutes all commands\n\n\nCreateCommandBuffer\nFunction\nCreates a new command buffer object\n\n\n\n", "tags": "CommandBuffer", "url": "https://www.ultraengine.com/learn/CommandBuffer?lang=cpp"},
{"title": "CreateMutex", "text": "\n\nThis function creates a new Mutex object.\n\n\nshared_ptr&lt;Mutex&gt; CreateMutex()\n\n\nReturns a new Mutex object.\n\n", "tags": "CreateMutex", "url": "https://www.ultraengine.com/learn/CreateMutex?lang=cpp"},
{"title": "Mutex::Lock", "text": "\n\nThis method locks a mutex. When a mutex is locked, other threads that lock the mutex will pause until the locking thread calls Mutex::Unlock().\n\n\nvoid Lock()\n\n\nUse of mutexes locks should be minimized, as they can slow down multithreaded code so that it loses its advantages over single-threaded code.\n\n", "tags": "Mutex::Lock", "url": "https://www.ultraengine.com/learn/Mutex_Lock?lang=cpp"},
{"title": "Mutex::Unlock", "text": "\n\nThis method unlocks a mutex and allows other threads to execute the enclosed code.\n\n\nvoid Unlock()\n\n\nUse of mutexes locks should be minimized, as they can slow down multithreaded code so that it loses its advantages over single-threaded code.\n\n", "tags": "Mutex::Unlock", "url": "https://www.ultraengine.com/learn/Mutex_Unlock?lang=cpp"},
{"title": "Semaphore", "text": "\n\nBase class: Object\nThis class allows multithreaded applications to perform blocking operations. A semaphore can be signaled by one thread and waited on by another thread, for thread synchronization.\nA semaphore will provide faster threading performance than frequent mutex locks.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nSignal\nMethod\nsets the semaphore to the signaled state and releases any blocked threads waiting for it\n\n\nWait\nMethod\nwaits for the semaphore to reach the signaled state, and then resets it to the unsignaled state\n\n\nCreateSemaphore\nFunction\ncreates a new semaphore object\n\n\n\n", "tags": "Semaphore", "url": "https://www.ultraengine.com/learn/Semaphore?lang=cpp"},
{"title": "CreateSemaphore", "text": "\n\nThis function creates a semaphore object which can be signaled by one thread and waited on by another thread, for thread synchronization.\n\n\nshared_ptr&lt;Semaphore&gt; CreateSemaphore()\n\n\nReturns a new semaphore object.\n\n\n", "tags": "CreateSemaphore", "url": "https://www.ultraengine.com/learn/CreateSemaphore?lang=cpp"},
{"title": "Semaphore::Signal", "text": "\n\nThis method sets the semaphore to the signaled state and releases any threads that are waiting on it.\n\n\nvoid Signal()\n\n\n\n", "tags": "Semaphore::Signal", "url": "https://www.ultraengine.com/learn/Semaphore_Signal?lang=cpp"},
{"title": "Semaphore::Wait", "text": "\n\nThis method waits until the semaphore is signaled by another thread. If the semaphore has already been set to the signaled state, this method will return immediately. This method will reset the condition signaled state so it can be signaled again.\n\n\nvoid Wait()\n\n\n\n", "tags": "Semaphore::Wait", "url": "https://www.ultraengine.com/learn/Semaphore_Wait?lang=cpp"},
{"title": "Thread", "text": "\n\nBase class: Object\nThis class provides an interface for creating multithreaded applications. Ultra Engine already uses extensive multithreading, and you generally do not need to use these commands yourself, but they are available for advanced programmers.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nGetResult\nMethod\nreturns the thread result\n\n\nGetState\nMethod\nreturns the current thread state\n\n\nStart\nMethod\nbegins thread execution\n\n\nWait\nMethod\nwaits for the thread to complete execution\n\n\nCreateThread\nFunction\ncreates a new thread\n\n\nMaxThreads\nFunction\nreturns the number of simultaneous threads the CPU can execute\n\n\n\n", "tags": "Thread", "url": "https://www.ultraengine.com/learn/Thread?lang=cpp"},
{"title": "CreateThread", "text": "\n\nThis function creates a new Thread object.\n\n\nshared_ptr&lt;Thread&gt; CreateThread(shared_ptr&lt;Object&gt; entrypoint(shared_ptr&lt;Object&gt; extra), shared_ptr&lt;Object&gt; extra = NULL, const bool start = true);\nshared_ptr&lt;Thread&gt; CreateThread(function&lt;void()&gt; entrypoint, const bool start = true);\n\n\n\n\nParameter\nDescription\n\n\n\n\nentrypoint\nfunction the thread will execute when it begins\n\n\nextra\nextra value passed to the entrypoint function\n\n\nstart\nif set to true the thread will begin execution immediately, otherwise it will begin in the ready state\n\n\n\n\nReturns a new thread object.\n\n\n", "tags": "CreateThread", "url": "https://www.ultraengine.com/learn/CreateThread?lang=cpp"},
{"title": "Thread::GetResult", "text": "\n\nThis method can retrieve a return value set by a thread when it finishes execution.\n\n\nshared_ptr&lt;Object&gt; GetResult()\n\n\nIf the thread is finished the thread result is returned, otherwise NULL is returned.\n\n\n", "tags": "Thread::GetResult", "url": "https://www.ultraengine.com/learn/Thread_GetResult?lang=cpp"},
{"title": "Thread::GetState", "text": "\n\nThis method returns the threads current state.\n\n\nThreadState GetState()\n\n\nThe returned value may be THREAD_READY, THREAD_RUNNING, or THREAD_FINISHED.\n\n\n", "tags": "Thread::GetState", "url": "https://www.ultraengine.com/learn/Thread_GetState?lang=cpp"},
{"title": "MaxThreads", "text": "\n\nThis function returns the maximum number of simultaneous threads the CPU can execute at once. More threads than this can be created and run, but will not yield any performance gains.\n\n\nint MaxThreads()\n\n\nReturns the maximum number of threads that can run at once. \n\n\n", "tags": "MaxThreads", "url": "https://www.ultraengine.com/learn/MaxThreads?lang=cpp"},
{"title": "Thread::Start", "text": "\n\nThis method begins execution of a thread.\n\n\nvoid Start()\n\n", "tags": "Thread::Start", "url": "https://www.ultraengine.com/learn/Thread_Start?lang=cpp"},
{"title": "Thread::Wait", "text": "\n\nThis method pauses the calling thread until the specified thread is finished running.\n\n\nvoid Wait()\n\n\n\n", "tags": "Thread::Wait", "url": "https://www.ultraengine.com/learn/Thread_Wait?lang=cpp"},
{"title": "Networking", "text": "\n\nUltra Engine includes a simple networking system based on the Enet networking library that allows communication between different computers. This is useful for basic testing and  communication between two applications running on the same machine. However, most home computers are connected to the Internet through a router that blocks incoming connections from other IP addresses. For this reason the Steamworks peer-to-peer networking system  is recommended for most multiplayer games.\nIt is also possible to use Ultra Engine networking to build a relay server that allows two or more computers to communicate, but an implementation is beyond the scope of this documentation.\n", "tags": "Networking", "url": "https://www.ultraengine.com/learn/Networking?lang=cpp"},
{"title": "Client", "text": "\n\nBase class: Object\nThis class handles network client functionality.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nDisconnect\nMethod\ndisconnects from the server\n\n\nSend\nMethod\nsends a message to the server\n\n\nUpdate\nMethod\nupdates the server and checks for messages\n\n\nCreateClient\nFunction\ncreates a new client\n\n\n\n", "tags": "Client", "url": "https://www.ultraengine.com/learn/Client?lang=cpp"},
{"title": "CreateClient", "text": "\n\nThis function creates a new client and initializes a connection with the specified host.\n\n\nshared_ptr&lt;Client&gt; CreateClient(const String&amp; host, const int port = 8888)\n\n\n\n\nParameter\nDescription\n\n\n\n\nhost\nIP address to connect to\n\n\nport\nport number to use\n\n\n\n\nIf a connection can be initialized a new client is returned, otherwise NULL is returned.\n\nNote that the client will not actuallly be connected to the host until a MESSAGE_CONNECT message is returned by Client::Update.\n\nThis example shows one of the simplest possible networked programs. The order of events is as follows:\n\nThe server and client are created\nThe client attempts to connect to the server\nThe server receives the request from the client to connect\nThe client receives confirmation that it successfully connected to the server\nThe client sends a chat message\nThe server receives the chat message and disconnects from the client\nThe client receives notification it has been disconnected, and the program ends\n\n\n", "tags": "CreateClient", "url": "https://www.ultraengine.com/learn/CreateClient?lang=cpp"},
{"title": "Client::Disconnect", "text": "\n\nThis method disconnects the client from the server.\n\n\nbool Disconnect(const bool force = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nforce\nif set to true all communication will cease immediately, otherwise the server will be notified it is being disconnected\n\n\n\n", "tags": "Client::Disconnect", "url": "https://www.ultraengine.com/learn/Client_Disconnect?lang=cpp"},
{"title": "Client::Send", "text": "\n\nThis method sends a message from the client to the server.\n\n\nbool Send(const int id, shared_ptr&lt;Buffer&gt; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\nbool Send(const int id, const String&amp; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\nbool Send(const int id, const WString&amp; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nid\nuser-defined message ID\n\n\ndata\nstring or binary data to send, or NULL if the message only consists of the ID\n\n\nchannel\noptional channel to send in, for ordered messages\n\n\nflags\noptional message flags, can be MESSAGE_DEFAULT or any combination of MESSAGE_SEQUENCED, MESSAGE_RELIABLE, and MESSAGE_BUFFERED.\n\n\n\n\nReturns true of the message is successfully send, otherwise false is returned.\n", "tags": "Client::Send", "url": "https://www.ultraengine.com/learn/Client_Send?lang=cpp"},
{"title": "Client::Update", "text": "\n\nThis method checks for incoming messages and sends any queued messages.\n\n\nMessage Update(const int timeout = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntimeout\noptional timeout time in seconds\n\n\n\n\nReturns a new Message. The returned message ID may be MESSAGE_NONE, MESSAGE_CONNECT, MESSAGE_DISCONNECT, or a user-defined value.\nIf the message ID is not MESSAGE_NONE then the message should be evaluated and the method should be called again to check for more messages.\n", "tags": "Client::Update", "url": "https://www.ultraengine.com/learn/Client_Update?lang=cpp"},
{"title": "Message", "text": "\n\nThis class stores a networking message.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ndata\nshared_ptr&lt;Buffer&gt;\nmessage data\n\n\nid\nint\nmessage ID\n\n\nsource\nshared_ptr&lt;Peer&gt;\nmessage sender\n\n\n\n", "tags": "Message", "url": "https://www.ultraengine.com/learn/Message?lang=cpp"},
{"title": "Peer", "text": "\n\nBase class: Object\nThis class is an object representing another computer this machine is connected to.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nhost\nconst String&amp;\nread-only IP address\n\n\nport\nconst int&amp;\nread-only port number\n\n\n\n", "tags": "Peer", "url": "https://www.ultraengine.com/learn/Peer?lang=cpp"},
{"title": "Server", "text": "\n\nBase class: Object\nThis class handles network server functionality.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nBroadcast\nMethod\nsends a message to all clients\n\n\nDisconnect\nMethod\ndisconnects a client\n\n\nSend\nMethod\nsends a message to one client\n\n\nUpdate\nMethod\nupdates the server and checks for messages\n\n\nCreateServer\nFunction\ncreates a new server\n\n\n\n", "tags": "Server", "url": "https://www.ultraengine.com/learn/Server?lang=cpp"},
{"title": "Server::Broadcast", "text": "\n\nThis method sends a message from the server to all connected clients.\n\n\nvoid Broadcast(const int id, shared_ptr&lt;Buffer&gt; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\nvoid Broadcast(const int id, const String&amp; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\nvoid Broadcast(const int id, const WString&amp; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nid\nuser-defined message ID\n\n\ndata\nstring or binary data to send, or NULL if the message only consists of the ID\n\n\nchannel\noptional channel to send in, for ordered messages\n\n\nflags\noptional message flags, can be MESSAGE_DEFAULT or any combination of MESSAGE_SEQUENCED, MESSAGE_RELIABLE, and MESSAGE_BUFFERED.\n\n\n\n", "tags": "Server::Broadcast", "url": "https://www.ultraengine.com/learn/Server_Broadcast?lang=cpp"},
{"title": "CreateServer", "text": "\n\n\nshared_ptr&lt;Server&gt; CreateServer(const int port = 8888)\n\n\n\n\nParameter\nDescription\n\n\n\n\nport\nport number to use\n\n\n\n\nThis example shows one of the simplest possible networked programs. The order of events is as follows:\n\nThe server and client are created\nThe client attempts to connect to the server\nThe server receives the request from the client to connect\nThe client receives confirmation that it successfully connected to the server\nThe client sends a chat message\nThe server receives the chat message and disconnects from the client\nThe client receives notification it has been disconnected, and the program ends\n\n\n", "tags": "CreateServer", "url": "https://www.ultraengine.com/learn/CreateServer?lang=cpp"},
{"title": "Server::Disconnect", "text": "\n\nThis method disconnects a connected client.\n\n\nbool Disconnect(shared_ptr&lt;Peer&gt; client, const bool force = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nclient\nclient to disconnect\n\n\nforce\nif set to true all communication will cease immediately, otherwise the client will be notified it is being disconnected\n\n\n\n", "tags": "Server::Disconnect", "url": "https://www.ultraengine.com/learn/Server_Disconnect?lang=cpp"},
{"title": "Server::Send", "text": "\n\nThis method sends a message from the server to one connected client.\n\n\nvoid Send(shared_ptr&lt;Peer&gt; client, const int id, shared_ptr&lt;Buffer&gt; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\nvoid Send(shared_ptr&lt;Peer&gt; client, const int id, const String&amp; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\nvoid Send(shared_ptr&lt;Peer&gt; client, const int id, const WString&amp; data, const int channel = 0, const MessageFlags flags = MESSAGE_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\nclient\nconnected client to send the message to\n\n\nid\nuser-defined message ID\n\n\ndata\nstring or binary data to send, or NULL if the message only consists of the ID\n\n\nchannel\noptional channel to send in, for ordered messages\n\n\nflags\noptional message flags, can be MESSAGE_DEFAULT or any combination of MESSAGE_SEQUENCED, MESSAGE_RELIABLE, and MESSAGE_BUFFERED.\n\n\n\n", "tags": "Server::Send", "url": "https://www.ultraengine.com/learn/Server_Send?lang=cpp"},
{"title": "Server::Update", "text": "\n\nThis method checks for incoming messages and sends any queued messages.\n\n\nMessage Update(const int timeout = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntimeout\noptional timeout time in seconds\n\n\n\n\nReturns a new Message.  The returned message ID may be MESSAGE_NONE, MESSAGE_CONNECT, MESSAGE_DISCONNECT, or a user-defined value.\nIf the message ID is not MESSAGE_NONE then the message should be evaluated and the method should be called again to check for more messages.\n", "tags": "Server::Update", "url": "https://www.ultraengine.com/learn/Server_Update?lang=cpp"},
{"title": "Object", "text": "\n\nThis is the base class for most types in the engine.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nAs\nMethod\ncasts this object to another type\n\n\nSelf\nMethod\nreturns a shared pointer to this object\n\n\n\n", "tags": "Object", "url": "https://www.ultraengine.com/learn/Object?lang=cpp"},
{"title": "Object::As", "text": "\n\nThis method casts the object to a derived type.\n\n\nshared_ptr&lt;T&gt; As&lt;T&gt;()\n\n\n\n\nParameter\nDescription\n\n\n\n\nT\ntype to cast to\n\n\n\n\nReturns the object as a derived type T, or NULL if the object cannot be cast to the specified type.\n\nThis method should never be called in a class constructor or destructor.\n\n\n", "tags": "Object::As", "url": "https://www.ultraengine.com/learn/Object_As?lang=cpp"},
{"title": "Object::Self", "text": "\n\nThis is the equivalent to calling the C++ this keyword inside a class method, except it will return a safe shared pointer.\n\n\nshared_ptr&lt;Object&gt; Self()\n\n\nReturns a shared pointer to this object.\n\nThis method should always be used inside a class method, in place of the C++ keyword this, for all objects created as a shared pointer.\nThis method should never be called in a class constructor or destructor.\nYou can cast to a derived type using the Object::As method.\n\n\n", "tags": "Object::Self", "url": "https://www.ultraengine.com/learn/Object_Self?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "NavAgent", "text": "\n\nBase class: Object\nThis class is used to create to plot navigation paths and perform crowd movement.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nNavigate\nMethod\nmoves the agent to the specified destination\n\n\nSetMaxAcceleration\nMethod\nsets maximum acceleration\n\n\nSetMaxSpeed\nMethod\nsets maximum speed\n\n\nSetPosition\nMethod\nmanually set the agent position\n\n\nSetRotation\nMethod\nmanually set the agent rotation\n\n\nStop\nMethod\ncancels navigation\n\n\nCreateNavAgent\nFunction\ncreates a new navigation agent\n\n\n\n", "tags": "NavAgent", "url": "https://www.ultraengine.com/learn/NavAgent?lang=cpp"},
{"title": "CreateNavAgent", "text": "\n\nThis function creates a new navigation agent.\n\n\nshared_ptr&lt;NavAgent&gt; CreateNavAgent(shared_ptr&lt;NavMesh&gt;)\nshared_ptr&lt;NavAgent&gt; CreateNavAgent(shared_ptr&lt;NavMesh&gt;, const dFloat radius, const dFloat height)\n\n\n\n\nParameter\nDescription\n\n\n\n\nnavmesh\nnavigation mesh to add the agent to\n\n\nradius\nnavigation agent radius override\n\n\nheight\nnavigation agent height override\n\n\n\n\nReturns a new NavAgent object.\n\nYou can specify a radius and height to override the navigation mesh settings, but your settings should be equal to or less than those the navigation mesh was created with, to prevent characters from intersecting walls.\nIf you want to create differently sized characters with accurate navigation, you can create multiple navigation meshes.\n\n\n", "tags": "CreateNavAgent", "url": "https://www.ultraengine.com/learn/CreateNavAgent?lang=cpp"},
{"title": "NavAgent::Navigate", "text": "\n\nThis method plots a path to the specified point and directs the navigation agent to move there.\n\n\nbool Navigate(const Vec3&amp; position)\nbool Navigate(const dFloat x, const dFloat y, const dFloat z)\n\n\n\n\nParameter\nDescription\n\n\n\n\nposition (x, y, z)\ndestination position to navigate to\n\n\n\n\nReturns true if a path was plotted to the destination, otherwise false is returned.\n\n\n", "tags": "NavAgent::Navigate", "url": "https://www.ultraengine.com/learn/NavAgent_Navigate?lang=cpp"},
{"title": "NavAgent::SetMaxAcceleration", "text": "\n\nThis method sets the maximum speed the agent can travel at.\n\n\nvoid SetMaxAcceleration(const float acceleration)\n\n\n\n\nParaemter\nDescription\n\n\n\n\nacceleration\nmaximum acceleration, in meters per second squared\n\n\n\n", "tags": "NavAgent::SetMaxAcceleration", "url": "https://www.ultraengine.com/learn/NavAgent_SetMaxAcceleration?lang=cpp"},
{"title": "NavAgent::SetMaxSpeed", "text": "\n\nThis method sets the maximum speed the agent can travel at.\n\n\nvoid SetMaxSpeed(const float speed)\n\n\n\n\nParaemter\nDescription\n\n\n\n\nspeed\nmaximum velocity, in meters per second\n\n\n\n", "tags": "NavAgent::SetMaxSpeed", "url": "https://www.ultraengine.com/learn/NavAgent_SetMaxSpeed?lang=cpp"},
{"title": "NavAgent::SetPosition", "text": "\n\nThis method can be used to manually position a navigation agent.\n\n\nvoid SetPosition(const dFloat x, const dFloat y, const dFloat z)\nvoid SetPosition(const Vec3&amp; position)\n\n\n\n\nParameter\nDescription\n\n\n\n\nposition (x, y, z)\nnavigation agent position to set\n\n\n\n", "tags": "NavAgent::SetPosition", "url": "https://www.ultraengine.com/learn/NavAgent_SetPosition?lang=cpp"},
{"title": "NavAgent::SetRotation", "text": "\n\nThis method can be used to manually position a navigation agent.\n\n\nvoid SetRotation(const dFloat x, const dFloat y, const dFloat z)\nvoid SetRotation(const Vec3&amp; position)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrotation (x, y, z)\nnavigation agent rotation to set\n\n\n\n", "tags": "NavAgent::SetRotation", "url": "https://www.ultraengine.com/learn/NavAgent_SetRotation?lang=cpp"},
{"title": "NavAgent::Stop", "text": "\n\nThis method will cancel movement to a destination, if it is active, and the agent will smoothly come to a halt.\n\n\nvoid Stop()\n\n\n\n", "tags": "NavAgent::Stop", "url": "https://www.ultraengine.com/learn/NavAgent_Stop?lang=cpp"},
{"title": "NavMesh", "text": "\n\nBase class: Object\nThe Navmesh class provides an interface for pathfinding. A NavAgent can use a NavMesh object to navigate through a scene.\n\n\n\nParmeter\nType\nDescription\n\n\n\n\nBuild\nMethod\nbuilds the navigation mesh\n\n\nPlotPath\nMethod\nplots a series of points between the starting point and destination\n\n\nRandomPoint\nMethod\nreturns a random point on the navigation mesh\n\n\nSetPosition\nMethod\nmoves to navigation mesh to the specified position\n\n\nSetRotation\nMethod\nturns to navigation mesh to the specified rotation\n\n\nCreateNavMesh\nFunction\ncreates a new navigation mesh\n\n\n\n", "tags": "NavMesh", "url": "https://www.ultraengine.com/learn/NavMesh?lang=cpp"},
{"title": "NavMesh::Build", "text": "\n\nThis method will build the navigation mesh.\n\n\nvoid Build(const float maxedgelength = 12)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmaxedgelength\nmaximum edge length, in meters\n\n\n\n\nYou do not need to call this method, as the navigation mesh will be updated in the background whenever the scene changes. However, you may wish to manually build navigation meshes when your game starts in order to ensure that navigation data is available immediately.\n\n\n", "tags": "NavMesh::Build", "url": "https://www.ultraengine.com/learn/NavMesh_Build?lang=cpp"},
{"title": "CreateNavMesh", "text": "\n\nThis function creates a new navigation mesh for pathfinding.\n\n\nshared_ptr&lt;NavMesh&gt; CreateNavMesh(shared_ptr&lt;World&gt; world, const float width, const float height, const float depth, const int tilesx, const int tilesz, const float voxelsize = 0.25, const float agentradius = 0.4, const float agentheight = 1.8, const float agentstepheight = 0.501, const float maxslope = 45.01);\n\n\n\n\nParameter\nDescription\n\n\n\n\nworld\nworld to create the navmesh in\n\n\nwidth\nwidth of the navmesh volume\n\n\nheight\nwidth of the navmesh volume\n\n\ndepth\nwidth of the navmesh volume\n\n\ntilesx\nnumber of tiles along the X axis\n\n\ntilesz\nnumber of tiles along the Z axis\n\n\nvoxelsize\nresolution of voxel grid\n\n\nagentradius\nradius of the characters that will use this navmesh\n\n\nagentheight\nheight of the characters that will use this navmesh\n\n\nagentstepheight\nmaximum height that can be stepped up\n\n\nmaxslope\nmaximum slope that can be traversed, in degrees\n\n\n\n\nReturns a new Navmesh object.\n\n\n", "tags": "CreateNavMesh", "url": "https://www.ultraengine.com/learn/CreateNavMesh?lang=cpp"},
{"title": "NavMesh::PlotPath", "text": "\n\nThis method is used to plot a path between two points.\n\n\nvector&lt;Vec3&gt; PlotPath(const Vec3 origin, Vec3 destination)\n\n\n\n\nParameter\nDescription\n\n\n\n\norigin\npath starting point\n\n\ndestination\npath end point\n\n\n\n\nReturns a variable-sized array containing the plotted path points. If a path could not be plotted between the origin and destination, then the returned array will have a size of zero. \n\n\n", "tags": "NavMesh::PlotPath", "url": "https://www.ultraengine.com/learn/NavMesh_PlotPath?lang=cpp"},
{"title": "NavMesh::RandomPoint", "text": "\n\nThis method returns a random valid position on the navigation mesh. This can be useful for placing enemies or making characters wander throughout a scene.\n\n\nVec3 RandomPoint()\n\n\nReturns a valid position on the navigation mesh.\n\n\n", "tags": "NavMesh::RandomPoint", "url": "https://www.ultraengine.com/learn/NavMesh_RandomPoint?lang=cpp"},
{"title": "NavMesh::SetPosition", "text": "\n\nThis method can be used to move a navigation mesh.\n\n\nvoid SetPosition(const dFloat x, const dFloat y, const dFloat z)\nvoid SetPosition(const xVec3&amp; position)\n\n\n\n\nParameter\nDescription\n\n\n\n\nposition (x, y, z)\nnavigation mesh position\n\n\n\n\nIn this example the entire scene is shifted 100 meters to the right.\n\n", "tags": "NavMesh::SetPosition", "url": "https://www.ultraengine.com/learn/NavMesh_SetPosition?lang=cpp"},
{"title": "NavMesh::SetRotation", "text": "\n\nThis method can be used to rotate a navigation mesh. You can make characters that walk on the ceiling, or handle navigation in a space simulation that has no uniform up direction.\n\n\nvoid SetRotation(const dFloat pitch, const dFloat yaw, const dFloat roll)\nvoid SetRotation(const xVec3&amp; rotation)\nvoid SetRotation(const xQuat&amp; rotation)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrotation (pitch, yaw, roll)\nnavigation mesh rotation\n\n\n\n\nThis example tilts the scene and the navigation mesh by 45 degrees. Note that the navigation agent is aligned to the navmesh rotation.\n\n", "tags": "NavMesh::SetRotation", "url": "https://www.ultraengine.com/learn/NavMesh_SetRotation?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Collider", "text": "\n\nBase class: Asset\nThis class provides an interface for loading and creating collision shapes for physics interactions.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nCreateBoxCollider\nFunction\nCreates a box collision shape for physics interactions.\n\n\nCreateCompoundCollider\nFunction\nCreates a compound collision shape for physics interactions.\n\n\nCreateConeCollider\nFunction\nCreates a cone collision shape for physics interactions.\n\n\nCreateCylinderCollider\nFunction\nCreates a cylinder collision shape for physics interactions.\n\n\nCreateConvexHullCollider\nFunction\nCreates a convex hull collision shape for physics interactions.\n\n\nCreateMeshCollider\nFunction\nCreates a mesh collision shape for physics interactions.\n\n\nCreateSphereCollider\nFunction\nCreates a sphere collision shape for physics interactions.\n\n\nLoadCollider\nFunction\nLoads a collision shape from a file\n\n\n\n\nThe collider file format is a JSON-based ASCII format. PHY files consist of one top-level collision object that contains an array of shapes.\nEach shape can specify any of the following attributes:\n\n\n\nName\nType\nElements\nDescription\n\n\n\n\nshape\nstring\n-\nmay be BOX, CONE, CYLINDER, SPHERE, CONVEXHULL, or MESH\n\n\nsize\nnumber array\n1, 2, or 3\nscale / diameter\n\n\noffset\nnumber array\n3\nposition\n\n\nrotation\nnumber array\n3\nEuler rotation\n\n\nvertices\nnumber array\n(3 or 9) * n\nconvex hull points or mesh vertices\n\n\n\nThe file below specifies a box shape with dimensions of 1.0 on each axis, positioned at its center, with zero rotation:\n\nSupported shapes include BOX, CONE, CYLINDER, SPHERE, CONVEX_HULL, and MESH. In the case of cylinders and cones, the z parameter of the size array will be ignored and can be omitted. The file below creates a cylinder with a diamater of 1.0 and a height of 3.0:\n\nIn the case of spheres, an array with length one can be used. Note that in all cases, size indicates diameter, not radius.\n\nShapes of type CONVEX_HULL and MESH should include an array of vertex positions. If the shape is a convex hull the array must be evenly divisible by three. If the shape is a mesh the array must be evenly divisible by nine. These types of shapes do not support offset, size, or rotation values.\n\nAlso note that mesh shapes can not be physically active. They can be collided against, but an entity with a mesh collision applied to it will not be affected by forces and will not move.\nFor more complex shapes, compound collisions can be built from multiple subshapes of any type.\n\n", "tags": "Collider", "url": "https://www.ultraengine.com/learn/Collider?lang=cpp"},
{"title": "CreateBoxCollider", "text": "\n\nThis function creates a collider box shape for physics interactions.\n\n\n\nshared_ptr&lt;Collider&gt; CreateBoxCollider(const float width, const float height, const float depth, const float x = 0, const float y = 0, const float z = 0, const float pitch = 0, const float yaw = 0, const float roll = 0)\n\n\nshared_ptr&lt;Collider&gt; CreateBoxCollider(const Vec3&amp; size, const Vec3&amp; offset = 0, const Vec3&amp; rotation = 0)\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nwidth\nwidth of box\n\n\nheight\nheight of box\n\n\ndepth\ndepth of box\n\n\nx\nx component of box offset\n\n\ny\ny component of box offset\n\n\nz\nz component of box offset\n\n\npitch\npitch of box rotation\n\n\nyaw\nyaw of box rotation\n\n\nroll\nroll of box rotation\n\n\nsize\nsize of box\n\n\noffset\noffset of box\n\n\nrotation\nrotation of box\n\n\n\n\nReturns a new collider object.\n\n\n", "tags": "CreateBoxCollider", "url": "https://www.ultraengine.com/learn/CreateBoxCollider?lang=cpp"},
{"title": "CreateCompoundCollider", "text": "\n\nThis function creates a complex collision shape that is made up of multiple sub-shapes.\n\n\nshared_ptr&lt;Collider&gt; CreateCompoundCollider(vector&lt;shared_ptr&lt;Collider&gt; &gt; subshapes)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsubshapes\narray of collision objects to be combined into the created shape\n\n\n\n\n\n", "tags": "CreateCompoundCollider", "url": "https://www.ultraengine.com/learn/CreateCompoundCollider?lang=cpp"},
{"title": "CreateConeCollider", "text": "\n\nThis function creates a collision cone shape for physics interactions.\n\n\n\nshared_ptr&lt;Collider&gt; CreateConeCollider(const dFloat radius, const dFloat height, const dFloat x = 0, const dFloat y = 0, const dFloat z = 0, const dFloat pitch = 0, const dFloat yaw = 0, const dFloat roll = 0)\n\n\nshared_ptr&lt;Collider&gt; CreateConeCollider(const dFloat radius, const dFloat height, const xVec3&amp; offset, const xVec3&amp; rotation = 0)\n\n\n\n\n\nParameter\nDescription\n\n\n\n\nradius\nradius of shape\n\n\nheight\nheight of shape\n\n\nx\nx component of shape offset\n\n\ny\ny component of shape offset\n\n\nz\nz component of shape offset\n\n\npitch\npitch of shape rotation\n\n\nyaw\nyaw of shape rotation\n\n\nroll\nroll of shape rotation\n\n\noffset\noffset of shape\n\n\nrotation\nrotation of shape\n\n\n\n\nReturns a new collider object.\n\n\n", "tags": "CreateConeCollider", "url": "https://www.ultraengine.com/learn/CreateConeCollider?lang=cpp"},
{"title": "CreateCylinderCollider", "text": "\n\nThis function creates a collision cylinder shape for physics interactions.\n\n\n\nshared_ptr&lt;Collider&gt; CreateCylinderCollider(const float radius, const float height, const float x = 0.0, const float y = 0.0, const float z = 0.0, const float pitch = 0.0, const float yaw = 0.0, const float roll = 0.0)\n\n\nshared_ptr&lt;Collider&gt; CreateCylinderCollider(const float radius, const float height, const Vec3&amp; offset, const Vec3&amp; rotation = 0.0)\n\n\n\n\n\nParameter\nDescription\n\n\n\n\nradius\nradius of shape\n\n\nheight\nheight of shape\n\n\nx\nx component of shape offset\n\n\ny\ny component of shape offset\n\n\nz\nz component of shape offset\n\n\npitch\npitch of shape rotation\n\n\nyaw\nyaw of shape rotation\n\n\nroll\nroll of shape rotation\n\n\noffset\noffset of shape\n\n\nrotation\nrotation of shape\n\n\n\n\nReturns a new collider object.\n\n\n", "tags": "CreateCylinderCollider", "url": "https://www.ultraengine.com/learn/CreateCylinderCollider?lang=cpp"},
{"title": "CreateConvexHullCollider", "text": "\n\nThis function creates a convex hull that encapsulates all vertices of the input geometry.\n\n\nshared_ptr&lt;Collider&gt; CreateConvexHullCollider(shared_ptr&lt;Mesh&gt; geometry)\nshared_ptr&lt;Collider&gt; CreateConvexHullCollider(shared_ptr&lt;Model&gt; geometry)\n\n\n\n\n\nName\nDescription\n\n\n\n\ngeometry\nmesh or model to build the collision from\n\n\n\n\n\n", "tags": "CreateConvexHullCollider", "url": "https://www.ultraengine.com/learn/CreateConvexHullCollider?lang=cpp"},
{"title": "CreateMeshCollider", "text": "\n\nThis function creates a collider from a mesh or model.\n\n\nshared_ptr&lt;Collider&gt; CreateMeshCollider(shared_ptr&lt;Mesh&gt; geometry)\nshared_ptr&lt;Collider&gt; CreateMeshCollider(shared_ptr&lt;Model&gt; geometry)\n\n\n\n\n\nName\nDescription\n\n\n\n\ngeometry\nmesh or model to build the collision from\n\n\n\n\nAn entity that uses a mesh collider will remain stationary and will not react to physics forces, although other objects will collide with it.\n\n\n", "tags": "CreateMeshCollider", "url": "https://www.ultraengine.com/learn/CreateMeshCollider?lang=cpp"},
{"title": "CreateSphereCollider", "text": "\n\nThis function creates a collision sphere shape for physics interactions.\n\n\n\nshared_ptr&lt;Collider&gt; CreateSphereCollider(const float radius, const float depth, const float x = 0.0, const float y = 0.0, const float z = 0.0)\n\n\nshared_ptr&lt;Collider&gt; CreateSphereCollider(const float radius, const Vec3&amp; offset)\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nradius\nradius of shape\n\n\nx\nx component of shape offset\n\n\ny\ny component of shape offset\n\n\nz\nz component of shape offset\n\n\noffset\noffset of shape\n\n\n\n\nReturns a new collider object.\n\n\n", "tags": "CreateSphereCollider", "url": "https://www.ultraengine.com/learn/CreateSphereCollider?lang=cpp"},
{"title": "LoadCollider", "text": "\n\nThis function loads a collision shape from a JSON file. Collision objects can be saved to a file by calling the Save method.\n\n\nshared_ptr&lt;Collider&gt; LoadCollider(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\nshared_ptr&lt;Collider&gt; LoadCollider(shared_ptr&lt;Stream&gt; stream, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to open\n\n\nstream\nopen stream to read from\n\n\nflags\noptional load settings\n\n\n\n\nReturns the loaded collider object if it was successfully loaded, otherwise NULL is returned.\n\n\n", "tags": "LoadCollider", "url": "https://www.ultraengine.com/learn/LoadCollider?lang=cpp"},
{"title": "Collision", "text": "\n\nBase class: Object\nThis class stores information about a collision.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nentities\narray&lt;shared_ptr&lt;Entity&gt;, 2&gt;\ncolliding entities\n\n\nposition\nxVec3\ncollision position\n\n\nnormal\nxVec3\ncollision normal\n\n\nspeed\ndFloat\ncollision speed\n\n\n\n", "tags": "Collision", "url": "https://www.ultraengine.com/learn/Collision?lang=cpp"},
{"title": "Joint", "text": "\n\nBase class: Object\nThis class creates a physical constraint between two entities. Joints can use limits and actuators (motors) to control their range of motion and movement.\n\n\n\nName\nType\nDescription\n\n\n\n\nProperty\nconst shared_ptr&lt;Entity&gt;&amp;\nRead-only child entity\n\n\nparent\nconst shared_ptr&lt;Entity&gt;&amp;\nRead-only parent entity\n\n\nGetLimits\nMethod\nreturns the minimum and maximum joint limits\n\n\nGetOffset\nMethod\ngets the current angle of a hinge or position of a slider joint\n\n\nSetFriction\nMethod\nsets joint friction\n\n\nSetLimits\nMethod\nsets joint limites\n\n\nSetMaxForce\nMethod\nsets the max force of a motorized or kinematic joint\n\n\nSetMaxTorque\nMethod\nsets the max torque of a motorized or kinematic joint\n\n\nSetPose\nMethod\nsets the target position and/or rotation of a hinge, slider, or kinematic joint\n\n\nSetSpring\nMethod\nadds spring behavior to a hinge or slider joint\n\n\nCreateBallAndSocketJoint\nFunction\nCreates a new ball and socket joint\n\n\nCreateHingeJoint\nFunction\nCreates a new hinge joint\n\n\nCreateKinematicJoint\nFunction\nCreates a new kinematic joint\n\n\nCreatePlaneJoint\nFunction\nCreates a new plane joint\n\n\nCreateSliderJoint\nFunction\nCreates a new slider joint\n\n\n\n", "tags": "Joint", "url": "https://www.ultraengine.com/learn/Joint?lang=cpp"},
{"title": "CreateBallAndSocketJoint", "text": "\n\nThis function creates a ball and socket joint.\n\nshared_ptr&lt;Joint&gt; CreateBallAndSocketJoint(const Vec3&amp; position,shared_ptr&lt;Entity&gt; parent, shared_ptr&lt;Entity&gt; child)\n\n\n\nParameter\nDescription\n\n\n\n\nposition\njoint position\n\n\nparent\nparent entity, or NULL for a fixed position\n\n\nchild\nchild entity\n\n\n\n\nReturns a new joint.\n\n\n", "tags": "CreateBallAndSocketJoint", "url": "https://www.ultraengine.com/learn/CreateBallAndSocketJoint?lang=cpp"},
{"title": "CreateHingeJoint", "text": "\n\nThis function creates a new hinge joint. A hinge joint spins around an axis.\n\n\nshared_ptr&lt;Joint&gt; CreateHingeJoint(const xVec3&amp; position, const xVec3&amp; axis, shared_ptr&lt;Entity&gt; parent, shared_ptr&lt;Entity&gt; child)\nshared_ptr&lt;Joint&gt; CreateHingeJoint(const dFloat x, const dFloat y, const dFloat z, const dFloat dx, const dFloat dy, const dFloat dz, shared_ptr&lt;Entity&gt; parent, shared_ptr&lt;Entity&gt; child)\n\n\n\n\nParameter\nDescription\n\n\n\n\nposition, (x, y, z)\nposition of the joint\n\n\naxis (dx, dy, dz)\naxis the joint will spin around\n\n\nparent\njoint parent or NULL for a fixed point\n\n\nchild\njoint child\n\n\n\n\nReturns a new joint object.\n\n\n", "tags": "CreateHingeJoint", "url": "https://www.ultraengine.com/learn/CreateHingeJoint?lang=cpp"},
{"title": "CreateKinematicJoint", "text": "\n\nThis function creates a new kinematic joint. A kinematic joint can be used to control the orientation of an entity with physics forces.\n\n\nshared_ptr&lt;Joint&gt; CreateKinematicJoint(shared_ptr&lt;Entity&gt; entity)\n\n\n\n\nParameter\nDescription\n\n\n\n\nentity\nentity the joint controls\n\n\n\n\nReturns a new joint object.\n\nA kinematic joint can control the entity position, rotation, or both.\nTo control the entity position, you must call Joint::SetMaxForce and Joint::SetTargetPosition.\nTo control the entity rotation, you must call Joint::SetMaxTorque and Joint::SetTargetRotation.\n\n\n", "tags": "CreateKinematicJoint", "url": "https://www.ultraengine.com/learn/CreateKinematicJoint?lang=cpp"},
{"title": "CreatePlaneJoint", "text": "\n\nThis function creates a plane joint. Plane joints can be used to lock an entity to a plane, for 2D game physics.\n\nshared_ptr&lt;Joint&gt; CreatePlaneJoint(const Vec3&amp; position, const Vec3&amp; axis, shared_ptr&lt;Entity&gt; parent, shared_ptr&lt;Entity&gt; child)\n\n\n\nParameter\nDescription\n\n\n\n\nposition\njoint position\n\n\npin\njoint axis\n\n\nparent\nparent entity, or NULL for a fixed position\n\n\nchild\nchild entity\n\n\n\n\nReturns a new joint.\n\n\n", "tags": "CreatePlaneJoint", "url": "https://www.ultraengine.com/learn/CreatePlaneJoint?lang=cpp"},
{"title": "CreateSliderJoint", "text": "\n\nThis function creates a new slider joint. A hinge joint moves freely along the joint axis.\n\n\nshared_ptr&lt;Joint&gt; CreateSliderJoint(const xVec3&amp; position, const xVec3&amp; axis, shared_ptr&lt;Entity&gt; parent, shared_ptr&lt;Entity&gt; child)\nshared_ptr&lt;Joint&gt; CreateSliderJoint(const dFloat x, const dFLoat y, const dFloat z, const dFloat dx, const dFloat dy, const dFloat dz, shared_ptr&lt;Entity&gt; parent, shared_ptr&lt;Entity&gt; child) \n\n\n\n\nParameter\nDescription\n\n\n\n\nposition, (x, y, z)\nposition of the joint\n\n\naxis (dx, dy, dz)\naxis the joint will slide along\n\n\nparent\njoint parent or NULL for a fixed point\n\n\nchild\njoint child\n\n\n\n\nReturns a new joint object.\n\n\n", "tags": "CreateSliderJoint", "url": "https://www.ultraengine.com/learn/CreateSliderJoint?lang=cpp"},
{"title": "Joint::GetLimits", "text": "\n\nThis method returns limits of a hinge, slider, or ball and socket joint.\n\n\nxVec2 GetLimits()\n\n\nReturns the minimum and maximum limits of a hinge or ball and socket joint in degrees, or a slider joint in meters.\n", "tags": "Joint::GetLimits", "url": "https://www.ultraengine.com/learn/Joint_GetLimits?lang=cpp"},
{"title": "Joint::GetOffset", "text": "\n\nThis method returns the current joint offset.\n\ndFloat GetOffset()\n\nReturns the current angle of a hinge joint in degrees, or position of a slider joint in meters.\n\n\n", "tags": "Joint::GetOffset", "url": "https://www.ultraengine.com/learn/Joint_GetOffset?lang=cpp"},
{"title": "Joint::SetFriction", "text": "\n\nThis methods sets the friction of a hinge or slider joint.\n\n\nvoid SetFriction(const dFloat friction)\n\n\n\n\nParameter\nDescription\n\n\n\n\nfriction\njoint friction, in Newtons for a slider and Newton-meters for a hinge\n\n\n\n\n\n", "tags": "Joint::SetFriction", "url": "https://www.ultraengine.com/learn/Joint_SetFriction?lang=cpp"},
{"title": "Joint::SetLimits", "text": "\n\nThis method sets the limits of a hinge, slider, or ball and socket joint.\n\n\nvoid SetLimits(const dFloat minlimit, const dFloat maxlimit)\n\n\n\n\nParameter\nDescription\n\n\n\n\nminlimit\nminimum joint angle or offset\n\n\nmaxlimit\nmaximum joint angle or offset\n\n\n\n\nFor hinge and slider joints, if both the minimum and maximum limits are set to zero, joint limits will be disabled.\nFor ball and socket joints, the minimum limit will be used as a maximum cone angle, and the maximum limit will be used for the maximum twist angle.\nFor ball and socket joints, if the minimum limit is set to zero and the maximum limit is set to 360, joint limits will be disabled.\n\n\n", "tags": "Joint::SetLimits", "url": "https://www.ultraengine.com/learn/Joint_SetLimits?lang=cpp"},
{"title": "Joint::SetMaxForce", "text": "\n\nThis method sets the maximum force a motorized slider or kinematic joint can apply to reach its target position.\n\n\nvoid SetMaxForce(const dFloat force)\n\n\n\n\nParameter\nDescription\n\n\n\n\nforce\nmax force, in Newtons\n\n\n\n\n\n", "tags": "Joint::SetMaxForce", "url": "https://www.ultraengine.com/learn/Joint_SetMaxForce?lang=cpp"},
{"title": "Joint::SetMaxTorque", "text": "\n\nThis method sets the maximum torque a motorized hinge or kinematic joint can apply to reach its target rotation.\n\n\nvoid SetMaxTorque(const dFloat torque)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntorque\nmaximum torque in Newton-meters\n\n\n\n\n\n", "tags": "Joint::SetMaxTorque", "url": "https://www.ultraengine.com/learn/Joint_SetMaxTorque?lang=cpp"},
{"title": "Joint::SetPose", "text": "\n\nThis method sets the target position or rotation of a hinge, slider, or kinematic joint.\n\n\nvoid SetPose(const dFloat offset)\nvoid SetPose(const xVec3.md&amp; position, const xVec3.md&amp; rotation)\nvoid SetPose(const xVec3.md&amp; position, const xQuat.md&amp; rotation)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntarget\nthe destination angle for hinges or position for slider joints\n\n\nposition\ndestination position for kinematic joints\n\n\nrotation\ndestination rotation for kinematic joints\n\n\n\n\nThis method will have no effect on hinge joints until Joint::SetMaxTorque is called with a torque greater than zero.\nThis method will have no effect on hinge joints until Joint::SetMaxForce is called with a force greater than zero.\n\n\n", "tags": "Joint::SetPose", "url": "https://www.ultraengine.com/learn/Joint_SetPose?lang=cpp"},
{"title": "Joint::SetSpring", "text": "\n\nThis method adds spring behavior to a hinge or slider joint.\n\n\nvoid SetSpring(const dFloat relaxation, const dFloat spring, const dFloat damper)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrelaxation\nspring damper relaxation\n\n\nspring\nspring constant\n\n\ndamper\ndamping value\n\n\n\n\nCalling this method with zero for the spring parameter will disable spring behavior for this joint.\n\n\n", "tags": "Joint::SetSpring", "url": "https://www.ultraengine.com/learn/Joint_SetSpring?lang=cpp"},
{"title": "PickInfo", "text": "\n\nThis class contains information from the results of a ray cast.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nentity\nEntity\n\n\n\nface\nFace\n\n\n\nmesh\nMesh\n\n\n\nnormal\nxVec3\n\n\n\npolygon\nuint32_t\n\n\n\nposition\nxVec3\n\n\n\nsuccess\nbool\n\n\n\nGetTexCoords\nMethod\n\n\n\n\n", "tags": "PickInfo", "url": "https://www.ultraengine.com/learn/PickInfo?lang=cpp"},
{"title": "Plugin", "text": "\n\nBase class: Asset\nThis class provides an interface by which modular functionality can be added to Leadwerks 5. Plugins can be used to add support for loading and saving new file and package formats, and for converting image data between pixel formats. New plugins can be created with the plugin SDK.\nPlugins will be utilized automatically by the engine as the program runs. For example, when an unknown model format is loaded, the data will be passed to all plugins that contain a LoadModel function, until one is found that recognizes the data.\nWhen a plugin is deleted it will be automatically unloaded and its functionality will no longer be available to the engine. Therefore, you must maintain a variable for a loaded plugin and not let it go out of scope using the LoadPlugin function.\n\n\n\n\nProperty\nType\nDescription\n\n\n\n\ndescription\nconst WString&amp;\nread-only description of functionality loaded from the plugin\n\n\ntitle\nconst WString&amp;\nread-only title loaded from plugin\n\n\nproperties\nnlohmann::json\nJSON structure containing plugin information\n\n\nLoadPlugin\nFunction\nloads a plugin module\n\n\n\n", "tags": "Plugin", "url": "https://www.ultraengine.com/learn/Plugin?lang=cpp"},
{"title": "LoadPlugin", "text": "\n\nThis function loads a plugin module. The plugins functionality will be available immediately. When the plugin object goes out of scope it will be deleted, and its functionality will no longer be available.\n\n\nshared_ptr&lt;Plugin&gt; LoadPlugin(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path of the module to load\n\n\nflags\noptional load settings\n\n\n\n\nThe file extension of plugin modules varies by platform. You can use an asterisk (*) for the file extension and the engine will select the correct file extension based on the current platform.\n\n\n", "tags": "LoadPlugin", "url": "https://www.ultraengine.com/learn/LoadPlugin?lang=cpp"},
{"title": "Plugin SDK", "text": "\n\nThe Ultra Engine Plugin SDK allows modular functionality to be added to the engine.\n\nA plugin can be loaded by any Ultra Engine application using the LoadPlugin command. Plugins must be compiled separately for each supported platform.\nWindows uses DLL files for plugins. MacOS uses DYLIB files. Linux uses SO files. You can omit the file extension in the plugin file path, and the engine will choose a file extension based on the current platform:\n\nA plugin is only required to have one function called GetPluginInfo. This will return a string in JSON format containing information about the plugin. A top-level plugin object must be specified. This object is required to have string elements for title and description. You can optionally include some text about the author:\n\n\nOther miscellaneous properties can be added to tell the engine how to handle the plugin.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ncollapseSavedModels\nboolean\nif set to true models will be collapsed before SaveModel is called\n\n\nredistributable\nboolean\nindicates whether the plugin can be redistributed in a game or application, defaults to true\n\n\nsaveModelExtensions\nstring or array\nfile format extensions supported for model saving\n\n\nsaveModelFilter\nstring\nfile type filter for save file dialogs\n\n\nsaveTextureExtensions\nstring or array\nfile format extensions supported for texture saving\n\n\nsaveTextureFilter\nstring\nfile type filter for save file dialogs\n\n\n\n\nThe plugins functionality is defined by the functions it contains. A plugin can contain any of the following functions. It is possible to combine functionality, like a plugin that\ncan save model files and load a new texture format. However, it is best to limit plugins to a single purpose, or a single file format, like loading and saving of a new image format.\n\n\n\nFunction\nDescription\n\n\n\n\nGetPluginInfo\nRequired function that returns information about the plugin.\n\n\nConvertPixmap\nConverts pixel data between formats.\n\n\nLoadTexture\nLoads an image from memory in a specific format.\n\n\nSaveTexture\nSaves an image to memory in a specific format.\n\n\nCleanup\nCalled after load and save commands to free allocated resources.\n\n\n\nA package plugin must contain all of the following commands:\n\n\n\nFunction\nDescription\n\n\n\n\nLoadPackage\nLoads a model from memory in a specific format.\n\n\nCountPackageFiles\nLoads a model from memory in a specific format.\n\n\nGetPackageFileSize\nLoads a model from memory in a specific format.\n\n\nLoadPackageFile\nLoads a model from memory in a specific format.\n\n\nFreePackage\nLoads a model from memory in a specific format.\n\n\nGetPackageFileName\nLoads a model from memory in a specific format.\n\n\n\n", "tags": "Plugin SDK", "url": "https://www.ultraengine.com/learn/PluginSDK?lang=cpp"},
{"title": "Process", "text": "\n\nBase class: Object\nA process is an external executable your program can launch and interact with.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nerrorstream\nconst shared_ptr&lt;Stream&gt;&amp;\nread-only pointer to stream for reading process error output\n\n\npath\nconst WString&amp;\nread-only path to process executable\n\n\nreadstream\nconst shared_ptr&lt;Stream&gt;&amp;\nread-only pointer to stream for reading process output\n\n\nwritestream\nconst shared_ptr&lt;Stream&gt;&amp;\nread-only pointer to stream for writing to the process input\n\n\nClose\nMethod\nterminates a running process\n\n\nGetStatus\nMethod\nreturns the status of a running process\n\n\nWait\nMethod\nwaits for the process to finish running and closes it\n\n\nCreateProcess\nFunction\ncreates a new process\n\n\n\n", "tags": "Process", "url": "https://www.ultraengine.com/learn/Process?lang=cpp"},
{"title": "Process::Close", "text": "\n\nThis method closes a running process and returns its exit code.\n\n\nint Close()\n\n\nReturns the process exit code.\n\nTo avoid forcefully terminating a running process call the Process::Wait method instead of this method, or wait for Process::GetStatus to return PROCESS_FINISHED before calling this method.\n\n\n", "tags": "Process::Close", "url": "https://www.ultraengine.com/learn/Process_Close?lang=cpp"},
{"title": "CreateProcess", "text": "\n\nThis function launches an external executable and returns a handle that can be used for interaction.\n\n\nshared_ptr&lt;Process&gt; CreateProcess(const WString&amp; path, const WString&amp; commandline = )\n\n\n\n\n\nName\nDescription\n\n\n\n\npath\nfile path of the executable to launch\n\n\ncommandline\noptional command line to pass to the program\n\n\n\n\nIf the program was launched a new process is returned, otherwise NULL is returned.\n\n\n", "tags": "CreateProcess", "url": "https://www.ultraengine.com/learn/CreateProcess?lang=cpp"},
{"title": "Process::GetStatus", "text": "\n\nThis method returns the current status of a running process.\n\n\nProcessStatus GetStatus()\n\n\nReturns the process status. This may be PROCESS_RUNNING or PROCESS_FINISHED. The Process::Close method should be called to close the handle and retrieve the  exit code once this method returns PROCESS_FINISHED.\n\n\n", "tags": "Process::GetStatus", "url": "https://www.ultraengine.com/learn/Process_GetStatus?lang=cpp"},
{"title": "Process::Wait", "text": "\n\nThis method pauses the calling thread until the process finishes running and exits.\n\n\nint Wait()\n\n\nReturns the process exit code.\n\nThis method will close the handle to the finished process. You do not need to call Process::Close after calling this method.\n\n\n", "tags": "Process::Wait", "url": "https://www.ultraengine.com/learn/Process_Wait?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "PhysicsStats", "text": "\n\nThis class contains information about the physics thread. To enable statistics recording, you must call the World::RecordStats method.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nactivebodies\nint\nNumber of physics bodies currently in motion\n\n\nactivejoints\nint\nNumber of physics joints currently in motion\n\n\ncollisions\nint\nNumber of collisions that occured in the previous frame\n\n\nphysicstime\nint\nTime taken to update physics, in milliseconds\n\n\nthreads\nint\nNumber of physics threads currently in use\n\n\n\n", "tags": "PhysicsStats", "url": "https://www.ultraengine.com/learn/PhysicsStats?lang=cpp"},
{"title": "RenderStats", "text": "\n\nThis class contains information about the rendering thread. To enable statistics recording, you must call the World::RecordStats method.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ncameras\nint\nNumber of cameras rendered in the previous frame, not including shadow updates.\n\n\ncullingtime\nint\nTime taken to calculate current visibility set\n\n\ninstances\nint\nNumber of instances drawn in the previous frame\n\n\nframerate\nint\nSmoothed current average framerate\n\n\nmeshbatches\nint\nNumber of mesh batches drawn in the previous frame.\n\n\npolygons\nint\nNumber of polygons drawn in the previous frame, including shadows\n\n\nshaderbatches\nint\nNumber of shader batches drawn in the previous frame\n\n\nshadows\nint\nNumber of shadows updated in the previous frame\n\n\nshadowpolygons\nint\nNumber of shadow polygons drawn in the previous frame\n\n\nrendertime\nint\nCPU time taken to render the previous frame, in milliseconds\n\n\nvertices\nint\nNumber of vertices drawn in the previous frame\n\n\nvram\nuint64_t\nPhyical device memory limit\n\n\n\n", "tags": "RenderStats", "url": "https://www.ultraengine.com/learn/RenderStats?lang=cpp"},
{"title": "Strings", "text": "\n\nStrings in Ultra Engine are handled with two classes. The String class defines a narrow string and is derived from both the std::string and Object classes. The WString class defines a wide string and is derived from both the std::wstring and Object classes. It is preferable to use the WString class, as this will handle all characters of all languages.\n\nBoth string classes can be created from a string literal:\n\nA wide string literal should be used for unicode strings:\n\nCommon numeric data types can be converted to a string with a constructor:\n\n\nNarrow to wide string conversion is automatic:\n\nBecause wide to narrow string conversion can involve a possible loss of data, the WString::ToString method must be explicitly called:\n\nStrings can also be converted to integer or floating point values:\n\n", "tags": "Strings", "url": "https://www.ultraengine.com/learn/Strings?lang=cpp"},
{"title": "String", "text": "\n\nThe String class provides an interface for manipulating ASCII text strings.\nBase class: Object, std::string\n\n\n\nProperty\nType\nDescription\n\n\n\n\nString\nConstructor\nString(const char* c)\n\n\nString\nConstructor\nString(const int i)\n\n\nString\nConstructor\nString(const float f)\n\n\nString\nConstructor\nString(const double f)\n\n\nFind\nMethod\nperforms a search operation\n\n\nLeft\nMethod\nreturns leftmost characters\n\n\nGetSize\nMethod\nreturns the length of the string\n\n\nLower\nMethod\nconverts the string to lowercase\n\n\nMid\nMethod\nreturns the length of the string\n\n\nReplace\nMethod\nperforms a search and replace operation\n\n\nRight\nMethod\nreturns rightmost characters\n\n\nSplit\nMethod\nsegments the string\n\n\nToFloat\nMethod\nconverts the string to a floating point value\n\n\nToInt\nMethod\nconverts the string to an integer value\n\n\nTrim\nMethod\nremoves whitespace characters from the ends of the string\n\n\nUpper\nMethod\nconverts the string to uppercase\n\n\nXor\nMethod\nperforms an XOR operation\n\n\nUuid\nFunction\ncreates a unique universal identifier\n\n\n\n", "tags": "String", "url": "https://www.ultraengine.com/learn/String?lang=cpp"},
{"title": "String::Find", "text": "\n\nThis method performs a search for the specified term.\n\n\nint Find(const String&amp; token)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntoken\nsearch term to find\n\n\n\n\nReturns the first position in the string where the search term is found, or -1 if it is not found.\n\n\n", "tags": "String::Find", "url": "https://www.ultraengine.com/learn/String_Find?lang=cpp"},
{"title": "String::GetSize", "text": "\n\nThis method returns the number of characters in the string.\n\n\nint GetSize()\n\n\nReturns the number of characters in the string.\n\n\n", "tags": "String::GetSize", "url": "https://www.ultraengine.com/learn/String_GetSize?lang=cpp"},
{"title": "String::Left", "text": "\n\nThis method returns the leftmost characters of the string.\n\n\nString Left(const int count)\n\n\n\n\nParameter\nDescription\n\n\n\n\nlength\nmaximum number of characters to return\n\n\n\n\nReturns the leftmost characters of the string. If the count parameter is equal to or greater than the length of the string, the entire string is returned.\n\n\n", "tags": "String::Left", "url": "https://www.ultraengine.com/learn/String_Left?lang=cpp"},
{"title": "String::Lower", "text": "\n\nThis method returns the lowercase version of the string.\n\nString Lower()\n\n\nReturns the string, converted to lowercase.\n\n\n", "tags": "String::Lower", "url": "https://www.ultraengine.com/learn/String_Lower?lang=cpp"},
{"title": "String::Mid", "text": "\n\nThis method extracts a partial string and returns it.\n\n\nString Mid(const int pos, const int length)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\nzero-based position in the string to start\n\n\nlength\nmaximum number of characters to return\n\n\n\n\nReturns a string extracted from the specified position and length.\n\n\n", "tags": "String::Mid", "url": "https://www.ultraengine.com/learn/String_Mid?lang=cpp"},
{"title": "String::Replace", "text": "\n\nThis method performs a search and replace operation on the string and returns the result.\n\n\nString Replace(const String&amp; searchtext, const String&amp; replacetext)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsearchtext\ntext to search for\n\n\nreplacetext\ntext to replace with\n\n\n\n\nReturns the string with all instances of the search term replaced with the replacement text.\n\n\n", "tags": "String::Replace", "url": "https://www.ultraengine.com/learn/String_Replace?lang=cpp"},
{"title": "String::Right", "text": "\n\nThis method returns the rightmost characters of the string.\n\n\nString Right(const int count)\n\n\n\n\nParameter\nDescription\n\n\n\n\nlength\nmaximum number of characters to return\n\n\n\n\nReturns the rightmost characters of the string. If the count parameter is equal to or greater than the length of the string, the entire string is returned.\n\n\n", "tags": "String::Right", "url": "https://www.ultraengine.com/learn/String_Right?lang=cpp"},
{"title": "String::Split", "text": "\n\nThis method splits the string by a delimiter and returns an array of parts.\n\n\nvector&lt;String&gt; Split(const String&amp; delimiter)\n\n\n\n\nParameters\nDescription\n\n\n\n\ndelimiter\nstring separator\n\n\n\n\nReturns an array of string parts.\n\nIf the delimiter is not found in the string, the entire string will be returned. If the delimiter is an empty string, all whitespace characters will be used to split the string.\n\n\n", "tags": "String::Split", "url": "https://www.ultraengine.com/learn/String_Split?lang=cpp"},
{"title": "String::ToFloat", "text": "\n\nThis method converts the string into a floating point value.\n\n\ndouble ToFloat()\n\n\nReturns a floating point value.\n", "tags": "String::ToFloat", "url": "https://www.ultraengine.com/learn/String_ToFloat?lang=cpp"},
{"title": "String::ToInt", "text": "\n\nThis method converts the string into an integer value.\n\n\nint64_t ToInt()\n\n\nReturns an integer value.\n", "tags": "String::ToInt", "url": "https://www.ultraengine.com/learn/String_ToInt?lang=cpp"},
{"title": "String::Trim", "text": "\n\nThis method removes whitespace characters from the beginning and end of the string and returns the result.\n\n\nString Trim()\n\n\nReturns the string with whitespace characters removed from the beginning and end.\n\n\n", "tags": "String::Trim", "url": "https://www.ultraengine.com/learn/String_Trim?lang=cpp"},
{"title": "String::Upper", "text": "\n\nThis method returns the uppercase version of the string.\n\nString Upper()\n\n\nReturns the string, converted to uppercase.\n\n\n", "tags": "String::Upper", "url": "https://www.ultraengine.com/learn/String_Upper?lang=cpp"},
{"title": "Uuid", "text": "\n\nThis function creates a unique universal identifier.\n\n\nString Uuid()\n\n\nReturns a unique string.\n", "tags": "Uuid", "url": "https://www.ultraengine.com/learn/Uuid?lang=cpp"},
{"title": "String::Xor", "text": "\n\nThis method encrypts the string with an XOR cipher and returns the result.\n\n\nString Xor(const String&amp; key)\n\n\n\n\nParameter\nDescription\n\n\n\n\nkey\nencryption key\n\n\n\n\nReturns the encrypted string.\n\n\n", "tags": "String::Xor", "url": "https://www.ultraengine.com/learn/String_Xor?lang=cpp"},
{"title": "WString", "text": "\n\nBase class: Object, std::wstring\nThis class provides an interface for manipulating wide unicode text strings. This class is preferable because it can support all characters.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nWString\nConstructor\nWString(const char* c)\n\n\nWString\nConstructor\nWString(const wchar_t* c)\n\n\nWString\nConstructor\nWString(const int i)\n\n\nWString\nConstructor\nWString(const float f)\n\n\nWString\nConstructor\nWString(const double f)\n\n\nFind\nMethod\nperforms a search operation\n\n\nGetSize\nMethod\nreturns the length of the string\n\n\nLeft\nMethod\nreturns leftmost characters\n\n\nLower\nMethod\nconverts the string to lowercase\n\n\nMid\nMethod\nreturns the length of the string\n\n\nReplace\nMethod\nperforms a search and replace operation\n\n\nRight\nMethod\nreturns rightmost characters\n\n\nSplit\nMethod\nsegments the string\n\n\nToFloat\nMethod\nconverts the string to a floating point value\n\n\nToInt\nMethod\nconverts the string to an integer value\n\n\nToString\nMethod\nreturns a narrow string containing only ASCII characters\n\n\nToUtf8String\nMethod\nreturns a narrow string with UTF-8 encoding\n\n\nTrim\nMethod\nremoves whitespace characters from the ends of the string\n\n\nUpper\nMethod\nconverts the string to uppercase\n\n\nXor\nMethod\nperforms an XOR operation\n\n\n\n", "tags": "WString", "url": "https://www.ultraengine.com/learn/WString?lang=cpp"},
{"title": "WString::Find", "text": "\n\nThis method performs a search for the specified term.\n\n\nint Find(const WString&amp; token)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntoken\nsearch term to find\n\n\n\n\nReturns the first position in the string where the search term is found, or -1 if it is not found.\n\n\n", "tags": "WString::Find", "url": "https://www.ultraengine.com/learn/WString_Find?lang=cpp"},
{"title": "WString::Left", "text": "\n\nThis method returns the leftmost characters of the string.\n\n\nWString Left(const int count)\n\n\n\n\nParameter\nDescription\n\n\n\n\nlength\nmaximum number of characters to return\n\n\n\n\nReturns the leftmost characters of the string. If the count parameter is equal to or greater than the length of the string, the entire string is returned.\n\n\n", "tags": "WString::Left", "url": "https://www.ultraengine.com/learn/WString_Left?lang=cpp"},
{"title": "WString::GetSize", "text": "\n\nThis method returns the number of characters in the string.\n\n\nint GetSize()\n\n\nReturns the number of characters in the string.\n\n\n", "tags": "WString::GetSize", "url": "https://www.ultraengine.com/learn/WString_GetSize?lang=cpp"},
{"title": "WString::Lower", "text": "\n\nThis method returns the lowercase version of the string.\n\nWString Lower()\n\n\nReturns the string, converted to lowercase.\n\n\n", "tags": "WString::Lower", "url": "https://www.ultraengine.com/learn/WString_Lower?lang=cpp"},
{"title": "WString::Mid", "text": "\n\nThis method extracts a partial string and returns it.\n\n\nWString Mid(const int pos, const int length)\n\n\n\n\nParameter\nDescription\n\n\n\n\npos\nzero-based position in the string to start\n\n\nlength\nmaximum number of characters to return\n\n\n\n\nReturns a string extracted from the specified position and length.\n\n\n", "tags": "WString::Mid", "url": "https://www.ultraengine.com/learn/WString_Mid?lang=cpp"},
{"title": "WString::Replace", "text": "\n\nThis method performs a search and replace operation on the string and returns the result.\n\n\nWString Replace(const WString&amp; searchtext, const WString&amp; replacetext)\n\n\n\n\nParameter\nDescription\n\n\n\n\nsearchtext\ntext to search for\n\n\nreplacetext\ntext to replace with\n\n\n\n\nReturns the string with all instances of the search term replaced with the replacement text.\n\n\n", "tags": "WString::Replace", "url": "https://www.ultraengine.com/learn/WString_Replace?lang=cpp"},
{"title": "WString::Right", "text": "\n\nThis method returns the rightmost characters of the string.\n\n\nWString Right(const int count)\n\n\n\n\nParameter\nDescription\n\n\n\n\nlength\nmaximum number of characters to return\n\n\n\n\nReturns the rightmost characters of the string. If the count parameter is equal to or greater than the length of the string, the entire string is returned.\n\n\n", "tags": "WString::Right", "url": "https://www.ultraengine.com/learn/WString_Right?lang=cpp"},
{"title": "WString::Split", "text": "\n\nThis method splits the string by a delimiter and returns an array of parts.\n\n\nvector&lt;WString&gt; Split(const WString&amp; delimiter)\n\n\n\n\nParameters\nDescription\n\n\n\n\ndelimiter\nstring separator\n\n\n\n\nReturns an array of string parts.\n\nIf the delimiter is not found in the string, the entire string will be returned. If the delimiter is an empty string, all whitespace characters will be used to split the string.\n\n\n", "tags": "WString::Split", "url": "https://www.ultraengine.com/learn/WString_Split?lang=cpp"},
{"title": "WString::ToFloat", "text": "\n\nThis method converts the string into a floating point value.\n\n\ndouble ToFloat()\n\n\nReturns a floating point value.\n", "tags": "WString::ToFloat", "url": "https://www.ultraengine.com/learn/WString_ToFloat?lang=cpp"},
{"title": "WString::ToInt", "text": "\n\nThis method converts the string into an integer value.\n\n\nint64_t ToInt()\n\n\nReturns an integer value.\n", "tags": "WString::ToInt", "url": "https://www.ultraengine.com/learn/WString_ToInt?lang=cpp"},
{"title": "WString::ToString", "text": "\n\nThis method converts the wide string to a narrow string and returns it. Narrow to wide string conversion is automatic, but wide to narrow conversion may cause characters to be lost and must be called explicitly.\n\n\nString ToString()\n\n\nReturns a narrow string.\n\n\n", "tags": "WString::ToString", "url": "https://www.ultraengine.com/learn/WString_ToString?lang=cpp"},
{"title": "WString::ToUtf8String", "text": "\n\nThis method converts the wide string to a narrow string using UTF-8 encoding. This allows a narrow string to store a larger range of widestring characters in a narrow string. However, some string operations will not work correctly with a UTF8 string.\n\n\nString ToUtf8String()\n\n\nReturns a narrow string with UTF-8 encoding.\n\n\n", "tags": "WString::ToUtf8String", "url": "https://www.ultraengine.com/learn/WString_ToUtf8String?lang=cpp"},
{"title": "WString::Trim", "text": "\n\nThis method removes whitespace characters from the beginning and end of the string and returns the result.\n\n\nWString Trim()\n\n\nReturns the string with whitespace characters removed from the beginning and end.\n\n\n", "tags": "WString::Trim", "url": "https://www.ultraengine.com/learn/WString_Trim?lang=cpp"},
{"title": "WString::Upper", "text": "\n\nThis method returns the uppercase version of the string.\n\nWString Upper()\n\n\nReturns the string, converted to uppercase.\n\n\n", "tags": "WString::Upper", "url": "https://www.ultraengine.com/learn/WString_Upper?lang=cpp"},
{"title": "WString::Xor", "text": "\n\nThis method encrypts the string with an XOR cipher and returns the result.\n\n\nWString Xor(const WString&amp; key)\n\n\n\n\nParameter\nDescription\n\n\n\n\nkey\nencryption key\n\n\n\n\nReturns the encrypted string.\n\n\n", "tags": "WString::Xor", "url": "https://www.ultraengine.com/learn/WString_Xor?lang=cpp"},
{"title": "Scene", "text": "\n\nBase class: Object\nThe scene class stores all the objects in a game level.\n\n\n\nProperty\nType\nDescription\n\n\n\n\nentities\nvector&lt; shared_ptr&lt;Entity&gt; &gt;\narray of all top-level entities in the scene\n\n\nReload\nMethod\nreloads the scene entity states from a file\n\n\nSave\nMethod\nsaves the scene to a file\n\n\nCreateScene\nFunction\ncreates a new scene object\n\n\nLoadScene\nFunction\nloads a scene file\n\n\n\n", "tags": "Scene", "url": "https://www.ultraengine.com/learn/Scene?lang=cpp"},
{"title": "CreateScene", "text": "\n\nThis function creates a scene.\n\n\nshared_ptr&lt;Scene&gt; CreateScene()\n\n\nReturns a new scene object.\n", "tags": "CreateScene", "url": "https://www.ultraengine.com/learn/CreateScene?lang=cpp"},
{"title": "LoadScene", "text": "\n\nThis command loads a scene from a file path or stream.\n\n\nshared_ptr&lt;Scene&gt; LoadScene(shared_ptr&lt;World&gt; world, const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\nshared_ptr&lt;Scene&gt; LoadScene(shared_ptr&lt;World&gt; world, shared_ptr&lt;Stream&gt; stream, shared_ptr&lt;Stream&gt; binstream, const LoadFlags flags = LOAD_DEFAULT)\n\n\nIf the scene is successfully loaded a new scene object is returned, otherwise NULL is returned.\n\nThis feature is in continued development and its behavior may change somewhat in future updates.\n\nThis example saves the starting scene and reloads it when the space key is pressed.\n\n", "tags": "LoadScene", "url": "https://www.ultraengine.com/learn/LoadScene?lang=cpp"},
{"title": "Scene::Reload", "text": "\n\nThis method reloads the states of the entities in a scene from a file, without recreating them. This is useful for loading game save states or synchonizing the world over a network.\n\n\nbool Reload(const WString&amp; path, const LoadFlags flags = LOAD_DEFAULT)\nbool Reload(shared_ptr&lt;Stream&gt; stream, shared_ptr&lt;Stream&gt; binstream, const LoadFlags flags = LOAD_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to read\n\n\nstream\nJSON data to read\n\n\nbinstream\nbinary data to read\n\n\nflags\noptional load flags\n\n\n\n\nReturns true of the scene was successfully reloaded, otherwise false is returned.\n\nThis method can be faster than LoadScene because it does not create any new objects. It may be able to handle scenes that been updated since the saved scene was created. For example if additional objects have been added to the scene since it was last saved, they will remain unchanged when the scene state is reloaded.\nThis feature is in continued development and its behavior may change somewhat in future updates.\n\nThis example saves the starting scene to memory and reloads the scene entity states when the space key is pressed.\n\n", "tags": "Scene::Reload", "url": "https://www.ultraengine.com/learn/Scene_Reload?lang=cpp"},
{"title": "Scene::Save", "text": "\n\nThis method saves a scene to a file or stream.\n\n\nbool Save(const WString&amp; path, const SaveFlags flags = SAVE_DEFAULT)\nbool Save(shared_ptr&lt;Stream&gt; stream, shared_ptr&lt;Stream&gt; binstream, const SaveFlags flags = SAVE_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to save to\n\n\nstream\nstream to write JSON data to\n\n\nbinstream\nstream to write binary data to\n\n\nflags\nSave mode flags\n\n\n\n\nIf the scene is successfully saved true is returned, otherwise false is returned.\n\nThis feature is in continued development and its behavior may change somewhat in future updates.\n\nThis example saves the starting scene and reloads it when the space key is pressed.\n\n", "tags": "Scene::Save", "url": "https://www.ultraengine.com/learn/Scene_Save?lang=cpp"},
{"title": "", "text": "\n404: Not Found\n", "tags": "", "url": "https://www.ultraengine.com/learn/?lang=cpp"},
{"title": "Command", "text": "\n\nThis function allows you to interact with the operating system terminal or console. This can be used to perform low-level system actions.\n\nWString Command(const WString&amp; command)\n\n\n\nParameter\nDescription\n\n\n\n\ncommand\ncommand to send\n\n\n\n\nReturns the printed output of the terminal or console.\n\nOn the Windows operating system the command output will be piped to a file stored in the system ProgramData/Ultra Engine directory. This file should be deleted if the command output contains any sensitive information.\n\n\n", "tags": "Command", "url": "https://www.ultraengine.com/learn/Command?lang=cpp"},
{"title": "Confirm", "text": "\n\nThis function displays a message dialog box with the options OK and Cancel.\n\n\n\nint Confirm(const WString&amp; message, const WString&amp; title = , const bool serious = false)\n\n\n\n\n\nName\nDescription\n\n\n\n\nmessage\ntext for the message dialog box to display\n\n\ntitle\ntitle for the message dialog box to display\n\n\nserious\nif set to true the dialog box will display a warning icon\n\n\n\n\nIf the user pressed the OK button 1 is returned. If the user presses the cancel button 0 is returned.\n\n\n", "tags": "Confirm", "url": "https://www.ultraengine.com/learn/Confirm?lang=cpp"},
{"title": "Input", "text": "\n\nThis function waits for a line of text to be input into the program console.\n\n\nWString Input(const WString&amp; message)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmessage\nmessage to print before the input is received.\n\n\n\n\nWhen the user enters some text and presses enter, the typed input is returned.\n\nOn Windows, the project must be built as a console app. In Configuration Properties &gt; Linker &gt; System set SubSystem to Console.\n\n\n\n", "tags": "Input", "url": "https://www.ultraengine.com/learn/Input?lang=cpp"},
{"title": "Microsecs", "text": "\n\nThis function uses a high-resolution timer to return the current system time, in microseconds.\n\n\nuint64_t Microsecs()\n\n\nReturns the current system time, in microseconds.\n\n\n", "tags": "Microsecs", "url": "https://www.ultraengine.com/learn/Microsecs?lang=cpp"},
{"title": "Millisecs", "text": "\n\nThis function returns the current system time, in milliseconds.\n\n\nuint64_t Millisecs()\n\n\nReturns the current system time, in milliseconds.\n\n\n", "tags": "Millisecs", "url": "https://www.ultraengine.com/learn/Millisecs?lang=cpp"},
{"title": "Notify", "text": "\n\nThis functions displays a message box.\n\n\nvoid Notify(const WString&amp; message, const WString&amp; title = , const bool serious = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\nmessage\nmessage to display in the message box\n\n\ntitle\noptional title of message box window\n\n\nserious\nIf set to true a warning icon will be displayed\n\n\n\n\n\n\n", "tags": "Notify", "url": "https://www.ultraengine.com/learn/Notify?lang=cpp"},
{"title": "Proceed", "text": "\n\nThis function displays a message dialog box with the options Yes, No, and Cancel.\n\n\nint Proceed(const WString&amp; message, const WString&amp; title = , const bool serious = false)\n\n\n\n\n\nName\nDescription\n\n\n\n\nmessage\ntext for the message dialog box to display\n\n\ntitle\ntitle for the message dialog box to display\n\n\nserious\nif set to true the dialog box will display a warning icon\n\n\n\n\nIf the user pressed the Yes button 1 is returned. If the user presses the cancel button 0 is returned. If the user presses the No button -1 is returned.\n\n\n\n", "tags": "Proceed", "url": "https://www.ultraengine.com/learn/Proceed?lang=cpp"},
{"title": "Print", "text": "\n\nThis function prints a line of text to the program output.\n\n\nvoid Print(const WString&amp; value)\nvoid Print(const String&amp; value)\nvoid Print(const int value)\nvoid Print(const float value)\nvoid Print(const double value)\n\n\n\n\nParameter\nDescription\n\n\n\n\nvalue\nstring or data to display\n\n\n\n\n\n", "tags": "Print", "url": "https://www.ultraengine.com/learn/Print?lang=cpp"},
{"title": "RequestDir", "text": "\n\nThis function displays a file dialog and lets the user select a folder.\n\n\nWString RequestDir(const WString&amp; title = Open Folder, const WString&amp; dir = );\n\n\n\n\n", "tags": "RequestDir", "url": "https://www.ultraengine.com/learn/RequestDir?lang=cpp"},
{"title": "RequestFile", "text": "\n\nThis function opens a file browser dialog and lets the user select a file to open or save.\n\n\nWString RequestFile(const WString&amp; title = Open File, const WString&amp; file = , const WString&amp; filetypes = All Files:*, const int defaulttype = 0, const bool save = false);\n\n\n\n\nParameter\nDescription\n\n\n\n\ntitle\nTitle shown in dialog window.\n\n\nfile\nDefault file directory or full file path.\n\n\nfiletypes\nFile extensions filter.\n\n\ndefaulttype\nDefault file type to show.\n\n\nsave\nSet to true for a save dialog, otherwise an open dialog will be shown.\n\n\n\n\nReturns the selected file path, or an empty string if the user cancelled the operation.\n\nThe extensions filter allows you to specify one or more file types to show in the dialog. Each file type consists of a description and an extension, separated by a colon. Note that the text shown inside the parenthesis is part of the description, and is just decorative:\n\nYou can specify multiple extensions for a file type by separating them with a comma:\n\nYou can use a wildcard to specify a range of extensions:\n\nUse a semicolon to specify multiple file extensions for one file type:\n\n\n\n\n", "tags": "RequestFile", "url": "https://www.ultraengine.com/learn/RequestFile?lang=cpp"},
{"title": "Sleep", "text": "\n\nThis function pauses the current thread for the specified number of milliseconds.\n\n\nvoid Sleep(const int time)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntime\nnumber of milliseconds to pause\n\n\n\n\nThis function should not be used to regulate time-sensitive processes. The accuracy of the sleep period can vary by as much as 15 milliseconds, or more.\n\n\n", "tags": "Sleep", "url": "https://www.ultraengine.com/learn/Sleep?lang=cpp"},
{"title": "World", "text": "\n\nBase class: Object\nThe world class is a container for entities.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ncollisions\nconst vector&lt;Collision&gt;&amp;\nread-only list of collisions recorded in previous physics update\n\n\nphysicsstats\nPhysicsStats\nphysics statistics\n\n\nrenderstats\nRenderStats\nrendering statistics\n\n\nClearCollisionResponses\nMethod\nclears all collision responses\n\n\nGetAmbientLight\nMethod\nreturns the ambient light color\n\n\nGetCollisionResponse\nMethod\nreturns the collision response for collisions between the specified collision types\n\n\nGetEntitiesInArea\nMethod\nreturns an array of entities that intersect the specified bounding box\n\n\nGetTaggedEntities\nMethod\nreturns an array of entities with the specified tag\n\n\nPick\nMethod\nperforms a raycast\n\n\nRecordStats\nMethod\nenables statistics recording\n\n\nRender\nMethod\nrenders the world\n\n\nSave\nMethod\nserializes the world to a file\n\n\nSetAmbientLight\nMethod\nsets the ambient light color\n\n\nSetCollisionResponse\nMethod\nsets the collision response for collisions between the specified collision types\n\n\nSetEnvironmentMap\nMethod\nsets the skybox or specular and diffuse reflection maps\n\n\nSetGravity\nMethod\nsets the world gravity force\n\n\nUpdate\nMethod\nupdates physics, pathfinding, and other systems\n\n\nCreateWorld\nFunction\ncreates a new world\n\n\n\n", "tags": "World", "url": "https://www.ultraengine.com/learn/World?lang=cpp"},
{"title": "World::ClearCollisionResponses", "text": "\n\nThis method clears all built-in and custom coliision responses.\n\n\nvoid ClearCollisionResponses()\n\n", "tags": "World::ClearCollisionResponses", "url": "https://www.ultraengine.com/learn/World_ClearCollisionResponses?lang=cpp"},
{"title": "CreateWorld", "text": "\n\nThis function creates a new world object.\n\n\nshared_ptr&lt;World&gt; CreateWorld()\n\n\nReturns a new world object.\n\n\n", "tags": "CreateWorld", "url": "https://www.ultraengine.com/learn/CreateWorld?lang=cpp"},
{"title": "World::GetAmbientLight", "text": "\n\nThis method returns the worlds ambient light color.\n\n\nVec3 GetAmbientLight()\n\n\nReturns the ambient light setting.\n", "tags": "World::GetAmbientLight", "url": "https://www.ultraengine.com/learn/World_GetAmbientLight?lang=cpp"},
{"title": "World::GetCollisionResponse", "text": "\n\nThis method can be used to get the collision response between different collision types.\n\nCollisionResponse GetCollisionResponse(const int type1, const int type2)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntype1\none of the collision types in the collision\n\n\ntype2\nthe other collition type in the collision\n\n\n\n\nThis can return COLLISIONRESPONSE_NONE, COLLISIONRESPONSE_COLLIDE, or COLLISIONRESPONSE_DETECT.\n", "tags": "World::GetCollisionResponse", "url": "https://www.ultraengine.com/learn/World_GetCollisionResponse?lang=cpp"},
{"title": "World::GetEntitiesInArea", "text": "\n\nThis method efficiently retrieves all entities that intersect the specified bounding box.\n\nvector&lt;shared_ptr&lt;Entity&gt; &gt; GetEntitiesInArea(const xAabb&amp; area)\n\n\n\nParaemter\nDescription\n\n\n\n\narea\nbounding box to test for intersecting entities\n\n\n\n\nReturns all top-level entities that intersect the specified bounding box, or have entities in their sub-hierarchy that intersect the bounding box.\n", "tags": "World::GetEntitiesInArea", "url": "https://www.ultraengine.com/learn/World_GetEntitiesInArea?lang=cpp"},
{"title": "World::GetTaggedEntities", "text": "\n\nThis method retrieves all entities in the world with the specified tag.\n\n\nvector&lt;shared_ptr&lt;Entity&gt; &gt; GetTaggedEntities(const WString&amp; tag)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntag\ntag to search for\n\n\n\n\nReturns an array of all entities that use the specified tag.\n\nYou can set entity tags with the Entity::AddTag method.\n", "tags": "World::GetTaggedEntities", "url": "https://www.ultraengine.com/learn/World_GetTaggedEntities?lang=cpp"},
{"title": "World::Pick", "text": "\n\nThis method performs a line segment intersection test on all the entities in the world.\n\n\nPickInfo Pick(const xVec3&amp; p0, const xVec3&amp; p1, const dFloat radius = 0.0, const bool closest = false, const CollisionType collisiontype = COLLISION_NONE, const bool usecollider = false)\nPickInfo Pick(const dFloat x0, const dFloat y0, const dFloat z0, const dFloat x1, const dFloat y1, const dFloat z1, const dFloat radius = 0.0, const bool closest = false, const CollisionType collisiontype = COLLISION_NONE, const bool usecollider = false)\n\n\n\n\nParameter\nDescription\n\n\n\n\np0, (x0, y0, z0)\nline start position\n\n\np1, (x1, y1, z1)\nline end position\n\n\nradius\nif greater than zero a swept sphere intersection test will be performed\n\n\nclosest\nif set to true the closest intersected point will be found, otherwise the routine will return on the first hit\n\n\ncollisiontype\noptional collision type filter\n\n\nusecollider\nif set to true the entity collider will be used instead of the mesh\n\n\n\n\nIf the line segment intersects the entity, the resulting PickInfos success member will be set to true, otherwise it will be false.\n", "tags": "World::Pick", "url": "https://www.ultraengine.com/learn/World_Pick?lang=cpp"},
{"title": "World::RecordStats", "text": "\n\nThis method is used to enable or disable statistics recording. Statistics recording is disabled by default, so you need to enable it if you are displaying statistical information.\n\n\nvoid RecordStats(const bool record)\n\n\n\n\nParameter\nDescription\n\n\n\n\nrecord\nif set to true statistics recording is enabled, otherwise it is disabled\n\n\n\n\n\n", "tags": "World::RecordStats", "url": "https://www.ultraengine.com/learn/World_RecordStats?lang=cpp"},
{"title": "World::Render", "text": "\n\nThis method sends all queued rendering instructions to the rendering thread and tells it to render and display the contents of this world.\n\n\nvoid Render(shared_ptr&lt;Framebuffer&gt; framebuffer, const bool vsync = true, const int maxframerate = 0)\n\n\n\n\nParameter\nDescription\n\n\n\n\nframebuffer\nframebuffer to render to\n\n\nvsync\nif set to true vertical sync is enabled\n\n\nmaxframerate\nmaximum allowed framerate, or zero for unlimited\n\n\n\n\nIf vertical sync is disabled the framerate will be uncapped and will usually be higher, but screen tearing artifacts can occur. Vertical sync should be disabled when benchmarking performance.\nRendering in Ultra Engine is asychronous, meaning it is executed on a separate thread from your game logic. Consequently, there is some delay between the first call to World::Render and the first appearance of visible graphics on the screen. Additionally, initialization of the renderer can fail if the hardware it is running on does not meet system requirements. You can evaluate the STARTRENDERER event to wait until the renderer has started drawing before you begin your game logic, to detect if the renderer has failed to initialize, and to retrieve the name of the graphics device the renderer is using. The event.data member will be set to 1 if the renderer was initialized successfully, otherwise it will be set to 0. The device name will be stored in the event.text member.\nIf your game spendsa significant amount of time initializing a scene, you can save a few seconds of loading time by calling this method immediately after creating a framebuffer so that Vulkan initialization is performed at the same time your game is loading.\n\n\n", "tags": "World::Render", "url": "https://www.ultraengine.com/learn/World_Render?lang=cpp"},
{"title": "World::Save", "text": "\n\nThis method serializes the world to a file that can be loaded later. This can be used for saving the current game state, saving a scene created with a custom editor, or relaying the current game state to a new player who joins a multiplayer game.\n\n\nbool Save(const WString&amp; path, const SaveFlags flags = SAVE_DEFAULT)\n\n\n\n\nParameter\nDescription\n\n\n\n\npath\nfile path to save\n\n\nflags\noptional save flags\n\n\n\n\nThe save routine works with the entity component system to save your own C++ classes.\n", "tags": "World::Save", "url": "https://www.ultraengine.com/learn/World_Save?lang=cpp"},
{"title": "World::SetAmbientLight", "text": "\n\nThis method sets the ambient light level for the world.\n\n\nvoid SetAmbientLight(const float r, const float g, const float b)\nvoid SetAmbientLight(const Vec3&amp; ambientlight)\n\n\n\n\nParameter\nDescription\n\n\n\n\nambientlight, (r, g, b)\nambient light level\n\n\n\n", "tags": "World::SetAmbientLight", "url": "https://www.ultraengine.com/learn/World_SetAmbientLight?lang=cpp"},
{"title": "World::SetCollisionResponse", "text": "\n\nThis method can be used to set custom collision responses between different collision types.\n\nvoid SetCollisionResponse(const int type1, const int type2, const CollisionResponse response)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntype1\none of the collision types in the collision\n\n\ntype2\nthe other collition type in the collision\n\n\nresponse\nthe collision response, can be COLLISIONRESPONSE_NONE, COLLISIONRESPONSE_COLLIDE, or COLLISIONRESPONSE_DETECT\n\n\n\n\nThe collision types can be any integer value or predefined collision type:\n\nCOLLISIONTYPE_NONE\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_SCENE\nCOLLISIONTYPE_PLAYER\nCOLLISIONTYPE_TRIGGER\nCOLLISIONTYPE_DEBRIS\nCOLLISIONTYPE_PROJECTILE\n\nThe table below shows the default collision responses the engine defines for each new world:\n\n\n\nType 1\nType 2\nResponse\n\n\n\n\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_PROP\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_SCENE\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_DEBRIS\nCOLLISIONTYPE_SCENE\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_DEBRIS\nCOLLISIONTYPE_PROP\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_SCENE\nCOLLISIONTYPE_PLAYER\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_PLAYER\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PLAYER\nCOLLISIONTYPE_PLAYER\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_SCENE\nCOLLISIONTYPE_PROJECTILE\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PROP\nCOLLISIONTYPE_PROJECTILE\nCOLLISIONRESPONSE_COLLIDE\n\n\nCOLLISIONTYPE_PLAYER\nCOLLISIONTYPE_TRIGGER\nCOLLISIONRESPONSE_DETECT\n\n\n\n", "tags": "World::SetCollisionResponse", "url": "https://www.ultraengine.com/learn/World_SetCollisionResponse?lang=cpp"},
{"title": "World::SetEnvironmentMap", "text": "\n\nThis method sets the world skybox or specular and diffuse reflection maps.\n\n\nvoid SetEnvironmentMap(shared_ptr&lt;Texture&gt; texture, const EnvironmentMap id)\n\n\n\n\nParameter\nDescription\n\n\n\n\ntexture\ncubemap to set\n\n\nid\nenvironment map ID, may be ENVIRONMENT_BACKGROUND, ENVIRONMENT_SPECULAR, or ENVIRONMENT_DIFFUSE\n\n\n\n\n\n", "tags": "World::SetEnvironmentMap", "url": "https://www.ultraengine.com/learn/World_SetEnvironmentMap?lang=cpp"},
{"title": "World::SetGravity", "text": "\n\nThe methods sets the gravitational vector applied uniformly across the world.\n\n\nvoid SetGravity(const xVec3&amp; gravity)\nvoid SetGravity(const dFloat x, const dFloat y, const dFloat z)\n\n\n\n\nParameter\nDescription\n\n\n\n\ngravity, (x, y, z)\ngravitional force to set, in meters per second squared\n\n\n\n", "tags": "World::SetGravity", "url": "https://www.ultraengine.com/learn/World_SetGravity?lang=cpp"},
{"title": "World::Update", "text": "\n\nThis method updates timing, physics, and other systems. This should be called once per frame the main application loop.\n\n\nvoid Update(const int frequency = 60, const int threads = 0, const int iterations = 0, const int substeps = 1)\n\n\n\n\nParameter\nDescription\n\n\n\n\nfrequency\nnumber of updates per second\n\n\nthreads\nnumber of physics threads, or zero for automatic\n\n\niterations\nnumber of physics iterations, or zero for the exact solver\n\n\nsubsteps\nnumber of physics sub-steps\n\n\n\n\nThe update frequency can be increased for greater precision, but this will require you game code to run at a greater frequncy. The default setting of 60 hz allows your game code and physics to each execute in less than 16.7 milliseconds. A frequency of 90 hz requires your game code and physics calculations to both execute in less than 11.1 milliseconds.\nBy default, the physics engine will perform iterations until an exact solution is found. You can explicitly control the number of cycles with the iterations paramters. One is the fastest and least accurate, and greater numbers will be slower but more accurate.\nBy default the engine will allocate a number of threads for physics calculations. You can control this number by supplying a value greater than zero in the threads paramter.\nFor greater precision, you can split physics updating up into multiple sub-steps by providing a value greater than one in the substeps paramter. This can be useful when very precise physics behavior is needed, but more substeps can cause slower performance.\n\n\n", "tags": "World::Update", "url": "https://www.ultraengine.com/learn/World_Update?lang=cpp"}
]};